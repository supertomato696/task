// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug.proto

#ifndef PROTOBUF_debug_2eproto__INCLUDED
#define PROTOBUF_debug_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
#include "location.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_debug_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDebugImpl();
void InitDefaultsDebug();
void InitDefaultsPose2dImpl();
void InitDefaultsPose2d();
void InitDefaultsPoint2dImpl();
void InitDefaultsPoint2d();
void InitDefaultsPoint2fImpl();
void InitDefaultsPoint2f();
void InitDefaultsPolylineImpl();
void InitDefaultsPolyline();
void InitDefaultsPrintStringImpl();
void InitDefaultsPrintString();
void InitDefaultsReprojObjectImpl();
void InitDefaultsReprojObject();
void InitDefaultsPecpObjectImpl();
void InitDefaultsPecpObject();
void InitDefaultsRectEndpointImpl();
void InitDefaultsRectEndpoint();
void InitDefaultsImageImpl();
void InitDefaultsImage();
void InitDefaultsParticlesImpl();
void InitDefaultsParticles();
void InitDefaultsCanDataImpl();
void InitDefaultsCanData();
void InitDefaultsPecpDataImpl();
void InitDefaultsPecpData();
void InitDefaultsLocErrorImpl();
void InitDefaultsLocError();
void InitDefaultsMatchPairImpl();
void InitDefaultsMatchPair();
inline void InitDefaults() {
  InitDefaultsDebug();
  InitDefaultsPose2d();
  InitDefaultsPoint2d();
  InitDefaultsPoint2f();
  InitDefaultsPolyline();
  InitDefaultsPrintString();
  InitDefaultsReprojObject();
  InitDefaultsPecpObject();
  InitDefaultsRectEndpoint();
  InitDefaultsImage();
  InitDefaultsParticles();
  InitDefaultsCanData();
  InitDefaultsPecpData();
  InitDefaultsLocError();
  InitDefaultsMatchPair();
}
}  // namespace protobuf_debug_2eproto
namespace ndm_proto {
class CanData;
class CanDataDefaultTypeInternal;
extern CanDataDefaultTypeInternal _CanData_default_instance_;
class Debug;
class DebugDefaultTypeInternal;
extern DebugDefaultTypeInternal _Debug_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class LocError;
class LocErrorDefaultTypeInternal;
extern LocErrorDefaultTypeInternal _LocError_default_instance_;
class MatchPair;
class MatchPairDefaultTypeInternal;
extern MatchPairDefaultTypeInternal _MatchPair_default_instance_;
class Particles;
class ParticlesDefaultTypeInternal;
extern ParticlesDefaultTypeInternal _Particles_default_instance_;
class PecpData;
class PecpDataDefaultTypeInternal;
extern PecpDataDefaultTypeInternal _PecpData_default_instance_;
class PecpObject;
class PecpObjectDefaultTypeInternal;
extern PecpObjectDefaultTypeInternal _PecpObject_default_instance_;
class Point2d;
class Point2dDefaultTypeInternal;
extern Point2dDefaultTypeInternal _Point2d_default_instance_;
class Point2f;
class Point2fDefaultTypeInternal;
extern Point2fDefaultTypeInternal _Point2f_default_instance_;
class Polyline;
class PolylineDefaultTypeInternal;
extern PolylineDefaultTypeInternal _Polyline_default_instance_;
class Pose2d;
class Pose2dDefaultTypeInternal;
extern Pose2dDefaultTypeInternal _Pose2d_default_instance_;
class PrintString;
class PrintStringDefaultTypeInternal;
extern PrintStringDefaultTypeInternal _PrintString_default_instance_;
class RectEndpoint;
class RectEndpointDefaultTypeInternal;
extern RectEndpointDefaultTypeInternal _RectEndpoint_default_instance_;
class ReprojObject;
class ReprojObjectDefaultTypeInternal;
extern ReprojObjectDefaultTypeInternal _ReprojObject_default_instance_;
}  // namespace ndm_proto
namespace ndm_proto {

enum ObjectType {
  LocLaneLine = 0,
  LocStopline = 1,
  LocCrossWalk = 2,
  LocSpeedbump = 3,
  LocLaneMarking = 4,
  LocPole = 5,
  LocTrafficLight = 6,
  LocTrafficSign = 7,
  LocBoard = 8,
  LocBorderLine = 9,
  LocVirtual_LaneLine = 10,
  LocVirtual_DriveLine = 11,
  LocSolidLaneLine = 12
};
bool ObjectType_IsValid(int value);
const ObjectType ObjectType_MIN = LocLaneLine;
const ObjectType ObjectType_MAX = LocSolidLaneLine;
const int ObjectType_ARRAYSIZE = ObjectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectType_descriptor();
inline const ::std::string& ObjectType_Name(ObjectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectType_descriptor(), value);
}
inline bool ObjectType_Parse(
    const ::std::string& name, ObjectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectType>(
    ObjectType_descriptor(), name, value);
}
// ===================================================================

class Debug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.Debug) */ {
 public:
  Debug();
  virtual ~Debug();

  Debug(const Debug& from);

  inline Debug& operator=(const Debug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Debug(Debug&& from) noexcept
    : Debug() {
    *this = ::std::move(from);
  }

  inline Debug& operator=(Debug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug* internal_default_instance() {
    return reinterpret_cast<const Debug*>(
               &_Debug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Debug* other);
  friend void swap(Debug& a, Debug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Debug* New() const PROTOBUF_FINAL { return New(NULL); }

  Debug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debug& from);
  void MergeFrom(const Debug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ndm_proto.ReprojObject uv_reproj_objects = 3;
  int uv_reproj_objects_size() const;
  void clear_uv_reproj_objects();
  static const int kUvReprojObjectsFieldNumber = 3;
  const ::ndm_proto::ReprojObject& uv_reproj_objects(int index) const;
  ::ndm_proto::ReprojObject* mutable_uv_reproj_objects(int index);
  ::ndm_proto::ReprojObject* add_uv_reproj_objects();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::ReprojObject >*
      mutable_uv_reproj_objects();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::ReprojObject >&
      uv_reproj_objects() const;

  // repeated .ndm_proto.ReprojObject vcs_reproj_objects = 4;
  int vcs_reproj_objects_size() const;
  void clear_vcs_reproj_objects();
  static const int kVcsReprojObjectsFieldNumber = 4;
  const ::ndm_proto::ReprojObject& vcs_reproj_objects(int index) const;
  ::ndm_proto::ReprojObject* mutable_vcs_reproj_objects(int index);
  ::ndm_proto::ReprojObject* add_vcs_reproj_objects();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::ReprojObject >*
      mutable_vcs_reproj_objects();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::ReprojObject >&
      vcs_reproj_objects() const;

  // repeated uint32 error_count = 16;
  int error_count_size() const;
  void clear_error_count();
  static const int kErrorCountFieldNumber = 16;
  ::google::protobuf::uint32 error_count(int index) const;
  void set_error_count(int index, ::google::protobuf::uint32 value);
  void add_error_count(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      error_count() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_error_count();

  // repeated .ndm_proto.PecpData pecp_obj = 21;
  int pecp_obj_size() const;
  void clear_pecp_obj();
  static const int kPecpObjFieldNumber = 21;
  const ::ndm_proto::PecpData& pecp_obj(int index) const;
  ::ndm_proto::PecpData* mutable_pecp_obj(int index);
  ::ndm_proto::PecpData* add_pecp_obj();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::PecpData >*
      mutable_pecp_obj();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::PecpData >&
      pecp_obj() const;

  // repeated .ndm_proto.MatchPair vcs_match_pair = 22;
  int vcs_match_pair_size() const;
  void clear_vcs_match_pair();
  static const int kVcsMatchPairFieldNumber = 22;
  const ::ndm_proto::MatchPair& vcs_match_pair(int index) const;
  ::ndm_proto::MatchPair* mutable_vcs_match_pair(int index);
  ::ndm_proto::MatchPair* add_vcs_match_pair();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::MatchPair >*
      mutable_vcs_match_pair();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::MatchPair >&
      vcs_match_pair() const;

  // repeated .ndm_proto.PecpObject vcs_pecp_objects = 23;
  int vcs_pecp_objects_size() const;
  void clear_vcs_pecp_objects();
  static const int kVcsPecpObjectsFieldNumber = 23;
  const ::ndm_proto::PecpObject& vcs_pecp_objects(int index) const;
  ::ndm_proto::PecpObject* mutable_vcs_pecp_objects(int index);
  ::ndm_proto::PecpObject* add_vcs_pecp_objects();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::PecpObject >*
      mutable_vcs_pecp_objects();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::PecpObject >&
      vcs_pecp_objects() const;

  // optional string pack_name = 12;
  bool has_pack_name() const;
  void clear_pack_name();
  static const int kPackNameFieldNumber = 12;
  const ::std::string& pack_name() const;
  void set_pack_name(const ::std::string& value);
  #if LANG_CXX11
  void set_pack_name(::std::string&& value);
  #endif
  void set_pack_name(const char* value);
  void set_pack_name(const char* value, size_t size);
  ::std::string* mutable_pack_name();
  ::std::string* release_pack_name();
  void set_allocated_pack_name(::std::string* pack_name);

  // optional .ndm_proto.Location map_loc = 1;
  bool has_map_loc() const;
  void clear_map_loc();
  static const int kMapLocFieldNumber = 1;
  const ::ndm_proto::Location& map_loc() const;
  ::ndm_proto::Location* release_map_loc();
  ::ndm_proto::Location* mutable_map_loc();
  void set_allocated_map_loc(::ndm_proto::Location* map_loc);

  // optional .ndm_proto.Location fusion_loc = 2;
  bool has_fusion_loc() const;
  void clear_fusion_loc();
  static const int kFusionLocFieldNumber = 2;
  const ::ndm_proto::Location& fusion_loc() const;
  ::ndm_proto::Location* release_fusion_loc();
  ::ndm_proto::Location* mutable_fusion_loc();
  void set_allocated_fusion_loc(::ndm_proto::Location* fusion_loc);

  // optional .ndm_proto.Image original_image = 5;
  bool has_original_image() const;
  void clear_original_image();
  static const int kOriginalImageFieldNumber = 5;
  const ::ndm_proto::Image& original_image() const;
  ::ndm_proto::Image* release_original_image();
  ::ndm_proto::Image* mutable_original_image();
  void set_allocated_original_image(::ndm_proto::Image* original_image);

  // optional .ndm_proto.Image parsing = 6;
  bool has_parsing() const;
  void clear_parsing();
  static const int kParsingFieldNumber = 6;
  const ::ndm_proto::Image& parsing() const;
  ::ndm_proto::Image* release_parsing();
  ::ndm_proto::Image* mutable_parsing();
  void set_allocated_parsing(::ndm_proto::Image* parsing);

  // optional .ndm_proto.Image lane_parsing = 7;
  bool has_lane_parsing() const;
  void clear_lane_parsing();
  static const int kLaneParsingFieldNumber = 7;
  const ::ndm_proto::Image& lane_parsing() const;
  ::ndm_proto::Image* release_lane_parsing();
  ::ndm_proto::Image* mutable_lane_parsing();
  void set_allocated_lane_parsing(::ndm_proto::Image* lane_parsing);

  // optional .ndm_proto.Odometry chassis_odom = 8;
  bool has_chassis_odom() const;
  void clear_chassis_odom();
  static const int kChassisOdomFieldNumber = 8;
  const ::ndm_proto::Odometry& chassis_odom() const;
  ::ndm_proto::Odometry* release_chassis_odom();
  ::ndm_proto::Odometry* mutable_chassis_odom();
  void set_allocated_chassis_odom(::ndm_proto::Odometry* chassis_odom);

  // optional .ndm_proto.Odometry gnss_odom = 9;
  bool has_gnss_odom() const;
  void clear_gnss_odom();
  static const int kGnssOdomFieldNumber = 9;
  const ::ndm_proto::Odometry& gnss_odom() const;
  ::ndm_proto::Odometry* release_gnss_odom();
  ::ndm_proto::Odometry* mutable_gnss_odom();
  void set_allocated_gnss_odom(::ndm_proto::Odometry* gnss_odom);

  // optional .ndm_proto.Odometry gnss_scored_odom = 10;
  bool has_gnss_scored_odom() const;
  void clear_gnss_scored_odom();
  static const int kGnssScoredOdomFieldNumber = 10;
  const ::ndm_proto::Odometry& gnss_scored_odom() const;
  ::ndm_proto::Odometry* release_gnss_scored_odom();
  ::ndm_proto::Odometry* mutable_gnss_scored_odom();
  void set_allocated_gnss_scored_odom(::ndm_proto::Odometry* gnss_scored_odom);

  // optional .ndm_proto.Particles particles = 11;
  bool has_particles() const;
  void clear_particles();
  static const int kParticlesFieldNumber = 11;
  const ::ndm_proto::Particles& particles() const;
  ::ndm_proto::Particles* release_particles();
  ::ndm_proto::Particles* mutable_particles();
  void set_allocated_particles(::ndm_proto::Particles* particles);

  // optional .ndm_proto.CanData can_data = 14;
  bool has_can_data() const;
  void clear_can_data();
  static const int kCanDataFieldNumber = 14;
  const ::ndm_proto::CanData& can_data() const;
  ::ndm_proto::CanData* release_can_data();
  ::ndm_proto::CanData* mutable_can_data();
  void set_allocated_can_data(::ndm_proto::CanData* can_data);

  // optional .ndm_proto.LocError gt_diff = 18;
  bool has_gt_diff() const;
  void clear_gt_diff();
  static const int kGtDiffFieldNumber = 18;
  const ::ndm_proto::LocError& gt_diff() const;
  ::ndm_proto::LocError* release_gt_diff();
  ::ndm_proto::LocError* mutable_gt_diff();
  void set_allocated_gt_diff(::ndm_proto::LocError* gt_diff);

  // optional .ndm_proto.LocError global_diff = 19;
  bool has_global_diff() const;
  void clear_global_diff();
  static const int kGlobalDiffFieldNumber = 19;
  const ::ndm_proto::LocError& global_diff() const;
  ::ndm_proto::LocError* release_global_diff();
  ::ndm_proto::LocError* mutable_global_diff();
  void set_allocated_global_diff(::ndm_proto::LocError* global_diff);

  // optional uint64 pack_frame_id = 13;
  bool has_pack_frame_id() const;
  void clear_pack_frame_id();
  static const int kPackFrameIdFieldNumber = 13;
  ::google::protobuf::uint64 pack_frame_id() const;
  void set_pack_frame_id(::google::protobuf::uint64 value);

  // optional double session_distance = 15;
  bool has_session_distance() const;
  void clear_session_distance();
  static const int kSessionDistanceFieldNumber = 15;
  double session_distance() const;
  void set_session_distance(double value);

  // optional float bias_lat = 17;
  bool has_bias_lat() const;
  void clear_bias_lat();
  static const int kBiasLatFieldNumber = 17;
  float bias_lat() const;
  void set_bias_lat(float value);

  // optional uint32 pecp_num = 20;
  bool has_pecp_num() const;
  void clear_pecp_num();
  static const int kPecpNumFieldNumber = 20;
  ::google::protobuf::uint32 pecp_num() const;
  void set_pecp_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ndm_proto.Debug)
 private:
  void set_has_map_loc();
  void clear_has_map_loc();
  void set_has_fusion_loc();
  void clear_has_fusion_loc();
  void set_has_original_image();
  void clear_has_original_image();
  void set_has_parsing();
  void clear_has_parsing();
  void set_has_lane_parsing();
  void clear_has_lane_parsing();
  void set_has_chassis_odom();
  void clear_has_chassis_odom();
  void set_has_gnss_odom();
  void clear_has_gnss_odom();
  void set_has_gnss_scored_odom();
  void clear_has_gnss_scored_odom();
  void set_has_particles();
  void clear_has_particles();
  void set_has_pack_name();
  void clear_has_pack_name();
  void set_has_pack_frame_id();
  void clear_has_pack_frame_id();
  void set_has_can_data();
  void clear_has_can_data();
  void set_has_session_distance();
  void clear_has_session_distance();
  void set_has_bias_lat();
  void clear_has_bias_lat();
  void set_has_gt_diff();
  void clear_has_gt_diff();
  void set_has_global_diff();
  void clear_has_global_diff();
  void set_has_pecp_num();
  void clear_has_pecp_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::ReprojObject > uv_reproj_objects_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::ReprojObject > vcs_reproj_objects_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > error_count_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::PecpData > pecp_obj_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::MatchPair > vcs_match_pair_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::PecpObject > vcs_pecp_objects_;
  ::google::protobuf::internal::ArenaStringPtr pack_name_;
  ::ndm_proto::Location* map_loc_;
  ::ndm_proto::Location* fusion_loc_;
  ::ndm_proto::Image* original_image_;
  ::ndm_proto::Image* parsing_;
  ::ndm_proto::Image* lane_parsing_;
  ::ndm_proto::Odometry* chassis_odom_;
  ::ndm_proto::Odometry* gnss_odom_;
  ::ndm_proto::Odometry* gnss_scored_odom_;
  ::ndm_proto::Particles* particles_;
  ::ndm_proto::CanData* can_data_;
  ::ndm_proto::LocError* gt_diff_;
  ::ndm_proto::LocError* global_diff_;
  ::google::protobuf::uint64 pack_frame_id_;
  double session_distance_;
  float bias_lat_;
  ::google::protobuf::uint32 pecp_num_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsDebugImpl();
};
// -------------------------------------------------------------------

class Pose2d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.Pose2d) */ {
 public:
  Pose2d();
  virtual ~Pose2d();

  Pose2d(const Pose2d& from);

  inline Pose2d& operator=(const Pose2d& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pose2d(Pose2d&& from) noexcept
    : Pose2d() {
    *this = ::std::move(from);
  }

  inline Pose2d& operator=(Pose2d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose2d* internal_default_instance() {
    return reinterpret_cast<const Pose2d*>(
               &_Pose2d_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Pose2d* other);
  friend void swap(Pose2d& a, Pose2d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose2d* New() const PROTOBUF_FINAL { return New(NULL); }

  Pose2d* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pose2d& from);
  void MergeFrom(const Pose2d& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pose2d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // required double yaw = 3;
  bool has_yaw() const;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  double yaw() const;
  void set_yaw(double value);

  // @@protoc_insertion_point(class_scope:ndm_proto.Pose2d)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_yaw();
  void clear_has_yaw();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  double yaw_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsPose2dImpl();
};
// -------------------------------------------------------------------

class Point2d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.Point2d) */ {
 public:
  Point2d();
  virtual ~Point2d();

  Point2d(const Point2d& from);

  inline Point2d& operator=(const Point2d& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point2d(Point2d&& from) noexcept
    : Point2d() {
    *this = ::std::move(from);
  }

  inline Point2d& operator=(Point2d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2d* internal_default_instance() {
    return reinterpret_cast<const Point2d*>(
               &_Point2d_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Point2d* other);
  friend void swap(Point2d& a, Point2d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point2d* New() const PROTOBUF_FINAL { return New(NULL); }

  Point2d* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point2d& from);
  void MergeFrom(const Point2d& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point2d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:ndm_proto.Point2d)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsPoint2dImpl();
};
// -------------------------------------------------------------------

class Point2f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.Point2f) */ {
 public:
  Point2f();
  virtual ~Point2f();

  Point2f(const Point2f& from);

  inline Point2f& operator=(const Point2f& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point2f(Point2f&& from) noexcept
    : Point2f() {
    *this = ::std::move(from);
  }

  inline Point2f& operator=(Point2f&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2f* internal_default_instance() {
    return reinterpret_cast<const Point2f*>(
               &_Point2f_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Point2f* other);
  friend void swap(Point2f& a, Point2f& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point2f* New() const PROTOBUF_FINAL { return New(NULL); }

  Point2f* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point2f& from);
  void MergeFrom(const Point2f& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point2f* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:ndm_proto.Point2f)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float x_;
  float y_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsPoint2fImpl();
};
// -------------------------------------------------------------------

class Polyline : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.Polyline) */ {
 public:
  Polyline();
  virtual ~Polyline();

  Polyline(const Polyline& from);

  inline Polyline& operator=(const Polyline& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Polyline(Polyline&& from) noexcept
    : Polyline() {
    *this = ::std::move(from);
  }

  inline Polyline& operator=(Polyline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polyline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polyline* internal_default_instance() {
    return reinterpret_cast<const Polyline*>(
               &_Polyline_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Polyline* other);
  friend void swap(Polyline& a, Polyline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Polyline* New() const PROTOBUF_FINAL { return New(NULL); }

  Polyline* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Polyline& from);
  void MergeFrom(const Polyline& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Polyline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ndm_proto.Point2d points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  const ::ndm_proto::Point2d& points(int index) const;
  ::ndm_proto::Point2d* mutable_points(int index);
  ::ndm_proto::Point2d* add_points();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2d >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2d >&
      points() const;

  // optional .ndm_proto.ObjectType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::ndm_proto::ObjectType type() const;
  void set_type(::ndm_proto::ObjectType value);

  // @@protoc_insertion_point(class_scope:ndm_proto.Polyline)
 private:
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2d > points_;
  int type_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsPolylineImpl();
};
// -------------------------------------------------------------------

class PrintString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.PrintString) */ {
 public:
  PrintString();
  virtual ~PrintString();

  PrintString(const PrintString& from);

  inline PrintString& operator=(const PrintString& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrintString(PrintString&& from) noexcept
    : PrintString() {
    *this = ::std::move(from);
  }

  inline PrintString& operator=(PrintString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrintString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintString* internal_default_instance() {
    return reinterpret_cast<const PrintString*>(
               &_PrintString_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PrintString* other);
  friend void swap(PrintString& a, PrintString& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrintString* New() const PROTOBUF_FINAL { return New(NULL); }

  PrintString* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrintString& from);
  void MergeFrom(const PrintString& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrintString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string str = 1;
  bool has_str() const;
  void clear_str();
  static const int kStrFieldNumber = 1;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  #if LANG_CXX11
  void set_str(::std::string&& value);
  #endif
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // required .ndm_proto.Point2d pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  const ::ndm_proto::Point2d& pos() const;
  ::ndm_proto::Point2d* release_pos();
  ::ndm_proto::Point2d* mutable_pos();
  void set_allocated_pos(::ndm_proto::Point2d* pos);

  // @@protoc_insertion_point(class_scope:ndm_proto.PrintString)
 private:
  void set_has_str();
  void clear_has_str();
  void set_has_pos();
  void clear_has_pos();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  ::ndm_proto::Point2d* pos_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsPrintStringImpl();
};
// -------------------------------------------------------------------

class ReprojObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.ReprojObject) */ {
 public:
  ReprojObject();
  virtual ~ReprojObject();

  ReprojObject(const ReprojObject& from);

  inline ReprojObject& operator=(const ReprojObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReprojObject(ReprojObject&& from) noexcept
    : ReprojObject() {
    *this = ::std::move(from);
  }

  inline ReprojObject& operator=(ReprojObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReprojObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReprojObject* internal_default_instance() {
    return reinterpret_cast<const ReprojObject*>(
               &_ReprojObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ReprojObject* other);
  friend void swap(ReprojObject& a, ReprojObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReprojObject* New() const PROTOBUF_FINAL { return New(NULL); }

  ReprojObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReprojObject& from);
  void MergeFrom(const ReprojObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReprojObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ndm_proto.Polyline polylines = 1;
  int polylines_size() const;
  void clear_polylines();
  static const int kPolylinesFieldNumber = 1;
  const ::ndm_proto::Polyline& polylines(int index) const;
  ::ndm_proto::Polyline* mutable_polylines(int index);
  ::ndm_proto::Polyline* add_polylines();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Polyline >*
      mutable_polylines();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Polyline >&
      polylines() const;

  // repeated .ndm_proto.PrintString printstrings = 2;
  int printstrings_size() const;
  void clear_printstrings();
  static const int kPrintstringsFieldNumber = 2;
  const ::ndm_proto::PrintString& printstrings(int index) const;
  ::ndm_proto::PrintString* mutable_printstrings(int index);
  ::ndm_proto::PrintString* add_printstrings();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::PrintString >*
      mutable_printstrings();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::PrintString >&
      printstrings() const;

  // @@protoc_insertion_point(class_scope:ndm_proto.ReprojObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Polyline > polylines_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::PrintString > printstrings_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsReprojObjectImpl();
};
// -------------------------------------------------------------------

class PecpObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.PecpObject) */ {
 public:
  PecpObject();
  virtual ~PecpObject();

  PecpObject(const PecpObject& from);

  inline PecpObject& operator=(const PecpObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PecpObject(PecpObject&& from) noexcept
    : PecpObject() {
    *this = ::std::move(from);
  }

  inline PecpObject& operator=(PecpObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PecpObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PecpObject* internal_default_instance() {
    return reinterpret_cast<const PecpObject*>(
               &_PecpObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(PecpObject* other);
  friend void swap(PecpObject& a, PecpObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PecpObject* New() const PROTOBUF_FINAL { return New(NULL); }

  PecpObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PecpObject& from);
  void MergeFrom(const PecpObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PecpObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ndm_proto.Point2f meas_points = 1;
  int meas_points_size() const;
  void clear_meas_points();
  static const int kMeasPointsFieldNumber = 1;
  const ::ndm_proto::Point2f& meas_points(int index) const;
  ::ndm_proto::Point2f* mutable_meas_points(int index);
  ::ndm_proto::Point2f* add_meas_points();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2f >*
      mutable_meas_points();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2f >&
      meas_points() const;

  // optional .ndm_proto.RectEndpoint rect_point = 2;
  bool has_rect_point() const;
  void clear_rect_point();
  static const int kRectPointFieldNumber = 2;
  const ::ndm_proto::RectEndpoint& rect_point() const;
  ::ndm_proto::RectEndpoint* release_rect_point();
  ::ndm_proto::RectEndpoint* mutable_rect_point();
  void set_allocated_rect_point(::ndm_proto::RectEndpoint* rect_point);

  // optional .ndm_proto.ObjectType meas_type = 3;
  bool has_meas_type() const;
  void clear_meas_type();
  static const int kMeasTypeFieldNumber = 3;
  ::ndm_proto::ObjectType meas_type() const;
  void set_meas_type(::ndm_proto::ObjectType value);

  // @@protoc_insertion_point(class_scope:ndm_proto.PecpObject)
 private:
  void set_has_rect_point();
  void clear_has_rect_point();
  void set_has_meas_type();
  void clear_has_meas_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2f > meas_points_;
  ::ndm_proto::RectEndpoint* rect_point_;
  int meas_type_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsPecpObjectImpl();
};
// -------------------------------------------------------------------

class RectEndpoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.RectEndpoint) */ {
 public:
  RectEndpoint();
  virtual ~RectEndpoint();

  RectEndpoint(const RectEndpoint& from);

  inline RectEndpoint& operator=(const RectEndpoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RectEndpoint(RectEndpoint&& from) noexcept
    : RectEndpoint() {
    *this = ::std::move(from);
  }

  inline RectEndpoint& operator=(RectEndpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RectEndpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RectEndpoint* internal_default_instance() {
    return reinterpret_cast<const RectEndpoint*>(
               &_RectEndpoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(RectEndpoint* other);
  friend void swap(RectEndpoint& a, RectEndpoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RectEndpoint* New() const PROTOBUF_FINAL { return New(NULL); }

  RectEndpoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RectEndpoint& from);
  void MergeFrom(const RectEndpoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RectEndpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ndm_proto.Point2f up_point = 1;
  bool has_up_point() const;
  void clear_up_point();
  static const int kUpPointFieldNumber = 1;
  const ::ndm_proto::Point2f& up_point() const;
  ::ndm_proto::Point2f* release_up_point();
  ::ndm_proto::Point2f* mutable_up_point();
  void set_allocated_up_point(::ndm_proto::Point2f* up_point);

  // required .ndm_proto.Point2f down_point = 2;
  bool has_down_point() const;
  void clear_down_point();
  static const int kDownPointFieldNumber = 2;
  const ::ndm_proto::Point2f& down_point() const;
  ::ndm_proto::Point2f* release_down_point();
  ::ndm_proto::Point2f* mutable_down_point();
  void set_allocated_down_point(::ndm_proto::Point2f* down_point);

  // required bool up_valid = 3;
  bool has_up_valid() const;
  void clear_up_valid();
  static const int kUpValidFieldNumber = 3;
  bool up_valid() const;
  void set_up_valid(bool value);

  // required bool down_valid = 4;
  bool has_down_valid() const;
  void clear_down_valid();
  static const int kDownValidFieldNumber = 4;
  bool down_valid() const;
  void set_down_valid(bool value);

  // @@protoc_insertion_point(class_scope:ndm_proto.RectEndpoint)
 private:
  void set_has_up_point();
  void clear_has_up_point();
  void set_has_down_point();
  void clear_has_down_point();
  void set_has_up_valid();
  void clear_has_up_valid();
  void set_has_down_valid();
  void clear_has_down_valid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ndm_proto::Point2f* up_point_;
  ::ndm_proto::Point2f* down_point_;
  bool up_valid_;
  bool down_valid_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsRectEndpointImpl();
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const PROTOBUF_FINAL { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string name = 8;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 8;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required uint32 rows = 2;
  bool has_rows() const;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  ::google::protobuf::uint32 rows() const;
  void set_rows(::google::protobuf::uint32 value);

  // required uint32 cols = 3;
  bool has_cols() const;
  void clear_cols();
  static const int kColsFieldNumber = 3;
  ::google::protobuf::uint32 cols() const;
  void set_cols(::google::protobuf::uint32 value);

  // required uint32 channel = 4;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 4;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // required uint32 depth = 5;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 5;
  ::google::protobuf::uint32 depth() const;
  void set_depth(::google::protobuf::uint32 value);

  // optional uint32 data_size = 6;
  bool has_data_size() const;
  void clear_data_size();
  static const int kDataSizeFieldNumber = 6;
  ::google::protobuf::uint32 data_size() const;
  void set_data_size(::google::protobuf::uint32 value);

  // optional uint32 type = 7;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ndm_proto.Image)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_rows();
  void clear_has_rows();
  void set_has_cols();
  void clear_has_cols();
  void set_has_channel();
  void clear_has_channel();
  void set_has_depth();
  void clear_has_depth();
  void set_has_data_size();
  void clear_has_data_size();
  void set_has_type();
  void clear_has_type();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 rows_;
  ::google::protobuf::uint32 cols_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 depth_;
  ::google::protobuf::uint32 data_size_;
  ::google::protobuf::uint32 type_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsImageImpl();
};
// -------------------------------------------------------------------

class Particles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.Particles) */ {
 public:
  Particles();
  virtual ~Particles();

  Particles(const Particles& from);

  inline Particles& operator=(const Particles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Particles(Particles&& from) noexcept
    : Particles() {
    *this = ::std::move(from);
  }

  inline Particles& operator=(Particles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Particles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Particles* internal_default_instance() {
    return reinterpret_cast<const Particles*>(
               &_Particles_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Particles* other);
  friend void swap(Particles& a, Particles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Particles* New() const PROTOBUF_FINAL { return New(NULL); }

  Particles* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Particles& from);
  void MergeFrom(const Particles& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Particles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ndm_proto.Pose2d sample = 1;
  int sample_size() const;
  void clear_sample();
  static const int kSampleFieldNumber = 1;
  const ::ndm_proto::Pose2d& sample(int index) const;
  ::ndm_proto::Pose2d* mutable_sample(int index);
  ::ndm_proto::Pose2d* add_sample();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Pose2d >*
      mutable_sample();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Pose2d >&
      sample() const;

  // required double height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  double height() const;
  void set_height(double value);

  // required double pitch = 3;
  bool has_pitch() const;
  void clear_pitch();
  static const int kPitchFieldNumber = 3;
  double pitch() const;
  void set_pitch(double value);

  // required double roll = 4;
  bool has_roll() const;
  void clear_roll();
  static const int kRollFieldNumber = 4;
  double roll() const;
  void set_roll(double value);

  // @@protoc_insertion_point(class_scope:ndm_proto.Particles)
 private:
  void set_has_height();
  void clear_has_height();
  void set_has_pitch();
  void clear_has_pitch();
  void set_has_roll();
  void clear_has_roll();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Pose2d > sample_;
  double height_;
  double pitch_;
  double roll_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsParticlesImpl();
};
// -------------------------------------------------------------------

class CanData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.CanData) */ {
 public:
  CanData();
  virtual ~CanData();

  CanData(const CanData& from);

  inline CanData& operator=(const CanData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CanData(CanData&& from) noexcept
    : CanData() {
    *this = ::std::move(from);
  }

  inline CanData& operator=(CanData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CanData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CanData* internal_default_instance() {
    return reinterpret_cast<const CanData*>(
               &_CanData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CanData* other);
  friend void swap(CanData& a, CanData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CanData* New() const PROTOBUF_FINAL { return New(NULL); }

  CanData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CanData& from);
  void MergeFrom(const CanData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CanData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double speed = 1;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 1;
  double speed() const;
  void set_speed(double value);

  // required double yawrate = 2;
  bool has_yawrate() const;
  void clear_yawrate();
  static const int kYawrateFieldNumber = 2;
  double yawrate() const;
  void set_yawrate(double value);

  // @@protoc_insertion_point(class_scope:ndm_proto.CanData)
 private:
  void set_has_speed();
  void clear_has_speed();
  void set_has_yawrate();
  void clear_has_yawrate();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double speed_;
  double yawrate_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsCanDataImpl();
};
// -------------------------------------------------------------------

class PecpData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.PecpData) */ {
 public:
  PecpData();
  virtual ~PecpData();

  PecpData(const PecpData& from);

  inline PecpData& operator=(const PecpData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PecpData(PecpData&& from) noexcept
    : PecpData() {
    *this = ::std::move(from);
  }

  inline PecpData& operator=(PecpData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PecpData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PecpData* internal_default_instance() {
    return reinterpret_cast<const PecpData*>(
               &_PecpData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(PecpData* other);
  friend void swap(PecpData& a, PecpData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PecpData* New() const PROTOBUF_FINAL { return New(NULL); }

  PecpData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PecpData& from);
  void MergeFrom(const PecpData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PecpData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ndm_proto.Point2f pecp_points = 1;
  int pecp_points_size() const;
  void clear_pecp_points();
  static const int kPecpPointsFieldNumber = 1;
  const ::ndm_proto::Point2f& pecp_points(int index) const;
  ::ndm_proto::Point2f* mutable_pecp_points(int index);
  ::ndm_proto::Point2f* add_pecp_points();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2f >*
      mutable_pecp_points();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2f >&
      pecp_points() const;

  // optional uint32 lane_type = 2;
  bool has_lane_type() const;
  void clear_lane_type();
  static const int kLaneTypeFieldNumber = 2;
  ::google::protobuf::uint32 lane_type() const;
  void set_lane_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ndm_proto.PecpData)
 private:
  void set_has_lane_type();
  void clear_has_lane_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2f > pecp_points_;
  ::google::protobuf::uint32 lane_type_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsPecpDataImpl();
};
// -------------------------------------------------------------------

class LocError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.LocError) */ {
 public:
  LocError();
  virtual ~LocError();

  LocError(const LocError& from);

  inline LocError& operator=(const LocError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocError(LocError&& from) noexcept
    : LocError() {
    *this = ::std::move(from);
  }

  inline LocError& operator=(LocError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocError* internal_default_instance() {
    return reinterpret_cast<const LocError*>(
               &_LocError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(LocError* other);
  friend void swap(LocError& a, LocError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocError* New() const PROTOBUF_FINAL { return New(NULL); }

  LocError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocError& from);
  void MergeFrom(const LocError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ndm_proto.Pose2d value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::ndm_proto::Pose2d& value() const;
  ::ndm_proto::Pose2d* release_value();
  ::ndm_proto::Pose2d* mutable_value();
  void set_allocated_value(::ndm_proto::Pose2d* value);

  // required bool valid = 1;
  bool has_valid() const;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // @@protoc_insertion_point(class_scope:ndm_proto.LocError)
 private:
  void set_has_valid();
  void clear_has_valid();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ndm_proto::Pose2d* value_;
  bool valid_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsLocErrorImpl();
};
// -------------------------------------------------------------------

class MatchPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.MatchPair) */ {
 public:
  MatchPair();
  virtual ~MatchPair();

  MatchPair(const MatchPair& from);

  inline MatchPair& operator=(const MatchPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchPair(MatchPair&& from) noexcept
    : MatchPair() {
    *this = ::std::move(from);
  }

  inline MatchPair& operator=(MatchPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchPair* internal_default_instance() {
    return reinterpret_cast<const MatchPair*>(
               &_MatchPair_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(MatchPair* other);
  friend void swap(MatchPair& a, MatchPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchPair* New() const PROTOBUF_FINAL { return New(NULL); }

  MatchPair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MatchPair& from);
  void MergeFrom(const MatchPair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MatchPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ndm_proto.Point2f meas = 1;
  bool has_meas() const;
  void clear_meas();
  static const int kMeasFieldNumber = 1;
  const ::ndm_proto::Point2f& meas() const;
  ::ndm_proto::Point2f* release_meas();
  ::ndm_proto::Point2f* mutable_meas();
  void set_allocated_meas(::ndm_proto::Point2f* meas);

  // required .ndm_proto.Point2f map = 2;
  bool has_map() const;
  void clear_map();
  static const int kMapFieldNumber = 2;
  const ::ndm_proto::Point2f& map() const;
  ::ndm_proto::Point2f* release_map();
  ::ndm_proto::Point2f* mutable_map();
  void set_allocated_map(::ndm_proto::Point2f* map);

  // optional .ndm_proto.ObjectType asso_type = 3;
  bool has_asso_type() const;
  void clear_asso_type();
  static const int kAssoTypeFieldNumber = 3;
  ::ndm_proto::ObjectType asso_type() const;
  void set_asso_type(::ndm_proto::ObjectType value);

  // @@protoc_insertion_point(class_scope:ndm_proto.MatchPair)
 private:
  void set_has_meas();
  void clear_has_meas();
  void set_has_map();
  void clear_has_map();
  void set_has_asso_type();
  void clear_has_asso_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ndm_proto::Point2f* meas_;
  ::ndm_proto::Point2f* map_;
  int asso_type_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
  friend void ::protobuf_debug_2eproto::InitDefaultsMatchPairImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Debug

// optional .ndm_proto.Location map_loc = 1;
inline bool Debug::has_map_loc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Debug::set_has_map_loc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Debug::clear_has_map_loc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ndm_proto::Location& Debug::map_loc() const {
  const ::ndm_proto::Location* p = map_loc_;
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.map_loc)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Location*>(
      &::ndm_proto::_Location_default_instance_);
}
inline ::ndm_proto::Location* Debug::release_map_loc() {
  // @@protoc_insertion_point(field_release:ndm_proto.Debug.map_loc)
  clear_has_map_loc();
  ::ndm_proto::Location* temp = map_loc_;
  map_loc_ = NULL;
  return temp;
}
inline ::ndm_proto::Location* Debug::mutable_map_loc() {
  set_has_map_loc();
  if (map_loc_ == NULL) {
    map_loc_ = new ::ndm_proto::Location;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.map_loc)
  return map_loc_;
}
inline void Debug::set_allocated_map_loc(::ndm_proto::Location* map_loc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(map_loc_);
  }
  if (map_loc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_loc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_loc, submessage_arena);
    }
    set_has_map_loc();
  } else {
    clear_has_map_loc();
  }
  map_loc_ = map_loc;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Debug.map_loc)
}

// optional .ndm_proto.Location fusion_loc = 2;
inline bool Debug::has_fusion_loc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Debug::set_has_fusion_loc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Debug::clear_has_fusion_loc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ndm_proto::Location& Debug::fusion_loc() const {
  const ::ndm_proto::Location* p = fusion_loc_;
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.fusion_loc)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Location*>(
      &::ndm_proto::_Location_default_instance_);
}
inline ::ndm_proto::Location* Debug::release_fusion_loc() {
  // @@protoc_insertion_point(field_release:ndm_proto.Debug.fusion_loc)
  clear_has_fusion_loc();
  ::ndm_proto::Location* temp = fusion_loc_;
  fusion_loc_ = NULL;
  return temp;
}
inline ::ndm_proto::Location* Debug::mutable_fusion_loc() {
  set_has_fusion_loc();
  if (fusion_loc_ == NULL) {
    fusion_loc_ = new ::ndm_proto::Location;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.fusion_loc)
  return fusion_loc_;
}
inline void Debug::set_allocated_fusion_loc(::ndm_proto::Location* fusion_loc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fusion_loc_);
  }
  if (fusion_loc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fusion_loc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fusion_loc, submessage_arena);
    }
    set_has_fusion_loc();
  } else {
    clear_has_fusion_loc();
  }
  fusion_loc_ = fusion_loc;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Debug.fusion_loc)
}

// repeated .ndm_proto.ReprojObject uv_reproj_objects = 3;
inline int Debug::uv_reproj_objects_size() const {
  return uv_reproj_objects_.size();
}
inline void Debug::clear_uv_reproj_objects() {
  uv_reproj_objects_.Clear();
}
inline const ::ndm_proto::ReprojObject& Debug::uv_reproj_objects(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.uv_reproj_objects)
  return uv_reproj_objects_.Get(index);
}
inline ::ndm_proto::ReprojObject* Debug::mutable_uv_reproj_objects(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.uv_reproj_objects)
  return uv_reproj_objects_.Mutable(index);
}
inline ::ndm_proto::ReprojObject* Debug::add_uv_reproj_objects() {
  // @@protoc_insertion_point(field_add:ndm_proto.Debug.uv_reproj_objects)
  return uv_reproj_objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::ReprojObject >*
Debug::mutable_uv_reproj_objects() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Debug.uv_reproj_objects)
  return &uv_reproj_objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::ReprojObject >&
Debug::uv_reproj_objects() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Debug.uv_reproj_objects)
  return uv_reproj_objects_;
}

// repeated .ndm_proto.ReprojObject vcs_reproj_objects = 4;
inline int Debug::vcs_reproj_objects_size() const {
  return vcs_reproj_objects_.size();
}
inline void Debug::clear_vcs_reproj_objects() {
  vcs_reproj_objects_.Clear();
}
inline const ::ndm_proto::ReprojObject& Debug::vcs_reproj_objects(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.vcs_reproj_objects)
  return vcs_reproj_objects_.Get(index);
}
inline ::ndm_proto::ReprojObject* Debug::mutable_vcs_reproj_objects(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.vcs_reproj_objects)
  return vcs_reproj_objects_.Mutable(index);
}
inline ::ndm_proto::ReprojObject* Debug::add_vcs_reproj_objects() {
  // @@protoc_insertion_point(field_add:ndm_proto.Debug.vcs_reproj_objects)
  return vcs_reproj_objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::ReprojObject >*
Debug::mutable_vcs_reproj_objects() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Debug.vcs_reproj_objects)
  return &vcs_reproj_objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::ReprojObject >&
Debug::vcs_reproj_objects() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Debug.vcs_reproj_objects)
  return vcs_reproj_objects_;
}

// optional .ndm_proto.Image original_image = 5;
inline bool Debug::has_original_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Debug::set_has_original_image() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Debug::clear_has_original_image() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Debug::clear_original_image() {
  if (original_image_ != NULL) original_image_->Clear();
  clear_has_original_image();
}
inline const ::ndm_proto::Image& Debug::original_image() const {
  const ::ndm_proto::Image* p = original_image_;
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.original_image)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Image*>(
      &::ndm_proto::_Image_default_instance_);
}
inline ::ndm_proto::Image* Debug::release_original_image() {
  // @@protoc_insertion_point(field_release:ndm_proto.Debug.original_image)
  clear_has_original_image();
  ::ndm_proto::Image* temp = original_image_;
  original_image_ = NULL;
  return temp;
}
inline ::ndm_proto::Image* Debug::mutable_original_image() {
  set_has_original_image();
  if (original_image_ == NULL) {
    original_image_ = new ::ndm_proto::Image;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.original_image)
  return original_image_;
}
inline void Debug::set_allocated_original_image(::ndm_proto::Image* original_image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete original_image_;
  }
  if (original_image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      original_image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, original_image, submessage_arena);
    }
    set_has_original_image();
  } else {
    clear_has_original_image();
  }
  original_image_ = original_image;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Debug.original_image)
}

// optional .ndm_proto.Image parsing = 6;
inline bool Debug::has_parsing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Debug::set_has_parsing() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Debug::clear_has_parsing() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Debug::clear_parsing() {
  if (parsing_ != NULL) parsing_->Clear();
  clear_has_parsing();
}
inline const ::ndm_proto::Image& Debug::parsing() const {
  const ::ndm_proto::Image* p = parsing_;
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.parsing)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Image*>(
      &::ndm_proto::_Image_default_instance_);
}
inline ::ndm_proto::Image* Debug::release_parsing() {
  // @@protoc_insertion_point(field_release:ndm_proto.Debug.parsing)
  clear_has_parsing();
  ::ndm_proto::Image* temp = parsing_;
  parsing_ = NULL;
  return temp;
}
inline ::ndm_proto::Image* Debug::mutable_parsing() {
  set_has_parsing();
  if (parsing_ == NULL) {
    parsing_ = new ::ndm_proto::Image;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.parsing)
  return parsing_;
}
inline void Debug::set_allocated_parsing(::ndm_proto::Image* parsing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parsing_;
  }
  if (parsing) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parsing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parsing, submessage_arena);
    }
    set_has_parsing();
  } else {
    clear_has_parsing();
  }
  parsing_ = parsing;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Debug.parsing)
}

// optional .ndm_proto.Image lane_parsing = 7;
inline bool Debug::has_lane_parsing() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Debug::set_has_lane_parsing() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Debug::clear_has_lane_parsing() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Debug::clear_lane_parsing() {
  if (lane_parsing_ != NULL) lane_parsing_->Clear();
  clear_has_lane_parsing();
}
inline const ::ndm_proto::Image& Debug::lane_parsing() const {
  const ::ndm_proto::Image* p = lane_parsing_;
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.lane_parsing)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Image*>(
      &::ndm_proto::_Image_default_instance_);
}
inline ::ndm_proto::Image* Debug::release_lane_parsing() {
  // @@protoc_insertion_point(field_release:ndm_proto.Debug.lane_parsing)
  clear_has_lane_parsing();
  ::ndm_proto::Image* temp = lane_parsing_;
  lane_parsing_ = NULL;
  return temp;
}
inline ::ndm_proto::Image* Debug::mutable_lane_parsing() {
  set_has_lane_parsing();
  if (lane_parsing_ == NULL) {
    lane_parsing_ = new ::ndm_proto::Image;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.lane_parsing)
  return lane_parsing_;
}
inline void Debug::set_allocated_lane_parsing(::ndm_proto::Image* lane_parsing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lane_parsing_;
  }
  if (lane_parsing) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lane_parsing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lane_parsing, submessage_arena);
    }
    set_has_lane_parsing();
  } else {
    clear_has_lane_parsing();
  }
  lane_parsing_ = lane_parsing;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Debug.lane_parsing)
}

// optional .ndm_proto.Odometry chassis_odom = 8;
inline bool Debug::has_chassis_odom() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Debug::set_has_chassis_odom() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Debug::clear_has_chassis_odom() {
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::ndm_proto::Odometry& Debug::chassis_odom() const {
  const ::ndm_proto::Odometry* p = chassis_odom_;
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.chassis_odom)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Odometry*>(
      &::ndm_proto::_Odometry_default_instance_);
}
inline ::ndm_proto::Odometry* Debug::release_chassis_odom() {
  // @@protoc_insertion_point(field_release:ndm_proto.Debug.chassis_odom)
  clear_has_chassis_odom();
  ::ndm_proto::Odometry* temp = chassis_odom_;
  chassis_odom_ = NULL;
  return temp;
}
inline ::ndm_proto::Odometry* Debug::mutable_chassis_odom() {
  set_has_chassis_odom();
  if (chassis_odom_ == NULL) {
    chassis_odom_ = new ::ndm_proto::Odometry;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.chassis_odom)
  return chassis_odom_;
}
inline void Debug::set_allocated_chassis_odom(::ndm_proto::Odometry* chassis_odom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(chassis_odom_);
  }
  if (chassis_odom) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chassis_odom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chassis_odom, submessage_arena);
    }
    set_has_chassis_odom();
  } else {
    clear_has_chassis_odom();
  }
  chassis_odom_ = chassis_odom;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Debug.chassis_odom)
}

// optional .ndm_proto.Odometry gnss_odom = 9;
inline bool Debug::has_gnss_odom() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Debug::set_has_gnss_odom() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Debug::clear_has_gnss_odom() {
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::ndm_proto::Odometry& Debug::gnss_odom() const {
  const ::ndm_proto::Odometry* p = gnss_odom_;
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.gnss_odom)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Odometry*>(
      &::ndm_proto::_Odometry_default_instance_);
}
inline ::ndm_proto::Odometry* Debug::release_gnss_odom() {
  // @@protoc_insertion_point(field_release:ndm_proto.Debug.gnss_odom)
  clear_has_gnss_odom();
  ::ndm_proto::Odometry* temp = gnss_odom_;
  gnss_odom_ = NULL;
  return temp;
}
inline ::ndm_proto::Odometry* Debug::mutable_gnss_odom() {
  set_has_gnss_odom();
  if (gnss_odom_ == NULL) {
    gnss_odom_ = new ::ndm_proto::Odometry;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.gnss_odom)
  return gnss_odom_;
}
inline void Debug::set_allocated_gnss_odom(::ndm_proto::Odometry* gnss_odom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gnss_odom_);
  }
  if (gnss_odom) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gnss_odom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gnss_odom, submessage_arena);
    }
    set_has_gnss_odom();
  } else {
    clear_has_gnss_odom();
  }
  gnss_odom_ = gnss_odom;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Debug.gnss_odom)
}

// optional .ndm_proto.Odometry gnss_scored_odom = 10;
inline bool Debug::has_gnss_scored_odom() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Debug::set_has_gnss_scored_odom() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Debug::clear_has_gnss_scored_odom() {
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::ndm_proto::Odometry& Debug::gnss_scored_odom() const {
  const ::ndm_proto::Odometry* p = gnss_scored_odom_;
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.gnss_scored_odom)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Odometry*>(
      &::ndm_proto::_Odometry_default_instance_);
}
inline ::ndm_proto::Odometry* Debug::release_gnss_scored_odom() {
  // @@protoc_insertion_point(field_release:ndm_proto.Debug.gnss_scored_odom)
  clear_has_gnss_scored_odom();
  ::ndm_proto::Odometry* temp = gnss_scored_odom_;
  gnss_scored_odom_ = NULL;
  return temp;
}
inline ::ndm_proto::Odometry* Debug::mutable_gnss_scored_odom() {
  set_has_gnss_scored_odom();
  if (gnss_scored_odom_ == NULL) {
    gnss_scored_odom_ = new ::ndm_proto::Odometry;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.gnss_scored_odom)
  return gnss_scored_odom_;
}
inline void Debug::set_allocated_gnss_scored_odom(::ndm_proto::Odometry* gnss_scored_odom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gnss_scored_odom_);
  }
  if (gnss_scored_odom) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gnss_scored_odom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gnss_scored_odom, submessage_arena);
    }
    set_has_gnss_scored_odom();
  } else {
    clear_has_gnss_scored_odom();
  }
  gnss_scored_odom_ = gnss_scored_odom;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Debug.gnss_scored_odom)
}

// optional .ndm_proto.Particles particles = 11;
inline bool Debug::has_particles() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Debug::set_has_particles() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Debug::clear_has_particles() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Debug::clear_particles() {
  if (particles_ != NULL) particles_->Clear();
  clear_has_particles();
}
inline const ::ndm_proto::Particles& Debug::particles() const {
  const ::ndm_proto::Particles* p = particles_;
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.particles)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Particles*>(
      &::ndm_proto::_Particles_default_instance_);
}
inline ::ndm_proto::Particles* Debug::release_particles() {
  // @@protoc_insertion_point(field_release:ndm_proto.Debug.particles)
  clear_has_particles();
  ::ndm_proto::Particles* temp = particles_;
  particles_ = NULL;
  return temp;
}
inline ::ndm_proto::Particles* Debug::mutable_particles() {
  set_has_particles();
  if (particles_ == NULL) {
    particles_ = new ::ndm_proto::Particles;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.particles)
  return particles_;
}
inline void Debug::set_allocated_particles(::ndm_proto::Particles* particles) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete particles_;
  }
  if (particles) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      particles = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, particles, submessage_arena);
    }
    set_has_particles();
  } else {
    clear_has_particles();
  }
  particles_ = particles;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Debug.particles)
}

// optional string pack_name = 12;
inline bool Debug::has_pack_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Debug::set_has_pack_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Debug::clear_has_pack_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Debug::clear_pack_name() {
  pack_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pack_name();
}
inline const ::std::string& Debug::pack_name() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.pack_name)
  return pack_name_.GetNoArena();
}
inline void Debug::set_pack_name(const ::std::string& value) {
  set_has_pack_name();
  pack_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndm_proto.Debug.pack_name)
}
#if LANG_CXX11
inline void Debug::set_pack_name(::std::string&& value) {
  set_has_pack_name();
  pack_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ndm_proto.Debug.pack_name)
}
#endif
inline void Debug::set_pack_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pack_name();
  pack_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndm_proto.Debug.pack_name)
}
inline void Debug::set_pack_name(const char* value, size_t size) {
  set_has_pack_name();
  pack_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Debug.pack_name)
}
inline ::std::string* Debug::mutable_pack_name() {
  set_has_pack_name();
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.pack_name)
  return pack_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debug::release_pack_name() {
  // @@protoc_insertion_point(field_release:ndm_proto.Debug.pack_name)
  clear_has_pack_name();
  return pack_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Debug::set_allocated_pack_name(::std::string* pack_name) {
  if (pack_name != NULL) {
    set_has_pack_name();
  } else {
    clear_has_pack_name();
  }
  pack_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pack_name);
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Debug.pack_name)
}

// optional uint64 pack_frame_id = 13;
inline bool Debug::has_pack_frame_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Debug::set_has_pack_frame_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Debug::clear_has_pack_frame_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Debug::clear_pack_frame_id() {
  pack_frame_id_ = GOOGLE_ULONGLONG(0);
  clear_has_pack_frame_id();
}
inline ::google::protobuf::uint64 Debug::pack_frame_id() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.pack_frame_id)
  return pack_frame_id_;
}
inline void Debug::set_pack_frame_id(::google::protobuf::uint64 value) {
  set_has_pack_frame_id();
  pack_frame_id_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Debug.pack_frame_id)
}

// optional .ndm_proto.CanData can_data = 14;
inline bool Debug::has_can_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Debug::set_has_can_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Debug::clear_has_can_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Debug::clear_can_data() {
  if (can_data_ != NULL) can_data_->Clear();
  clear_has_can_data();
}
inline const ::ndm_proto::CanData& Debug::can_data() const {
  const ::ndm_proto::CanData* p = can_data_;
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.can_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::CanData*>(
      &::ndm_proto::_CanData_default_instance_);
}
inline ::ndm_proto::CanData* Debug::release_can_data() {
  // @@protoc_insertion_point(field_release:ndm_proto.Debug.can_data)
  clear_has_can_data();
  ::ndm_proto::CanData* temp = can_data_;
  can_data_ = NULL;
  return temp;
}
inline ::ndm_proto::CanData* Debug::mutable_can_data() {
  set_has_can_data();
  if (can_data_ == NULL) {
    can_data_ = new ::ndm_proto::CanData;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.can_data)
  return can_data_;
}
inline void Debug::set_allocated_can_data(::ndm_proto::CanData* can_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete can_data_;
  }
  if (can_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      can_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, can_data, submessage_arena);
    }
    set_has_can_data();
  } else {
    clear_has_can_data();
  }
  can_data_ = can_data;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Debug.can_data)
}

// optional double session_distance = 15;
inline bool Debug::has_session_distance() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Debug::set_has_session_distance() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Debug::clear_has_session_distance() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Debug::clear_session_distance() {
  session_distance_ = 0;
  clear_has_session_distance();
}
inline double Debug::session_distance() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.session_distance)
  return session_distance_;
}
inline void Debug::set_session_distance(double value) {
  set_has_session_distance();
  session_distance_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Debug.session_distance)
}

// repeated uint32 error_count = 16;
inline int Debug::error_count_size() const {
  return error_count_.size();
}
inline void Debug::clear_error_count() {
  error_count_.Clear();
}
inline ::google::protobuf::uint32 Debug::error_count(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.error_count)
  return error_count_.Get(index);
}
inline void Debug::set_error_count(int index, ::google::protobuf::uint32 value) {
  error_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:ndm_proto.Debug.error_count)
}
inline void Debug::add_error_count(::google::protobuf::uint32 value) {
  error_count_.Add(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Debug.error_count)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Debug::error_count() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Debug.error_count)
  return error_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Debug::mutable_error_count() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Debug.error_count)
  return &error_count_;
}

// optional float bias_lat = 17;
inline bool Debug::has_bias_lat() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Debug::set_has_bias_lat() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Debug::clear_has_bias_lat() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Debug::clear_bias_lat() {
  bias_lat_ = 0;
  clear_has_bias_lat();
}
inline float Debug::bias_lat() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.bias_lat)
  return bias_lat_;
}
inline void Debug::set_bias_lat(float value) {
  set_has_bias_lat();
  bias_lat_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Debug.bias_lat)
}

// optional .ndm_proto.LocError gt_diff = 18;
inline bool Debug::has_gt_diff() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Debug::set_has_gt_diff() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Debug::clear_has_gt_diff() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Debug::clear_gt_diff() {
  if (gt_diff_ != NULL) gt_diff_->Clear();
  clear_has_gt_diff();
}
inline const ::ndm_proto::LocError& Debug::gt_diff() const {
  const ::ndm_proto::LocError* p = gt_diff_;
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.gt_diff)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::LocError*>(
      &::ndm_proto::_LocError_default_instance_);
}
inline ::ndm_proto::LocError* Debug::release_gt_diff() {
  // @@protoc_insertion_point(field_release:ndm_proto.Debug.gt_diff)
  clear_has_gt_diff();
  ::ndm_proto::LocError* temp = gt_diff_;
  gt_diff_ = NULL;
  return temp;
}
inline ::ndm_proto::LocError* Debug::mutable_gt_diff() {
  set_has_gt_diff();
  if (gt_diff_ == NULL) {
    gt_diff_ = new ::ndm_proto::LocError;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.gt_diff)
  return gt_diff_;
}
inline void Debug::set_allocated_gt_diff(::ndm_proto::LocError* gt_diff) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gt_diff_;
  }
  if (gt_diff) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gt_diff = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gt_diff, submessage_arena);
    }
    set_has_gt_diff();
  } else {
    clear_has_gt_diff();
  }
  gt_diff_ = gt_diff;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Debug.gt_diff)
}

// optional .ndm_proto.LocError global_diff = 19;
inline bool Debug::has_global_diff() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Debug::set_has_global_diff() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Debug::clear_has_global_diff() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Debug::clear_global_diff() {
  if (global_diff_ != NULL) global_diff_->Clear();
  clear_has_global_diff();
}
inline const ::ndm_proto::LocError& Debug::global_diff() const {
  const ::ndm_proto::LocError* p = global_diff_;
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.global_diff)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::LocError*>(
      &::ndm_proto::_LocError_default_instance_);
}
inline ::ndm_proto::LocError* Debug::release_global_diff() {
  // @@protoc_insertion_point(field_release:ndm_proto.Debug.global_diff)
  clear_has_global_diff();
  ::ndm_proto::LocError* temp = global_diff_;
  global_diff_ = NULL;
  return temp;
}
inline ::ndm_proto::LocError* Debug::mutable_global_diff() {
  set_has_global_diff();
  if (global_diff_ == NULL) {
    global_diff_ = new ::ndm_proto::LocError;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.global_diff)
  return global_diff_;
}
inline void Debug::set_allocated_global_diff(::ndm_proto::LocError* global_diff) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete global_diff_;
  }
  if (global_diff) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      global_diff = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_diff, submessage_arena);
    }
    set_has_global_diff();
  } else {
    clear_has_global_diff();
  }
  global_diff_ = global_diff;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Debug.global_diff)
}

// optional uint32 pecp_num = 20;
inline bool Debug::has_pecp_num() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Debug::set_has_pecp_num() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Debug::clear_has_pecp_num() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Debug::clear_pecp_num() {
  pecp_num_ = 0u;
  clear_has_pecp_num();
}
inline ::google::protobuf::uint32 Debug::pecp_num() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.pecp_num)
  return pecp_num_;
}
inline void Debug::set_pecp_num(::google::protobuf::uint32 value) {
  set_has_pecp_num();
  pecp_num_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Debug.pecp_num)
}

// repeated .ndm_proto.PecpData pecp_obj = 21;
inline int Debug::pecp_obj_size() const {
  return pecp_obj_.size();
}
inline void Debug::clear_pecp_obj() {
  pecp_obj_.Clear();
}
inline const ::ndm_proto::PecpData& Debug::pecp_obj(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.pecp_obj)
  return pecp_obj_.Get(index);
}
inline ::ndm_proto::PecpData* Debug::mutable_pecp_obj(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.pecp_obj)
  return pecp_obj_.Mutable(index);
}
inline ::ndm_proto::PecpData* Debug::add_pecp_obj() {
  // @@protoc_insertion_point(field_add:ndm_proto.Debug.pecp_obj)
  return pecp_obj_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::PecpData >*
Debug::mutable_pecp_obj() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Debug.pecp_obj)
  return &pecp_obj_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::PecpData >&
Debug::pecp_obj() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Debug.pecp_obj)
  return pecp_obj_;
}

// repeated .ndm_proto.MatchPair vcs_match_pair = 22;
inline int Debug::vcs_match_pair_size() const {
  return vcs_match_pair_.size();
}
inline void Debug::clear_vcs_match_pair() {
  vcs_match_pair_.Clear();
}
inline const ::ndm_proto::MatchPair& Debug::vcs_match_pair(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.vcs_match_pair)
  return vcs_match_pair_.Get(index);
}
inline ::ndm_proto::MatchPair* Debug::mutable_vcs_match_pair(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.vcs_match_pair)
  return vcs_match_pair_.Mutable(index);
}
inline ::ndm_proto::MatchPair* Debug::add_vcs_match_pair() {
  // @@protoc_insertion_point(field_add:ndm_proto.Debug.vcs_match_pair)
  return vcs_match_pair_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::MatchPair >*
Debug::mutable_vcs_match_pair() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Debug.vcs_match_pair)
  return &vcs_match_pair_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::MatchPair >&
Debug::vcs_match_pair() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Debug.vcs_match_pair)
  return vcs_match_pair_;
}

// repeated .ndm_proto.PecpObject vcs_pecp_objects = 23;
inline int Debug::vcs_pecp_objects_size() const {
  return vcs_pecp_objects_.size();
}
inline void Debug::clear_vcs_pecp_objects() {
  vcs_pecp_objects_.Clear();
}
inline const ::ndm_proto::PecpObject& Debug::vcs_pecp_objects(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Debug.vcs_pecp_objects)
  return vcs_pecp_objects_.Get(index);
}
inline ::ndm_proto::PecpObject* Debug::mutable_vcs_pecp_objects(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Debug.vcs_pecp_objects)
  return vcs_pecp_objects_.Mutable(index);
}
inline ::ndm_proto::PecpObject* Debug::add_vcs_pecp_objects() {
  // @@protoc_insertion_point(field_add:ndm_proto.Debug.vcs_pecp_objects)
  return vcs_pecp_objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::PecpObject >*
Debug::mutable_vcs_pecp_objects() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Debug.vcs_pecp_objects)
  return &vcs_pecp_objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::PecpObject >&
Debug::vcs_pecp_objects() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Debug.vcs_pecp_objects)
  return vcs_pecp_objects_;
}

// -------------------------------------------------------------------

// Pose2d

// required double x = 1;
inline bool Pose2d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pose2d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pose2d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pose2d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Pose2d::x() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Pose2d.x)
  return x_;
}
inline void Pose2d::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Pose2d.x)
}

// required double y = 2;
inline bool Pose2d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pose2d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pose2d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pose2d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Pose2d::y() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Pose2d.y)
  return y_;
}
inline void Pose2d::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Pose2d.y)
}

// required double yaw = 3;
inline bool Pose2d::has_yaw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pose2d::set_has_yaw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pose2d::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pose2d::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline double Pose2d::yaw() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Pose2d.yaw)
  return yaw_;
}
inline void Pose2d::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Pose2d.yaw)
}

// -------------------------------------------------------------------

// Point2d

// required double x = 1;
inline bool Point2d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point2d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point2d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point2d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point2d::x() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Point2d.x)
  return x_;
}
inline void Point2d::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Point2d.x)
}

// required double y = 2;
inline bool Point2d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point2d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point2d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point2d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point2d::y() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Point2d.y)
  return y_;
}
inline void Point2d::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Point2d.y)
}

// -------------------------------------------------------------------

// Point2f

// required float x = 1;
inline bool Point2f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point2f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point2f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point2f::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point2f::x() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Point2f.x)
  return x_;
}
inline void Point2f::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Point2f.x)
}

// required float y = 2;
inline bool Point2f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point2f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point2f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point2f::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point2f::y() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Point2f.y)
  return y_;
}
inline void Point2f::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Point2f.y)
}

// -------------------------------------------------------------------

// Polyline

// repeated .ndm_proto.Point2d points = 1;
inline int Polyline::points_size() const {
  return points_.size();
}
inline void Polyline::clear_points() {
  points_.Clear();
}
inline const ::ndm_proto::Point2d& Polyline::points(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Polyline.points)
  return points_.Get(index);
}
inline ::ndm_proto::Point2d* Polyline::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Polyline.points)
  return points_.Mutable(index);
}
inline ::ndm_proto::Point2d* Polyline::add_points() {
  // @@protoc_insertion_point(field_add:ndm_proto.Polyline.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2d >*
Polyline::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Polyline.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2d >&
Polyline::points() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Polyline.points)
  return points_;
}

// optional .ndm_proto.ObjectType type = 2;
inline bool Polyline::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Polyline::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Polyline::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Polyline::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ndm_proto::ObjectType Polyline::type() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Polyline.type)
  return static_cast< ::ndm_proto::ObjectType >(type_);
}
inline void Polyline::set_type(::ndm_proto::ObjectType value) {
  assert(::ndm_proto::ObjectType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Polyline.type)
}

// -------------------------------------------------------------------

// PrintString

// required string str = 1;
inline bool PrintString::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintString::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrintString::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrintString::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str();
}
inline const ::std::string& PrintString::str() const {
  // @@protoc_insertion_point(field_get:ndm_proto.PrintString.str)
  return str_.GetNoArena();
}
inline void PrintString::set_str(const ::std::string& value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndm_proto.PrintString.str)
}
#if LANG_CXX11
inline void PrintString::set_str(::std::string&& value) {
  set_has_str();
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ndm_proto.PrintString.str)
}
#endif
inline void PrintString::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndm_proto.PrintString.str)
}
inline void PrintString::set_str(const char* value, size_t size) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.PrintString.str)
}
inline ::std::string* PrintString::mutable_str() {
  set_has_str();
  // @@protoc_insertion_point(field_mutable:ndm_proto.PrintString.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrintString::release_str() {
  // @@protoc_insertion_point(field_release:ndm_proto.PrintString.str)
  clear_has_str();
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrintString::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    set_has_str();
  } else {
    clear_has_str();
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.PrintString.str)
}

// required .ndm_proto.Point2d pos = 2;
inline bool PrintString::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintString::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrintString::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrintString::clear_pos() {
  if (pos_ != NULL) pos_->Clear();
  clear_has_pos();
}
inline const ::ndm_proto::Point2d& PrintString::pos() const {
  const ::ndm_proto::Point2d* p = pos_;
  // @@protoc_insertion_point(field_get:ndm_proto.PrintString.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Point2d*>(
      &::ndm_proto::_Point2d_default_instance_);
}
inline ::ndm_proto::Point2d* PrintString::release_pos() {
  // @@protoc_insertion_point(field_release:ndm_proto.PrintString.pos)
  clear_has_pos();
  ::ndm_proto::Point2d* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::ndm_proto::Point2d* PrintString::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::ndm_proto::Point2d;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.PrintString.pos)
  return pos_;
}
inline void PrintString::set_allocated_pos(::ndm_proto::Point2d* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.PrintString.pos)
}

// -------------------------------------------------------------------

// ReprojObject

// repeated .ndm_proto.Polyline polylines = 1;
inline int ReprojObject::polylines_size() const {
  return polylines_.size();
}
inline void ReprojObject::clear_polylines() {
  polylines_.Clear();
}
inline const ::ndm_proto::Polyline& ReprojObject::polylines(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.ReprojObject.polylines)
  return polylines_.Get(index);
}
inline ::ndm_proto::Polyline* ReprojObject::mutable_polylines(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.ReprojObject.polylines)
  return polylines_.Mutable(index);
}
inline ::ndm_proto::Polyline* ReprojObject::add_polylines() {
  // @@protoc_insertion_point(field_add:ndm_proto.ReprojObject.polylines)
  return polylines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::Polyline >*
ReprojObject::mutable_polylines() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.ReprojObject.polylines)
  return &polylines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Polyline >&
ReprojObject::polylines() const {
  // @@protoc_insertion_point(field_list:ndm_proto.ReprojObject.polylines)
  return polylines_;
}

// repeated .ndm_proto.PrintString printstrings = 2;
inline int ReprojObject::printstrings_size() const {
  return printstrings_.size();
}
inline void ReprojObject::clear_printstrings() {
  printstrings_.Clear();
}
inline const ::ndm_proto::PrintString& ReprojObject::printstrings(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.ReprojObject.printstrings)
  return printstrings_.Get(index);
}
inline ::ndm_proto::PrintString* ReprojObject::mutable_printstrings(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.ReprojObject.printstrings)
  return printstrings_.Mutable(index);
}
inline ::ndm_proto::PrintString* ReprojObject::add_printstrings() {
  // @@protoc_insertion_point(field_add:ndm_proto.ReprojObject.printstrings)
  return printstrings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::PrintString >*
ReprojObject::mutable_printstrings() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.ReprojObject.printstrings)
  return &printstrings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::PrintString >&
ReprojObject::printstrings() const {
  // @@protoc_insertion_point(field_list:ndm_proto.ReprojObject.printstrings)
  return printstrings_;
}

// -------------------------------------------------------------------

// PecpObject

// repeated .ndm_proto.Point2f meas_points = 1;
inline int PecpObject::meas_points_size() const {
  return meas_points_.size();
}
inline void PecpObject::clear_meas_points() {
  meas_points_.Clear();
}
inline const ::ndm_proto::Point2f& PecpObject::meas_points(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.PecpObject.meas_points)
  return meas_points_.Get(index);
}
inline ::ndm_proto::Point2f* PecpObject::mutable_meas_points(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.PecpObject.meas_points)
  return meas_points_.Mutable(index);
}
inline ::ndm_proto::Point2f* PecpObject::add_meas_points() {
  // @@protoc_insertion_point(field_add:ndm_proto.PecpObject.meas_points)
  return meas_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2f >*
PecpObject::mutable_meas_points() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.PecpObject.meas_points)
  return &meas_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2f >&
PecpObject::meas_points() const {
  // @@protoc_insertion_point(field_list:ndm_proto.PecpObject.meas_points)
  return meas_points_;
}

// optional .ndm_proto.RectEndpoint rect_point = 2;
inline bool PecpObject::has_rect_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PecpObject::set_has_rect_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PecpObject::clear_has_rect_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PecpObject::clear_rect_point() {
  if (rect_point_ != NULL) rect_point_->Clear();
  clear_has_rect_point();
}
inline const ::ndm_proto::RectEndpoint& PecpObject::rect_point() const {
  const ::ndm_proto::RectEndpoint* p = rect_point_;
  // @@protoc_insertion_point(field_get:ndm_proto.PecpObject.rect_point)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::RectEndpoint*>(
      &::ndm_proto::_RectEndpoint_default_instance_);
}
inline ::ndm_proto::RectEndpoint* PecpObject::release_rect_point() {
  // @@protoc_insertion_point(field_release:ndm_proto.PecpObject.rect_point)
  clear_has_rect_point();
  ::ndm_proto::RectEndpoint* temp = rect_point_;
  rect_point_ = NULL;
  return temp;
}
inline ::ndm_proto::RectEndpoint* PecpObject::mutable_rect_point() {
  set_has_rect_point();
  if (rect_point_ == NULL) {
    rect_point_ = new ::ndm_proto::RectEndpoint;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.PecpObject.rect_point)
  return rect_point_;
}
inline void PecpObject::set_allocated_rect_point(::ndm_proto::RectEndpoint* rect_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rect_point_;
  }
  if (rect_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rect_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rect_point, submessage_arena);
    }
    set_has_rect_point();
  } else {
    clear_has_rect_point();
  }
  rect_point_ = rect_point;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.PecpObject.rect_point)
}

// optional .ndm_proto.ObjectType meas_type = 3;
inline bool PecpObject::has_meas_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PecpObject::set_has_meas_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PecpObject::clear_has_meas_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PecpObject::clear_meas_type() {
  meas_type_ = 0;
  clear_has_meas_type();
}
inline ::ndm_proto::ObjectType PecpObject::meas_type() const {
  // @@protoc_insertion_point(field_get:ndm_proto.PecpObject.meas_type)
  return static_cast< ::ndm_proto::ObjectType >(meas_type_);
}
inline void PecpObject::set_meas_type(::ndm_proto::ObjectType value) {
  assert(::ndm_proto::ObjectType_IsValid(value));
  set_has_meas_type();
  meas_type_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.PecpObject.meas_type)
}

// -------------------------------------------------------------------

// RectEndpoint

// required .ndm_proto.Point2f up_point = 1;
inline bool RectEndpoint::has_up_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RectEndpoint::set_has_up_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RectEndpoint::clear_has_up_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RectEndpoint::clear_up_point() {
  if (up_point_ != NULL) up_point_->Clear();
  clear_has_up_point();
}
inline const ::ndm_proto::Point2f& RectEndpoint::up_point() const {
  const ::ndm_proto::Point2f* p = up_point_;
  // @@protoc_insertion_point(field_get:ndm_proto.RectEndpoint.up_point)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Point2f*>(
      &::ndm_proto::_Point2f_default_instance_);
}
inline ::ndm_proto::Point2f* RectEndpoint::release_up_point() {
  // @@protoc_insertion_point(field_release:ndm_proto.RectEndpoint.up_point)
  clear_has_up_point();
  ::ndm_proto::Point2f* temp = up_point_;
  up_point_ = NULL;
  return temp;
}
inline ::ndm_proto::Point2f* RectEndpoint::mutable_up_point() {
  set_has_up_point();
  if (up_point_ == NULL) {
    up_point_ = new ::ndm_proto::Point2f;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.RectEndpoint.up_point)
  return up_point_;
}
inline void RectEndpoint::set_allocated_up_point(::ndm_proto::Point2f* up_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete up_point_;
  }
  if (up_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      up_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, up_point, submessage_arena);
    }
    set_has_up_point();
  } else {
    clear_has_up_point();
  }
  up_point_ = up_point;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.RectEndpoint.up_point)
}

// required .ndm_proto.Point2f down_point = 2;
inline bool RectEndpoint::has_down_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RectEndpoint::set_has_down_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RectEndpoint::clear_has_down_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RectEndpoint::clear_down_point() {
  if (down_point_ != NULL) down_point_->Clear();
  clear_has_down_point();
}
inline const ::ndm_proto::Point2f& RectEndpoint::down_point() const {
  const ::ndm_proto::Point2f* p = down_point_;
  // @@protoc_insertion_point(field_get:ndm_proto.RectEndpoint.down_point)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Point2f*>(
      &::ndm_proto::_Point2f_default_instance_);
}
inline ::ndm_proto::Point2f* RectEndpoint::release_down_point() {
  // @@protoc_insertion_point(field_release:ndm_proto.RectEndpoint.down_point)
  clear_has_down_point();
  ::ndm_proto::Point2f* temp = down_point_;
  down_point_ = NULL;
  return temp;
}
inline ::ndm_proto::Point2f* RectEndpoint::mutable_down_point() {
  set_has_down_point();
  if (down_point_ == NULL) {
    down_point_ = new ::ndm_proto::Point2f;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.RectEndpoint.down_point)
  return down_point_;
}
inline void RectEndpoint::set_allocated_down_point(::ndm_proto::Point2f* down_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete down_point_;
  }
  if (down_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      down_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, down_point, submessage_arena);
    }
    set_has_down_point();
  } else {
    clear_has_down_point();
  }
  down_point_ = down_point;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.RectEndpoint.down_point)
}

// required bool up_valid = 3;
inline bool RectEndpoint::has_up_valid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RectEndpoint::set_has_up_valid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RectEndpoint::clear_has_up_valid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RectEndpoint::clear_up_valid() {
  up_valid_ = false;
  clear_has_up_valid();
}
inline bool RectEndpoint::up_valid() const {
  // @@protoc_insertion_point(field_get:ndm_proto.RectEndpoint.up_valid)
  return up_valid_;
}
inline void RectEndpoint::set_up_valid(bool value) {
  set_has_up_valid();
  up_valid_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.RectEndpoint.up_valid)
}

// required bool down_valid = 4;
inline bool RectEndpoint::has_down_valid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RectEndpoint::set_has_down_valid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RectEndpoint::clear_has_down_valid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RectEndpoint::clear_down_valid() {
  down_valid_ = false;
  clear_has_down_valid();
}
inline bool RectEndpoint::down_valid() const {
  // @@protoc_insertion_point(field_get:ndm_proto.RectEndpoint.down_valid)
  return down_valid_;
}
inline void RectEndpoint::set_down_valid(bool value) {
  set_has_down_valid();
  down_valid_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.RectEndpoint.down_valid)
}

// -------------------------------------------------------------------

// Image

// optional bytes data = 1;
inline bool Image::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Image.data)
  return data_.GetNoArena();
}
inline void Image::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndm_proto.Image.data)
}
#if LANG_CXX11
inline void Image::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ndm_proto.Image.data)
}
#endif
inline void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndm_proto.Image.data)
}
inline void Image::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Image.data)
}
inline ::std::string* Image::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:ndm_proto.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:ndm_proto.Image.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Image.data)
}

// required uint32 rows = 2;
inline bool Image::has_rows() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::set_has_rows() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image::clear_has_rows() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image::clear_rows() {
  rows_ = 0u;
  clear_has_rows();
}
inline ::google::protobuf::uint32 Image::rows() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Image.rows)
  return rows_;
}
inline void Image::set_rows(::google::protobuf::uint32 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Image.rows)
}

// required uint32 cols = 3;
inline bool Image::has_cols() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::set_has_cols() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Image::clear_has_cols() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Image::clear_cols() {
  cols_ = 0u;
  clear_has_cols();
}
inline ::google::protobuf::uint32 Image::cols() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Image.cols)
  return cols_;
}
inline void Image::set_cols(::google::protobuf::uint32 value) {
  set_has_cols();
  cols_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Image.cols)
}

// required uint32 channel = 4;
inline bool Image::has_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Image::set_has_channel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Image::clear_has_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Image::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 Image::channel() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Image.channel)
  return channel_;
}
inline void Image::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Image.channel)
}

// required uint32 depth = 5;
inline bool Image::has_depth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Image::set_has_depth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Image::clear_has_depth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Image::clear_depth() {
  depth_ = 0u;
  clear_has_depth();
}
inline ::google::protobuf::uint32 Image::depth() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Image.depth)
  return depth_;
}
inline void Image::set_depth(::google::protobuf::uint32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Image.depth)
}

// optional uint32 data_size = 6;
inline bool Image::has_data_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Image::set_has_data_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Image::clear_has_data_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Image::clear_data_size() {
  data_size_ = 0u;
  clear_has_data_size();
}
inline ::google::protobuf::uint32 Image::data_size() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Image.data_size)
  return data_size_;
}
inline void Image::set_data_size(::google::protobuf::uint32 value) {
  set_has_data_size();
  data_size_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Image.data_size)
}

// optional uint32 type = 7;
inline bool Image::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Image::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Image::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Image::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Image::type() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Image.type)
  return type_;
}
inline void Image::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Image.type)
}

// optional string name = 8;
inline bool Image::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Image::name() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Image.name)
  return name_.GetNoArena();
}
inline void Image::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndm_proto.Image.name)
}
#if LANG_CXX11
inline void Image::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ndm_proto.Image.name)
}
#endif
inline void Image::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndm_proto.Image.name)
}
inline void Image::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Image.name)
}
inline ::std::string* Image::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ndm_proto.Image.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_name() {
  // @@protoc_insertion_point(field_release:ndm_proto.Image.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Image.name)
}

// -------------------------------------------------------------------

// Particles

// repeated .ndm_proto.Pose2d sample = 1;
inline int Particles::sample_size() const {
  return sample_.size();
}
inline void Particles::clear_sample() {
  sample_.Clear();
}
inline const ::ndm_proto::Pose2d& Particles::sample(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Particles.sample)
  return sample_.Get(index);
}
inline ::ndm_proto::Pose2d* Particles::mutable_sample(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Particles.sample)
  return sample_.Mutable(index);
}
inline ::ndm_proto::Pose2d* Particles::add_sample() {
  // @@protoc_insertion_point(field_add:ndm_proto.Particles.sample)
  return sample_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::Pose2d >*
Particles::mutable_sample() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Particles.sample)
  return &sample_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Pose2d >&
Particles::sample() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Particles.sample)
  return sample_;
}

// required double height = 2;
inline bool Particles::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Particles::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Particles::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Particles::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double Particles::height() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Particles.height)
  return height_;
}
inline void Particles::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Particles.height)
}

// required double pitch = 3;
inline bool Particles::has_pitch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Particles::set_has_pitch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Particles::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Particles::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline double Particles::pitch() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Particles.pitch)
  return pitch_;
}
inline void Particles::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Particles.pitch)
}

// required double roll = 4;
inline bool Particles::has_roll() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Particles::set_has_roll() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Particles::clear_has_roll() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Particles::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline double Particles::roll() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Particles.roll)
  return roll_;
}
inline void Particles::set_roll(double value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Particles.roll)
}

// -------------------------------------------------------------------

// CanData

// required double speed = 1;
inline bool CanData::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CanData::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CanData::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CanData::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double CanData::speed() const {
  // @@protoc_insertion_point(field_get:ndm_proto.CanData.speed)
  return speed_;
}
inline void CanData::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.CanData.speed)
}

// required double yawrate = 2;
inline bool CanData::has_yawrate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CanData::set_has_yawrate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CanData::clear_has_yawrate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CanData::clear_yawrate() {
  yawrate_ = 0;
  clear_has_yawrate();
}
inline double CanData::yawrate() const {
  // @@protoc_insertion_point(field_get:ndm_proto.CanData.yawrate)
  return yawrate_;
}
inline void CanData::set_yawrate(double value) {
  set_has_yawrate();
  yawrate_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.CanData.yawrate)
}

// -------------------------------------------------------------------

// PecpData

// repeated .ndm_proto.Point2f pecp_points = 1;
inline int PecpData::pecp_points_size() const {
  return pecp_points_.size();
}
inline void PecpData::clear_pecp_points() {
  pecp_points_.Clear();
}
inline const ::ndm_proto::Point2f& PecpData::pecp_points(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.PecpData.pecp_points)
  return pecp_points_.Get(index);
}
inline ::ndm_proto::Point2f* PecpData::mutable_pecp_points(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.PecpData.pecp_points)
  return pecp_points_.Mutable(index);
}
inline ::ndm_proto::Point2f* PecpData::add_pecp_points() {
  // @@protoc_insertion_point(field_add:ndm_proto.PecpData.pecp_points)
  return pecp_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2f >*
PecpData::mutable_pecp_points() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.PecpData.pecp_points)
  return &pecp_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Point2f >&
PecpData::pecp_points() const {
  // @@protoc_insertion_point(field_list:ndm_proto.PecpData.pecp_points)
  return pecp_points_;
}

// optional uint32 lane_type = 2;
inline bool PecpData::has_lane_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PecpData::set_has_lane_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PecpData::clear_has_lane_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PecpData::clear_lane_type() {
  lane_type_ = 0u;
  clear_has_lane_type();
}
inline ::google::protobuf::uint32 PecpData::lane_type() const {
  // @@protoc_insertion_point(field_get:ndm_proto.PecpData.lane_type)
  return lane_type_;
}
inline void PecpData::set_lane_type(::google::protobuf::uint32 value) {
  set_has_lane_type();
  lane_type_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.PecpData.lane_type)
}

// -------------------------------------------------------------------

// LocError

// required bool valid = 1;
inline bool LocError::has_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocError::set_has_valid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocError::clear_has_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LocError::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool LocError::valid() const {
  // @@protoc_insertion_point(field_get:ndm_proto.LocError.valid)
  return valid_;
}
inline void LocError::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.LocError.valid)
}

// required .ndm_proto.Pose2d value = 2;
inline bool LocError::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocError::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocError::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocError::clear_value() {
  if (value_ != NULL) value_->Clear();
  clear_has_value();
}
inline const ::ndm_proto::Pose2d& LocError::value() const {
  const ::ndm_proto::Pose2d* p = value_;
  // @@protoc_insertion_point(field_get:ndm_proto.LocError.value)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Pose2d*>(
      &::ndm_proto::_Pose2d_default_instance_);
}
inline ::ndm_proto::Pose2d* LocError::release_value() {
  // @@protoc_insertion_point(field_release:ndm_proto.LocError.value)
  clear_has_value();
  ::ndm_proto::Pose2d* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::ndm_proto::Pose2d* LocError::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::ndm_proto::Pose2d;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.LocError.value)
  return value_;
}
inline void LocError::set_allocated_value(::ndm_proto::Pose2d* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
  } else {
    clear_has_value();
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.LocError.value)
}

// -------------------------------------------------------------------

// MatchPair

// required .ndm_proto.Point2f meas = 1;
inline bool MatchPair::has_meas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchPair::set_has_meas() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchPair::clear_has_meas() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchPair::clear_meas() {
  if (meas_ != NULL) meas_->Clear();
  clear_has_meas();
}
inline const ::ndm_proto::Point2f& MatchPair::meas() const {
  const ::ndm_proto::Point2f* p = meas_;
  // @@protoc_insertion_point(field_get:ndm_proto.MatchPair.meas)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Point2f*>(
      &::ndm_proto::_Point2f_default_instance_);
}
inline ::ndm_proto::Point2f* MatchPair::release_meas() {
  // @@protoc_insertion_point(field_release:ndm_proto.MatchPair.meas)
  clear_has_meas();
  ::ndm_proto::Point2f* temp = meas_;
  meas_ = NULL;
  return temp;
}
inline ::ndm_proto::Point2f* MatchPair::mutable_meas() {
  set_has_meas();
  if (meas_ == NULL) {
    meas_ = new ::ndm_proto::Point2f;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.MatchPair.meas)
  return meas_;
}
inline void MatchPair::set_allocated_meas(::ndm_proto::Point2f* meas) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete meas_;
  }
  if (meas) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meas = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meas, submessage_arena);
    }
    set_has_meas();
  } else {
    clear_has_meas();
  }
  meas_ = meas;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.MatchPair.meas)
}

// required .ndm_proto.Point2f map = 2;
inline bool MatchPair::has_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchPair::set_has_map() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchPair::clear_has_map() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchPair::clear_map() {
  if (map_ != NULL) map_->Clear();
  clear_has_map();
}
inline const ::ndm_proto::Point2f& MatchPair::map() const {
  const ::ndm_proto::Point2f* p = map_;
  // @@protoc_insertion_point(field_get:ndm_proto.MatchPair.map)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Point2f*>(
      &::ndm_proto::_Point2f_default_instance_);
}
inline ::ndm_proto::Point2f* MatchPair::release_map() {
  // @@protoc_insertion_point(field_release:ndm_proto.MatchPair.map)
  clear_has_map();
  ::ndm_proto::Point2f* temp = map_;
  map_ = NULL;
  return temp;
}
inline ::ndm_proto::Point2f* MatchPair::mutable_map() {
  set_has_map();
  if (map_ == NULL) {
    map_ = new ::ndm_proto::Point2f;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.MatchPair.map)
  return map_;
}
inline void MatchPair::set_allocated_map(::ndm_proto::Point2f* map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete map_;
  }
  if (map) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
  } else {
    clear_has_map();
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.MatchPair.map)
}

// optional .ndm_proto.ObjectType asso_type = 3;
inline bool MatchPair::has_asso_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchPair::set_has_asso_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchPair::clear_has_asso_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchPair::clear_asso_type() {
  asso_type_ = 0;
  clear_has_asso_type();
}
inline ::ndm_proto::ObjectType MatchPair::asso_type() const {
  // @@protoc_insertion_point(field_get:ndm_proto.MatchPair.asso_type)
  return static_cast< ::ndm_proto::ObjectType >(asso_type_);
}
inline void MatchPair::set_asso_type(::ndm_proto::ObjectType value) {
  assert(::ndm_proto::ObjectType_IsValid(value));
  set_has_asso_type();
  asso_type_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.MatchPair.asso_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ndm_proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ndm_proto::ObjectType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ndm_proto::ObjectType>() {
  return ::ndm_proto::ObjectType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_debug_2eproto__INCLUDED
