// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata/metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metadata_2fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metadata_2fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metadata_2fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metadata_2fmetadata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metadata_2fmetadata_2eproto;
namespace RoadPB {
class FeatureID;
struct FeatureIDDefaultTypeInternal;
extern FeatureIDDefaultTypeInternal _FeatureID_default_instance_;
}  // namespace RoadPB
PROTOBUF_NAMESPACE_OPEN
template<> ::RoadPB::FeatureID* Arena::CreateMaybeMessage<::RoadPB::FeatureID>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RoadPB {

enum FeatureID_FeatType : int {
  FeatureID_FeatType_UNKNOWN = 0,
  FeatureID_FeatType_LINK = 1,
  FeatureID_FeatType_NODE = 2,
  FeatureID_FeatType_LANE = 3,
  FeatureID_FeatType_LANE_BOUNDARY = 4,
  FeatureID_FeatType_LANE_GROUP = 5,
  FeatureID_FeatType_JUNCTION = 6,
  FeatureID_FeatType_TRAFFIC_INFO = 7,
  FeatureID_FeatType_POSITION_OBJ = 8,
  FeatureID_FeatType_ROAD_BOUNDARY = 9,
  FeatureID_FeatType_CONFIDENCE = 10,
  FeatureID_FeatType_ODD = 11
};
bool FeatureID_FeatType_IsValid(int value);
constexpr FeatureID_FeatType FeatureID_FeatType_FeatType_MIN = FeatureID_FeatType_UNKNOWN;
constexpr FeatureID_FeatType FeatureID_FeatType_FeatType_MAX = FeatureID_FeatType_ODD;
constexpr int FeatureID_FeatType_FeatType_ARRAYSIZE = FeatureID_FeatType_FeatType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FeatureID_FeatType_descriptor();
template<typename T>
inline const std::string& FeatureID_FeatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FeatureID_FeatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FeatureID_FeatType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FeatureID_FeatType_descriptor(), enum_t_value);
}
inline bool FeatureID_FeatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FeatureID_FeatType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FeatureID_FeatType>(
    FeatureID_FeatType_descriptor(), name, value);
}
// ===================================================================

class FeatureID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.FeatureID) */ {
 public:
  inline FeatureID() : FeatureID(nullptr) {}
  ~FeatureID() override;
  explicit constexpr FeatureID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeatureID(const FeatureID& from);
  FeatureID(FeatureID&& from) noexcept
    : FeatureID() {
    *this = ::std::move(from);
  }

  inline FeatureID& operator=(const FeatureID& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureID& operator=(FeatureID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeatureID& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeatureID* internal_default_instance() {
    return reinterpret_cast<const FeatureID*>(
               &_FeatureID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FeatureID& a, FeatureID& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureID* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeatureID* New() const final {
    return new FeatureID();
  }

  FeatureID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeatureID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeatureID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FeatureID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.FeatureID";
  }
  protected:
  explicit FeatureID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FeatureID_FeatType FeatType;
  static constexpr FeatType UNKNOWN =
    FeatureID_FeatType_UNKNOWN;
  static constexpr FeatType LINK =
    FeatureID_FeatType_LINK;
  static constexpr FeatType NODE =
    FeatureID_FeatType_NODE;
  static constexpr FeatType LANE =
    FeatureID_FeatType_LANE;
  static constexpr FeatType LANE_BOUNDARY =
    FeatureID_FeatType_LANE_BOUNDARY;
  static constexpr FeatType LANE_GROUP =
    FeatureID_FeatType_LANE_GROUP;
  static constexpr FeatType JUNCTION =
    FeatureID_FeatType_JUNCTION;
  static constexpr FeatType TRAFFIC_INFO =
    FeatureID_FeatType_TRAFFIC_INFO;
  static constexpr FeatType POSITION_OBJ =
    FeatureID_FeatType_POSITION_OBJ;
  static constexpr FeatType ROAD_BOUNDARY =
    FeatureID_FeatType_ROAD_BOUNDARY;
  static constexpr FeatType CONFIDENCE =
    FeatureID_FeatType_CONFIDENCE;
  static constexpr FeatType ODD =
    FeatureID_FeatType_ODD;
  static inline bool FeatType_IsValid(int value) {
    return FeatureID_FeatType_IsValid(value);
  }
  static constexpr FeatType FeatType_MIN =
    FeatureID_FeatType_FeatType_MIN;
  static constexpr FeatType FeatType_MAX =
    FeatureID_FeatType_FeatType_MAX;
  static constexpr int FeatType_ARRAYSIZE =
    FeatureID_FeatType_FeatType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FeatType_descriptor() {
    return FeatureID_FeatType_descriptor();
  }
  template<typename T>
  static inline const std::string& FeatType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FeatType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FeatType_Name.");
    return FeatureID_FeatType_Name(enum_t_value);
  }
  static inline bool FeatType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FeatType* value) {
    return FeatureID_FeatType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTileidFieldNumber = 1,
    kTypeFieldNumber = 2,
    kIdFieldNumber = 3,
    kVersionFieldNumber = 4,
    kIsDeletedFieldNumber = 5,
  };
  // optional int32 tileid = 1;
  bool has_tileid() const;
  private:
  bool _internal_has_tileid() const;
  public:
  void clear_tileid();
  ::PROTOBUF_NAMESPACE_ID::int32 tileid() const;
  void set_tileid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tileid() const;
  void _internal_set_tileid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 version = 4;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool is_deleted = 5;
  bool has_is_deleted() const;
  private:
  bool _internal_has_is_deleted() const;
  public:
  void clear_is_deleted();
  bool is_deleted() const;
  void set_is_deleted(bool value);
  private:
  bool _internal_is_deleted() const;
  void _internal_set_is_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.FeatureID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 tileid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  bool is_deleted_;
  friend struct ::TableStruct_metadata_2fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FeatureID

// optional int32 tileid = 1;
inline bool FeatureID::_internal_has_tileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeatureID::has_tileid() const {
  return _internal_has_tileid();
}
inline void FeatureID::clear_tileid() {
  tileid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FeatureID::_internal_tileid() const {
  return tileid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FeatureID::tileid() const {
  // @@protoc_insertion_point(field_get:RoadPB.FeatureID.tileid)
  return _internal_tileid();
}
inline void FeatureID::_internal_set_tileid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  tileid_ = value;
}
inline void FeatureID::set_tileid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tileid(value);
  // @@protoc_insertion_point(field_set:RoadPB.FeatureID.tileid)
}

// optional int32 type = 2;
inline bool FeatureID::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FeatureID::has_type() const {
  return _internal_has_type();
}
inline void FeatureID::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FeatureID::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FeatureID::type() const {
  // @@protoc_insertion_point(field_get:RoadPB.FeatureID.type)
  return _internal_type();
}
inline void FeatureID::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void FeatureID::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RoadPB.FeatureID.type)
}

// optional int64 id = 3;
inline bool FeatureID::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FeatureID::has_id() const {
  return _internal_has_id();
}
inline void FeatureID::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FeatureID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FeatureID::id() const {
  // @@protoc_insertion_point(field_get:RoadPB.FeatureID.id)
  return _internal_id();
}
inline void FeatureID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void FeatureID::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RoadPB.FeatureID.id)
}

// optional int64 version = 4;
inline bool FeatureID::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FeatureID::has_version() const {
  return _internal_has_version();
}
inline void FeatureID::clear_version() {
  version_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FeatureID::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FeatureID::version() const {
  // @@protoc_insertion_point(field_get:RoadPB.FeatureID.version)
  return _internal_version();
}
inline void FeatureID::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  version_ = value;
}
inline void FeatureID::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:RoadPB.FeatureID.version)
}

// optional bool is_deleted = 5;
inline bool FeatureID::_internal_has_is_deleted() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FeatureID::has_is_deleted() const {
  return _internal_has_is_deleted();
}
inline void FeatureID::clear_is_deleted() {
  is_deleted_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool FeatureID::_internal_is_deleted() const {
  return is_deleted_;
}
inline bool FeatureID::is_deleted() const {
  // @@protoc_insertion_point(field_get:RoadPB.FeatureID.is_deleted)
  return _internal_is_deleted();
}
inline void FeatureID::_internal_set_is_deleted(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_deleted_ = value;
}
inline void FeatureID::set_is_deleted(bool value) {
  _internal_set_is_deleted(value);
  // @@protoc_insertion_point(field_set:RoadPB.FeatureID.is_deleted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace RoadPB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RoadPB::FeatureID_FeatType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoadPB::FeatureID_FeatType>() {
  return ::RoadPB::FeatureID_FeatType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metadata_2fmetadata_2eproto
