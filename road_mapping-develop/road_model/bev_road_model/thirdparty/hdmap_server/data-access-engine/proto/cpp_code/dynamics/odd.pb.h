// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamics/odd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dynamics_2fodd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dynamics_2fodd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metadata/metadata.pb.h"
#include "common/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dynamics_2fodd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dynamics_2fodd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dynamics_2fodd_2eproto;
namespace RoadPB {
class Dynamic;
class DynamicDefaultTypeInternal;
extern DynamicDefaultTypeInternal _Dynamic_default_instance_;
class Dynamic_Relation;
class Dynamic_RelationDefaultTypeInternal;
extern Dynamic_RelationDefaultTypeInternal _Dynamic_Relation_default_instance_;
}  // namespace RoadPB
PROTOBUF_NAMESPACE_OPEN
template<> ::RoadPB::Dynamic* Arena::CreateMaybeMessage<::RoadPB::Dynamic>(Arena*);
template<> ::RoadPB::Dynamic_Relation* Arena::CreateMaybeMessage<::RoadPB::Dynamic_Relation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RoadPB {

enum Dynamic_DYNAMIC_TYPE : int {
  Dynamic_DYNAMIC_TYPE_STATIC_NOT_ODD = 1,
  Dynamic_DYNAMIC_TYPE_PATCH_HIGH_SPEED_LIMIT = 3,
  Dynamic_DYNAMIC_TYPE_PATCH_LOW_SPEED_LIMIT = 4,
  Dynamic_DYNAMIC_TYPE_PATCH_LANE_LINE_TYPE = 5,
  Dynamic_DYNAMIC_TYPE_PATCH_DRIVE_LINE = 6
};
bool Dynamic_DYNAMIC_TYPE_IsValid(int value);
constexpr Dynamic_DYNAMIC_TYPE Dynamic_DYNAMIC_TYPE_DYNAMIC_TYPE_MIN = Dynamic_DYNAMIC_TYPE_STATIC_NOT_ODD;
constexpr Dynamic_DYNAMIC_TYPE Dynamic_DYNAMIC_TYPE_DYNAMIC_TYPE_MAX = Dynamic_DYNAMIC_TYPE_PATCH_DRIVE_LINE;
constexpr int Dynamic_DYNAMIC_TYPE_DYNAMIC_TYPE_ARRAYSIZE = Dynamic_DYNAMIC_TYPE_DYNAMIC_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dynamic_DYNAMIC_TYPE_descriptor();
template<typename T>
inline const std::string& Dynamic_DYNAMIC_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dynamic_DYNAMIC_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dynamic_DYNAMIC_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dynamic_DYNAMIC_TYPE_descriptor(), enum_t_value);
}
inline bool Dynamic_DYNAMIC_TYPE_Parse(
    const std::string& name, Dynamic_DYNAMIC_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dynamic_DYNAMIC_TYPE>(
    Dynamic_DYNAMIC_TYPE_descriptor(), name, value);
}
// ===================================================================

class Dynamic_Relation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.Dynamic.Relation) */ {
 public:
  inline Dynamic_Relation() : Dynamic_Relation(nullptr) {};
  virtual ~Dynamic_Relation();

  Dynamic_Relation(const Dynamic_Relation& from);
  Dynamic_Relation(Dynamic_Relation&& from) noexcept
    : Dynamic_Relation() {
    *this = ::std::move(from);
  }

  inline Dynamic_Relation& operator=(const Dynamic_Relation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dynamic_Relation& operator=(Dynamic_Relation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dynamic_Relation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dynamic_Relation* internal_default_instance() {
    return reinterpret_cast<const Dynamic_Relation*>(
               &_Dynamic_Relation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Dynamic_Relation& a, Dynamic_Relation& b) {
    a.Swap(&b);
  }
  inline void Swap(Dynamic_Relation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dynamic_Relation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dynamic_Relation* New() const final {
    return CreateMaybeMessage<Dynamic_Relation>(nullptr);
  }

  Dynamic_Relation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dynamic_Relation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dynamic_Relation& from);
  void MergeFrom(const Dynamic_Relation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dynamic_Relation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.Dynamic.Relation";
  }
  protected:
  explicit Dynamic_Relation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dynamics_2fodd_2eproto);
    return ::descriptor_table_dynamics_2fodd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStpFieldNumber = 2,
    kEdpFieldNumber = 3,
  };
  // optional .RoadPB.FeatureID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::RoadPB::FeatureID& id() const;
  ::RoadPB::FeatureID* release_id();
  ::RoadPB::FeatureID* mutable_id();
  void set_allocated_id(::RoadPB::FeatureID* id);
  private:
  const ::RoadPB::FeatureID& _internal_id() const;
  ::RoadPB::FeatureID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::RoadPB::FeatureID* id);
  ::RoadPB::FeatureID* unsafe_arena_release_id();

  // optional .RoadPB.Point stp = 2;
  bool has_stp() const;
  private:
  bool _internal_has_stp() const;
  public:
  void clear_stp();
  const ::RoadPB::Point& stp() const;
  ::RoadPB::Point* release_stp();
  ::RoadPB::Point* mutable_stp();
  void set_allocated_stp(::RoadPB::Point* stp);
  private:
  const ::RoadPB::Point& _internal_stp() const;
  ::RoadPB::Point* _internal_mutable_stp();
  public:
  void unsafe_arena_set_allocated_stp(
      ::RoadPB::Point* stp);
  ::RoadPB::Point* unsafe_arena_release_stp();

  // optional .RoadPB.Point edp = 3;
  bool has_edp() const;
  private:
  bool _internal_has_edp() const;
  public:
  void clear_edp();
  const ::RoadPB::Point& edp() const;
  ::RoadPB::Point* release_edp();
  ::RoadPB::Point* mutable_edp();
  void set_allocated_edp(::RoadPB::Point* edp);
  private:
  const ::RoadPB::Point& _internal_edp() const;
  ::RoadPB::Point* _internal_mutable_edp();
  public:
  void unsafe_arena_set_allocated_edp(
      ::RoadPB::Point* edp);
  ::RoadPB::Point* unsafe_arena_release_edp();

  // @@protoc_insertion_point(class_scope:RoadPB.Dynamic.Relation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::RoadPB::FeatureID* id_;
  ::RoadPB::Point* stp_;
  ::RoadPB::Point* edp_;
  friend struct ::TableStruct_dynamics_2fodd_2eproto;
};
// -------------------------------------------------------------------

class Dynamic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.Dynamic) */ {
 public:
  inline Dynamic() : Dynamic(nullptr) {};
  virtual ~Dynamic();

  Dynamic(const Dynamic& from);
  Dynamic(Dynamic&& from) noexcept
    : Dynamic() {
    *this = ::std::move(from);
  }

  inline Dynamic& operator=(const Dynamic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dynamic& operator=(Dynamic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dynamic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dynamic* internal_default_instance() {
    return reinterpret_cast<const Dynamic*>(
               &_Dynamic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Dynamic& a, Dynamic& b) {
    a.Swap(&b);
  }
  inline void Swap(Dynamic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dynamic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dynamic* New() const final {
    return CreateMaybeMessage<Dynamic>(nullptr);
  }

  Dynamic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dynamic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dynamic& from);
  void MergeFrom(const Dynamic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dynamic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.Dynamic";
  }
  protected:
  explicit Dynamic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dynamics_2fodd_2eproto);
    return ::descriptor_table_dynamics_2fodd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Dynamic_Relation Relation;

  typedef Dynamic_DYNAMIC_TYPE DYNAMIC_TYPE;
  static constexpr DYNAMIC_TYPE STATIC_NOT_ODD =
    Dynamic_DYNAMIC_TYPE_STATIC_NOT_ODD;
  static constexpr DYNAMIC_TYPE PATCH_HIGH_SPEED_LIMIT =
    Dynamic_DYNAMIC_TYPE_PATCH_HIGH_SPEED_LIMIT;
  static constexpr DYNAMIC_TYPE PATCH_LOW_SPEED_LIMIT =
    Dynamic_DYNAMIC_TYPE_PATCH_LOW_SPEED_LIMIT;
  static constexpr DYNAMIC_TYPE PATCH_LANE_LINE_TYPE =
    Dynamic_DYNAMIC_TYPE_PATCH_LANE_LINE_TYPE;
  static constexpr DYNAMIC_TYPE PATCH_DRIVE_LINE =
    Dynamic_DYNAMIC_TYPE_PATCH_DRIVE_LINE;
  static inline bool DYNAMIC_TYPE_IsValid(int value) {
    return Dynamic_DYNAMIC_TYPE_IsValid(value);
  }
  static constexpr DYNAMIC_TYPE DYNAMIC_TYPE_MIN =
    Dynamic_DYNAMIC_TYPE_DYNAMIC_TYPE_MIN;
  static constexpr DYNAMIC_TYPE DYNAMIC_TYPE_MAX =
    Dynamic_DYNAMIC_TYPE_DYNAMIC_TYPE_MAX;
  static constexpr int DYNAMIC_TYPE_ARRAYSIZE =
    Dynamic_DYNAMIC_TYPE_DYNAMIC_TYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DYNAMIC_TYPE_descriptor() {
    return Dynamic_DYNAMIC_TYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& DYNAMIC_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DYNAMIC_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DYNAMIC_TYPE_Name.");
    return Dynamic_DYNAMIC_TYPE_Name(enum_t_value);
  }
  static inline bool DYNAMIC_TYPE_Parse(const std::string& name,
      DYNAMIC_TYPE* value) {
    return Dynamic_DYNAMIC_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 14,
    kBinaryValFieldNumber = 13,
    kIdFieldNumber = 1,
    kRangeFieldNumber = 3,
    kLinesFieldNumber = 4,
    kAreaFieldNumber = 5,
    kRelationFieldNumber = 6,
    kIsOddFieldNumber = 2,
    kTypeFieldNumber = 7,
    kReasonFieldNumber = 8,
    kActionFieldNumber = 9,
    kHeadingFieldNumber = 10,
    kIntValFieldNumber = 11,
    kDoubleValFieldNumber = 12,
  };
  // repeated string tags = 14;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // optional bytes binary_val = 13;
  bool has_binary_val() const;
  private:
  bool _internal_has_binary_val() const;
  public:
  void clear_binary_val();
  const std::string& binary_val() const;
  void set_binary_val(const std::string& value);
  void set_binary_val(std::string&& value);
  void set_binary_val(const char* value);
  void set_binary_val(const void* value, size_t size);
  std::string* mutable_binary_val();
  std::string* release_binary_val();
  void set_allocated_binary_val(std::string* binary_val);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_binary_val();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_binary_val(
      std::string* binary_val);
  private:
  const std::string& _internal_binary_val() const;
  void _internal_set_binary_val(const std::string& value);
  std::string* _internal_mutable_binary_val();
  public:

  // optional .RoadPB.FeatureID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::RoadPB::FeatureID& id() const;
  ::RoadPB::FeatureID* release_id();
  ::RoadPB::FeatureID* mutable_id();
  void set_allocated_id(::RoadPB::FeatureID* id);
  private:
  const ::RoadPB::FeatureID& _internal_id() const;
  ::RoadPB::FeatureID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::RoadPB::FeatureID* id);
  ::RoadPB::FeatureID* unsafe_arena_release_id();

  // optional .RoadPB.Circle range = 3;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::RoadPB::Circle& range() const;
  ::RoadPB::Circle* release_range();
  ::RoadPB::Circle* mutable_range();
  void set_allocated_range(::RoadPB::Circle* range);
  private:
  const ::RoadPB::Circle& _internal_range() const;
  ::RoadPB::Circle* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::RoadPB::Circle* range);
  ::RoadPB::Circle* unsafe_arena_release_range();

  // optional .RoadPB.Polyline lines = 4;
  bool has_lines() const;
  private:
  bool _internal_has_lines() const;
  public:
  void clear_lines();
  const ::RoadPB::Polyline& lines() const;
  ::RoadPB::Polyline* release_lines();
  ::RoadPB::Polyline* mutable_lines();
  void set_allocated_lines(::RoadPB::Polyline* lines);
  private:
  const ::RoadPB::Polyline& _internal_lines() const;
  ::RoadPB::Polyline* _internal_mutable_lines();
  public:
  void unsafe_arena_set_allocated_lines(
      ::RoadPB::Polyline* lines);
  ::RoadPB::Polyline* unsafe_arena_release_lines();

  // optional .RoadPB.Polygon area = 5;
  bool has_area() const;
  private:
  bool _internal_has_area() const;
  public:
  void clear_area();
  const ::RoadPB::Polygon& area() const;
  ::RoadPB::Polygon* release_area();
  ::RoadPB::Polygon* mutable_area();
  void set_allocated_area(::RoadPB::Polygon* area);
  private:
  const ::RoadPB::Polygon& _internal_area() const;
  ::RoadPB::Polygon* _internal_mutable_area();
  public:
  void unsafe_arena_set_allocated_area(
      ::RoadPB::Polygon* area);
  ::RoadPB::Polygon* unsafe_arena_release_area();

  // optional .RoadPB.Dynamic.Relation relation = 6;
  bool has_relation() const;
  private:
  bool _internal_has_relation() const;
  public:
  void clear_relation();
  const ::RoadPB::Dynamic_Relation& relation() const;
  ::RoadPB::Dynamic_Relation* release_relation();
  ::RoadPB::Dynamic_Relation* mutable_relation();
  void set_allocated_relation(::RoadPB::Dynamic_Relation* relation);
  private:
  const ::RoadPB::Dynamic_Relation& _internal_relation() const;
  ::RoadPB::Dynamic_Relation* _internal_mutable_relation();
  public:
  void unsafe_arena_set_allocated_relation(
      ::RoadPB::Dynamic_Relation* relation);
  ::RoadPB::Dynamic_Relation* unsafe_arena_release_relation();

  // optional bool is_odd = 2;
  bool has_is_odd() const;
  private:
  bool _internal_has_is_odd() const;
  public:
  void clear_is_odd();
  bool is_odd() const;
  void set_is_odd(bool value);
  private:
  bool _internal_is_odd() const;
  void _internal_set_is_odd(bool value);
  public:

  // optional int32 type = 7;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 reason = 8;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::int64 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 action = 9;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::PROTOBUF_NAMESPACE_ID::int32 action() const;
  void set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action() const;
  void _internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float heading = 10;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // optional int64 int_val = 11;
  bool has_int_val() const;
  private:
  bool _internal_has_int_val() const;
  public:
  void clear_int_val();
  ::PROTOBUF_NAMESPACE_ID::int64 int_val() const;
  void set_int_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_val() const;
  void _internal_set_int_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional double double_val = 12;
  bool has_double_val() const;
  private:
  bool _internal_has_double_val() const;
  public:
  void clear_double_val();
  double double_val() const;
  void set_double_val(double value);
  private:
  double _internal_double_val() const;
  void _internal_set_double_val(double value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.Dynamic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_val_;
  ::RoadPB::FeatureID* id_;
  ::RoadPB::Circle* range_;
  ::RoadPB::Polyline* lines_;
  ::RoadPB::Polygon* area_;
  ::RoadPB::Dynamic_Relation* relation_;
  bool is_odd_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int64 reason_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_;
  float heading_;
  ::PROTOBUF_NAMESPACE_ID::int64 int_val_;
  double double_val_;
  friend struct ::TableStruct_dynamics_2fodd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Dynamic_Relation

// optional .RoadPB.FeatureID id = 1;
inline bool Dynamic_Relation::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool Dynamic_Relation::has_id() const {
  return _internal_has_id();
}
inline const ::RoadPB::FeatureID& Dynamic_Relation::_internal_id() const {
  const ::RoadPB::FeatureID* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::FeatureID*>(
      &::RoadPB::_FeatureID_default_instance_);
}
inline const ::RoadPB::FeatureID& Dynamic_Relation::id() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.Relation.id)
  return _internal_id();
}
inline void Dynamic_Relation::unsafe_arena_set_allocated_id(
    ::RoadPB::FeatureID* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Dynamic.Relation.id)
}
inline ::RoadPB::FeatureID* Dynamic_Relation::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::FeatureID* Dynamic_Relation::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:RoadPB.Dynamic.Relation.id)
  _has_bits_[0] &= ~0x00000001u;
  ::RoadPB::FeatureID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::RoadPB::FeatureID* Dynamic_Relation::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::FeatureID>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::RoadPB::FeatureID* Dynamic_Relation::mutable_id() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Dynamic.Relation.id)
  return _internal_mutable_id();
}
inline void Dynamic_Relation::set_allocated_id(::RoadPB::FeatureID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Dynamic.Relation.id)
}

// optional .RoadPB.Point stp = 2;
inline bool Dynamic_Relation::_internal_has_stp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || stp_ != nullptr);
  return value;
}
inline bool Dynamic_Relation::has_stp() const {
  return _internal_has_stp();
}
inline const ::RoadPB::Point& Dynamic_Relation::_internal_stp() const {
  const ::RoadPB::Point* p = stp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Point*>(
      &::RoadPB::_Point_default_instance_);
}
inline const ::RoadPB::Point& Dynamic_Relation::stp() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.Relation.stp)
  return _internal_stp();
}
inline void Dynamic_Relation::unsafe_arena_set_allocated_stp(
    ::RoadPB::Point* stp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stp_);
  }
  stp_ = stp;
  if (stp) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Dynamic.Relation.stp)
}
inline ::RoadPB::Point* Dynamic_Relation::release_stp() {
  auto temp = unsafe_arena_release_stp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Point* Dynamic_Relation::unsafe_arena_release_stp() {
  // @@protoc_insertion_point(field_release:RoadPB.Dynamic.Relation.stp)
  _has_bits_[0] &= ~0x00000002u;
  ::RoadPB::Point* temp = stp_;
  stp_ = nullptr;
  return temp;
}
inline ::RoadPB::Point* Dynamic_Relation::_internal_mutable_stp() {
  _has_bits_[0] |= 0x00000002u;
  if (stp_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Point>(GetArena());
    stp_ = p;
  }
  return stp_;
}
inline ::RoadPB::Point* Dynamic_Relation::mutable_stp() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Dynamic.Relation.stp)
  return _internal_mutable_stp();
}
inline void Dynamic_Relation::set_allocated_stp(::RoadPB::Point* stp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stp_);
  }
  if (stp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stp)->GetArena();
    if (message_arena != submessage_arena) {
      stp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stp_ = stp;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Dynamic.Relation.stp)
}

// optional .RoadPB.Point edp = 3;
inline bool Dynamic_Relation::_internal_has_edp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || edp_ != nullptr);
  return value;
}
inline bool Dynamic_Relation::has_edp() const {
  return _internal_has_edp();
}
inline const ::RoadPB::Point& Dynamic_Relation::_internal_edp() const {
  const ::RoadPB::Point* p = edp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Point*>(
      &::RoadPB::_Point_default_instance_);
}
inline const ::RoadPB::Point& Dynamic_Relation::edp() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.Relation.edp)
  return _internal_edp();
}
inline void Dynamic_Relation::unsafe_arena_set_allocated_edp(
    ::RoadPB::Point* edp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edp_);
  }
  edp_ = edp;
  if (edp) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Dynamic.Relation.edp)
}
inline ::RoadPB::Point* Dynamic_Relation::release_edp() {
  auto temp = unsafe_arena_release_edp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Point* Dynamic_Relation::unsafe_arena_release_edp() {
  // @@protoc_insertion_point(field_release:RoadPB.Dynamic.Relation.edp)
  _has_bits_[0] &= ~0x00000004u;
  ::RoadPB::Point* temp = edp_;
  edp_ = nullptr;
  return temp;
}
inline ::RoadPB::Point* Dynamic_Relation::_internal_mutable_edp() {
  _has_bits_[0] |= 0x00000004u;
  if (edp_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Point>(GetArena());
    edp_ = p;
  }
  return edp_;
}
inline ::RoadPB::Point* Dynamic_Relation::mutable_edp() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Dynamic.Relation.edp)
  return _internal_mutable_edp();
}
inline void Dynamic_Relation::set_allocated_edp(::RoadPB::Point* edp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edp_);
  }
  if (edp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edp)->GetArena();
    if (message_arena != submessage_arena) {
      edp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  edp_ = edp;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Dynamic.Relation.edp)
}

// -------------------------------------------------------------------

// Dynamic

// optional .RoadPB.FeatureID id = 1;
inline bool Dynamic::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool Dynamic::has_id() const {
  return _internal_has_id();
}
inline const ::RoadPB::FeatureID& Dynamic::_internal_id() const {
  const ::RoadPB::FeatureID* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::FeatureID*>(
      &::RoadPB::_FeatureID_default_instance_);
}
inline const ::RoadPB::FeatureID& Dynamic::id() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.id)
  return _internal_id();
}
inline void Dynamic::unsafe_arena_set_allocated_id(
    ::RoadPB::FeatureID* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Dynamic.id)
}
inline ::RoadPB::FeatureID* Dynamic::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::FeatureID* Dynamic::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:RoadPB.Dynamic.id)
  _has_bits_[0] &= ~0x00000002u;
  ::RoadPB::FeatureID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::RoadPB::FeatureID* Dynamic::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::FeatureID>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::RoadPB::FeatureID* Dynamic::mutable_id() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Dynamic.id)
  return _internal_mutable_id();
}
inline void Dynamic::set_allocated_id(::RoadPB::FeatureID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Dynamic.id)
}

// optional bool is_odd = 2;
inline bool Dynamic::_internal_has_is_odd() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Dynamic::has_is_odd() const {
  return _internal_has_is_odd();
}
inline void Dynamic::clear_is_odd() {
  is_odd_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Dynamic::_internal_is_odd() const {
  return is_odd_;
}
inline bool Dynamic::is_odd() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.is_odd)
  return _internal_is_odd();
}
inline void Dynamic::_internal_set_is_odd(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_odd_ = value;
}
inline void Dynamic::set_is_odd(bool value) {
  _internal_set_is_odd(value);
  // @@protoc_insertion_point(field_set:RoadPB.Dynamic.is_odd)
}

// optional .RoadPB.Circle range = 3;
inline bool Dynamic::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || range_ != nullptr);
  return value;
}
inline bool Dynamic::has_range() const {
  return _internal_has_range();
}
inline const ::RoadPB::Circle& Dynamic::_internal_range() const {
  const ::RoadPB::Circle* p = range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Circle*>(
      &::RoadPB::_Circle_default_instance_);
}
inline const ::RoadPB::Circle& Dynamic::range() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.range)
  return _internal_range();
}
inline void Dynamic::unsafe_arena_set_allocated_range(
    ::RoadPB::Circle* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Dynamic.range)
}
inline ::RoadPB::Circle* Dynamic::release_range() {
  auto temp = unsafe_arena_release_range();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Circle* Dynamic::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:RoadPB.Dynamic.range)
  _has_bits_[0] &= ~0x00000004u;
  ::RoadPB::Circle* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::RoadPB::Circle* Dynamic::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000004u;
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Circle>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::RoadPB::Circle* Dynamic::mutable_range() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Dynamic.range)
  return _internal_mutable_range();
}
inline void Dynamic::set_allocated_range(::RoadPB::Circle* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range)->GetArena();
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Dynamic.range)
}

// optional .RoadPB.Polyline lines = 4;
inline bool Dynamic::_internal_has_lines() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || lines_ != nullptr);
  return value;
}
inline bool Dynamic::has_lines() const {
  return _internal_has_lines();
}
inline const ::RoadPB::Polyline& Dynamic::_internal_lines() const {
  const ::RoadPB::Polyline* p = lines_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Polyline*>(
      &::RoadPB::_Polyline_default_instance_);
}
inline const ::RoadPB::Polyline& Dynamic::lines() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.lines)
  return _internal_lines();
}
inline void Dynamic::unsafe_arena_set_allocated_lines(
    ::RoadPB::Polyline* lines) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lines_);
  }
  lines_ = lines;
  if (lines) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Dynamic.lines)
}
inline ::RoadPB::Polyline* Dynamic::release_lines() {
  auto temp = unsafe_arena_release_lines();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Polyline* Dynamic::unsafe_arena_release_lines() {
  // @@protoc_insertion_point(field_release:RoadPB.Dynamic.lines)
  _has_bits_[0] &= ~0x00000008u;
  ::RoadPB::Polyline* temp = lines_;
  lines_ = nullptr;
  return temp;
}
inline ::RoadPB::Polyline* Dynamic::_internal_mutable_lines() {
  _has_bits_[0] |= 0x00000008u;
  if (lines_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Polyline>(GetArena());
    lines_ = p;
  }
  return lines_;
}
inline ::RoadPB::Polyline* Dynamic::mutable_lines() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Dynamic.lines)
  return _internal_mutable_lines();
}
inline void Dynamic::set_allocated_lines(::RoadPB::Polyline* lines) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lines_);
  }
  if (lines) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lines)->GetArena();
    if (message_arena != submessage_arena) {
      lines = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lines, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  lines_ = lines;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Dynamic.lines)
}

// optional .RoadPB.Polygon area = 5;
inline bool Dynamic::_internal_has_area() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || area_ != nullptr);
  return value;
}
inline bool Dynamic::has_area() const {
  return _internal_has_area();
}
inline const ::RoadPB::Polygon& Dynamic::_internal_area() const {
  const ::RoadPB::Polygon* p = area_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Polygon*>(
      &::RoadPB::_Polygon_default_instance_);
}
inline const ::RoadPB::Polygon& Dynamic::area() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.area)
  return _internal_area();
}
inline void Dynamic::unsafe_arena_set_allocated_area(
    ::RoadPB::Polygon* area) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(area_);
  }
  area_ = area;
  if (area) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Dynamic.area)
}
inline ::RoadPB::Polygon* Dynamic::release_area() {
  auto temp = unsafe_arena_release_area();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Polygon* Dynamic::unsafe_arena_release_area() {
  // @@protoc_insertion_point(field_release:RoadPB.Dynamic.area)
  _has_bits_[0] &= ~0x00000010u;
  ::RoadPB::Polygon* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::RoadPB::Polygon* Dynamic::_internal_mutable_area() {
  _has_bits_[0] |= 0x00000010u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Polygon>(GetArena());
    area_ = p;
  }
  return area_;
}
inline ::RoadPB::Polygon* Dynamic::mutable_area() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Dynamic.area)
  return _internal_mutable_area();
}
inline void Dynamic::set_allocated_area(::RoadPB::Polygon* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(area_);
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(area)->GetArena();
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Dynamic.area)
}

// optional .RoadPB.Dynamic.Relation relation = 6;
inline bool Dynamic::_internal_has_relation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || relation_ != nullptr);
  return value;
}
inline bool Dynamic::has_relation() const {
  return _internal_has_relation();
}
inline void Dynamic::clear_relation() {
  if (relation_ != nullptr) relation_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::RoadPB::Dynamic_Relation& Dynamic::_internal_relation() const {
  const ::RoadPB::Dynamic_Relation* p = relation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Dynamic_Relation*>(
      &::RoadPB::_Dynamic_Relation_default_instance_);
}
inline const ::RoadPB::Dynamic_Relation& Dynamic::relation() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.relation)
  return _internal_relation();
}
inline void Dynamic::unsafe_arena_set_allocated_relation(
    ::RoadPB::Dynamic_Relation* relation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relation_);
  }
  relation_ = relation;
  if (relation) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Dynamic.relation)
}
inline ::RoadPB::Dynamic_Relation* Dynamic::release_relation() {
  auto temp = unsafe_arena_release_relation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Dynamic_Relation* Dynamic::unsafe_arena_release_relation() {
  // @@protoc_insertion_point(field_release:RoadPB.Dynamic.relation)
  _has_bits_[0] &= ~0x00000020u;
  ::RoadPB::Dynamic_Relation* temp = relation_;
  relation_ = nullptr;
  return temp;
}
inline ::RoadPB::Dynamic_Relation* Dynamic::_internal_mutable_relation() {
  _has_bits_[0] |= 0x00000020u;
  if (relation_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Dynamic_Relation>(GetArena());
    relation_ = p;
  }
  return relation_;
}
inline ::RoadPB::Dynamic_Relation* Dynamic::mutable_relation() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Dynamic.relation)
  return _internal_mutable_relation();
}
inline void Dynamic::set_allocated_relation(::RoadPB::Dynamic_Relation* relation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete relation_;
  }
  if (relation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relation);
    if (message_arena != submessage_arena) {
      relation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  relation_ = relation;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Dynamic.relation)
}

// optional float heading = 10;
inline bool Dynamic::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Dynamic::has_heading() const {
  return _internal_has_heading();
}
inline void Dynamic::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float Dynamic::_internal_heading() const {
  return heading_;
}
inline float Dynamic::heading() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.heading)
  return _internal_heading();
}
inline void Dynamic::_internal_set_heading(float value) {
  _has_bits_[0] |= 0x00000400u;
  heading_ = value;
}
inline void Dynamic::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:RoadPB.Dynamic.heading)
}

// optional int32 type = 7;
inline bool Dynamic::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Dynamic::has_type() const {
  return _internal_has_type();
}
inline void Dynamic::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dynamic::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dynamic::type() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.type)
  return _internal_type();
}
inline void Dynamic::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
}
inline void Dynamic::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RoadPB.Dynamic.type)
}

// optional int64 reason = 8;
inline bool Dynamic::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Dynamic::has_reason() const {
  return _internal_has_reason();
}
inline void Dynamic::clear_reason() {
  reason_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Dynamic::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Dynamic::reason() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.reason)
  return _internal_reason();
}
inline void Dynamic::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  reason_ = value;
}
inline void Dynamic::set_reason(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:RoadPB.Dynamic.reason)
}

// optional int32 action = 9;
inline bool Dynamic::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Dynamic::has_action() const {
  return _internal_has_action();
}
inline void Dynamic::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dynamic::_internal_action() const {
  return action_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dynamic::action() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.action)
  return _internal_action();
}
inline void Dynamic::_internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  action_ = value;
}
inline void Dynamic::set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:RoadPB.Dynamic.action)
}

// optional int64 int_val = 11;
inline bool Dynamic::_internal_has_int_val() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Dynamic::has_int_val() const {
  return _internal_has_int_val();
}
inline void Dynamic::clear_int_val() {
  int_val_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Dynamic::_internal_int_val() const {
  return int_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Dynamic::int_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.int_val)
  return _internal_int_val();
}
inline void Dynamic::_internal_set_int_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  int_val_ = value;
}
inline void Dynamic::set_int_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.Dynamic.int_val)
}

// optional double double_val = 12;
inline bool Dynamic::_internal_has_double_val() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Dynamic::has_double_val() const {
  return _internal_has_double_val();
}
inline void Dynamic::clear_double_val() {
  double_val_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double Dynamic::_internal_double_val() const {
  return double_val_;
}
inline double Dynamic::double_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.double_val)
  return _internal_double_val();
}
inline void Dynamic::_internal_set_double_val(double value) {
  _has_bits_[0] |= 0x00001000u;
  double_val_ = value;
}
inline void Dynamic::set_double_val(double value) {
  _internal_set_double_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.Dynamic.double_val)
}

// optional bytes binary_val = 13;
inline bool Dynamic::_internal_has_binary_val() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Dynamic::has_binary_val() const {
  return _internal_has_binary_val();
}
inline void Dynamic::clear_binary_val() {
  binary_val_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Dynamic::binary_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.binary_val)
  return _internal_binary_val();
}
inline void Dynamic::set_binary_val(const std::string& value) {
  _internal_set_binary_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.Dynamic.binary_val)
}
inline std::string* Dynamic::mutable_binary_val() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Dynamic.binary_val)
  return _internal_mutable_binary_val();
}
inline const std::string& Dynamic::_internal_binary_val() const {
  return binary_val_.Get();
}
inline void Dynamic::_internal_set_binary_val(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  binary_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Dynamic::set_binary_val(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  binary_val_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoadPB.Dynamic.binary_val)
}
inline void Dynamic::set_binary_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  binary_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoadPB.Dynamic.binary_val)
}
inline void Dynamic::set_binary_val(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  binary_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoadPB.Dynamic.binary_val)
}
inline std::string* Dynamic::_internal_mutable_binary_val() {
  _has_bits_[0] |= 0x00000001u;
  return binary_val_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Dynamic::release_binary_val() {
  // @@protoc_insertion_point(field_release:RoadPB.Dynamic.binary_val)
  if (!_internal_has_binary_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return binary_val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Dynamic::set_allocated_binary_val(std::string* binary_val) {
  if (binary_val != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  binary_val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), binary_val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Dynamic.binary_val)
}
inline std::string* Dynamic::unsafe_arena_release_binary_val() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoadPB.Dynamic.binary_val)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return binary_val_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Dynamic::unsafe_arena_set_allocated_binary_val(
    std::string* binary_val) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (binary_val != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  binary_val_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      binary_val, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Dynamic.binary_val)
}

// repeated string tags = 14;
inline int Dynamic::_internal_tags_size() const {
  return tags_.size();
}
inline int Dynamic::tags_size() const {
  return _internal_tags_size();
}
inline void Dynamic::clear_tags() {
  tags_.Clear();
}
inline std::string* Dynamic::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:RoadPB.Dynamic.tags)
  return _internal_add_tags();
}
inline const std::string& Dynamic::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& Dynamic::tags(int index) const {
  // @@protoc_insertion_point(field_get:RoadPB.Dynamic.tags)
  return _internal_tags(index);
}
inline std::string* Dynamic::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:RoadPB.Dynamic.tags)
  return tags_.Mutable(index);
}
inline void Dynamic::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:RoadPB.Dynamic.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Dynamic::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:RoadPB.Dynamic.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void Dynamic::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RoadPB.Dynamic.tags)
}
inline void Dynamic::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RoadPB.Dynamic.tags)
}
inline std::string* Dynamic::_internal_add_tags() {
  return tags_.Add();
}
inline void Dynamic::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RoadPB.Dynamic.tags)
}
inline void Dynamic::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:RoadPB.Dynamic.tags)
}
inline void Dynamic::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RoadPB.Dynamic.tags)
}
inline void Dynamic::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RoadPB.Dynamic.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Dynamic::tags() const {
  // @@protoc_insertion_point(field_list:RoadPB.Dynamic.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Dynamic::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:RoadPB.Dynamic.tags)
  return &tags_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RoadPB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RoadPB::Dynamic_DYNAMIC_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoadPB::Dynamic_DYNAMIC_TYPE>() {
  return ::RoadPB::Dynamic_DYNAMIC_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dynamics_2fodd_2eproto
