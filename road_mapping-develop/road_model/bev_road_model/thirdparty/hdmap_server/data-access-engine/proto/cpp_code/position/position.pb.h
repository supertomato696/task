// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: position/position.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_position_2fposition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_position_2fposition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metadata/metadata.pb.h"
#include "common/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_position_2fposition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_position_2fposition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_position_2fposition_2eproto;
namespace RoadPB {
class PositionObject;
class PositionObjectDefaultTypeInternal;
extern PositionObjectDefaultTypeInternal _PositionObject_default_instance_;
}  // namespace RoadPB
PROTOBUF_NAMESPACE_OPEN
template<> ::RoadPB::PositionObject* Arena::CreateMaybeMessage<::RoadPB::PositionObject>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RoadPB {

enum PositionObject_ObjectType : int {
  PositionObject_ObjectType_UNKNOWN = 0,
  PositionObject_ObjectType_POLE = 1,
  PositionObject_ObjectType_SIGN = 2,
  PositionObject_ObjectType_OVERHEAD = 5,
  PositionObject_ObjectType_TRAFFIC_LIGHT = 6,
  PositionObject_ObjectType_LANE_MARKING = 7,
  PositionObject_ObjectType_STOP_LINE = 8,
  PositionObject_ObjectType_SPEED_BUMP = 9,
  PositionObject_ObjectType_CROSS_WALK = 10
};
bool PositionObject_ObjectType_IsValid(int value);
constexpr PositionObject_ObjectType PositionObject_ObjectType_ObjectType_MIN = PositionObject_ObjectType_UNKNOWN;
constexpr PositionObject_ObjectType PositionObject_ObjectType_ObjectType_MAX = PositionObject_ObjectType_CROSS_WALK;
constexpr int PositionObject_ObjectType_ObjectType_ARRAYSIZE = PositionObject_ObjectType_ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionObject_ObjectType_descriptor();
template<typename T>
inline const std::string& PositionObject_ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PositionObject_ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PositionObject_ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PositionObject_ObjectType_descriptor(), enum_t_value);
}
inline bool PositionObject_ObjectType_Parse(
    const std::string& name, PositionObject_ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PositionObject_ObjectType>(
    PositionObject_ObjectType_descriptor(), name, value);
}
enum PositionObject_ObjectSubType : int {
  PositionObject_ObjectSubType_UNKNOWN_SUBTYPE = 0,
  PositionObject_ObjectSubType_SOLID = 1,
  PositionObject_ObjectSubType_DOUBLE_SOLID = 2,
  PositionObject_ObjectSubType_DASHED = 3,
  PositionObject_ObjectSubType_DOUBLE_DASHED = 4
};
bool PositionObject_ObjectSubType_IsValid(int value);
constexpr PositionObject_ObjectSubType PositionObject_ObjectSubType_ObjectSubType_MIN = PositionObject_ObjectSubType_UNKNOWN_SUBTYPE;
constexpr PositionObject_ObjectSubType PositionObject_ObjectSubType_ObjectSubType_MAX = PositionObject_ObjectSubType_DOUBLE_DASHED;
constexpr int PositionObject_ObjectSubType_ObjectSubType_ARRAYSIZE = PositionObject_ObjectSubType_ObjectSubType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionObject_ObjectSubType_descriptor();
template<typename T>
inline const std::string& PositionObject_ObjectSubType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PositionObject_ObjectSubType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PositionObject_ObjectSubType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PositionObject_ObjectSubType_descriptor(), enum_t_value);
}
inline bool PositionObject_ObjectSubType_Parse(
    const std::string& name, PositionObject_ObjectSubType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PositionObject_ObjectSubType>(
    PositionObject_ObjectSubType_descriptor(), name, value);
}
// ===================================================================

class PositionObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.PositionObject) */ {
 public:
  inline PositionObject() : PositionObject(nullptr) {};
  virtual ~PositionObject();

  PositionObject(const PositionObject& from);
  PositionObject(PositionObject&& from) noexcept
    : PositionObject() {
    *this = ::std::move(from);
  }

  inline PositionObject& operator=(const PositionObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionObject& operator=(PositionObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionObject* internal_default_instance() {
    return reinterpret_cast<const PositionObject*>(
               &_PositionObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PositionObject& a, PositionObject& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionObject* New() const final {
    return CreateMaybeMessage<PositionObject>(nullptr);
  }

  PositionObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionObject& from);
  void MergeFrom(const PositionObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.PositionObject";
  }
  protected:
  explicit PositionObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_position_2fposition_2eproto);
    return ::descriptor_table_position_2fposition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PositionObject_ObjectType ObjectType;
  static constexpr ObjectType UNKNOWN =
    PositionObject_ObjectType_UNKNOWN;
  static constexpr ObjectType POLE =
    PositionObject_ObjectType_POLE;
  static constexpr ObjectType SIGN =
    PositionObject_ObjectType_SIGN;
  static constexpr ObjectType OVERHEAD =
    PositionObject_ObjectType_OVERHEAD;
  static constexpr ObjectType TRAFFIC_LIGHT =
    PositionObject_ObjectType_TRAFFIC_LIGHT;
  static constexpr ObjectType LANE_MARKING =
    PositionObject_ObjectType_LANE_MARKING;
  static constexpr ObjectType STOP_LINE =
    PositionObject_ObjectType_STOP_LINE;
  static constexpr ObjectType SPEED_BUMP =
    PositionObject_ObjectType_SPEED_BUMP;
  static constexpr ObjectType CROSS_WALK =
    PositionObject_ObjectType_CROSS_WALK;
  static inline bool ObjectType_IsValid(int value) {
    return PositionObject_ObjectType_IsValid(value);
  }
  static constexpr ObjectType ObjectType_MIN =
    PositionObject_ObjectType_ObjectType_MIN;
  static constexpr ObjectType ObjectType_MAX =
    PositionObject_ObjectType_ObjectType_MAX;
  static constexpr int ObjectType_ARRAYSIZE =
    PositionObject_ObjectType_ObjectType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjectType_descriptor() {
    return PositionObject_ObjectType_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjectType_Name.");
    return PositionObject_ObjectType_Name(enum_t_value);
  }
  static inline bool ObjectType_Parse(const std::string& name,
      ObjectType* value) {
    return PositionObject_ObjectType_Parse(name, value);
  }

  typedef PositionObject_ObjectSubType ObjectSubType;
  static constexpr ObjectSubType UNKNOWN_SUBTYPE =
    PositionObject_ObjectSubType_UNKNOWN_SUBTYPE;
  static constexpr ObjectSubType SOLID =
    PositionObject_ObjectSubType_SOLID;
  static constexpr ObjectSubType DOUBLE_SOLID =
    PositionObject_ObjectSubType_DOUBLE_SOLID;
  static constexpr ObjectSubType DASHED =
    PositionObject_ObjectSubType_DASHED;
  static constexpr ObjectSubType DOUBLE_DASHED =
    PositionObject_ObjectSubType_DOUBLE_DASHED;
  static inline bool ObjectSubType_IsValid(int value) {
    return PositionObject_ObjectSubType_IsValid(value);
  }
  static constexpr ObjectSubType ObjectSubType_MIN =
    PositionObject_ObjectSubType_ObjectSubType_MIN;
  static constexpr ObjectSubType ObjectSubType_MAX =
    PositionObject_ObjectSubType_ObjectSubType_MAX;
  static constexpr int ObjectSubType_ARRAYSIZE =
    PositionObject_ObjectSubType_ObjectSubType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjectSubType_descriptor() {
    return PositionObject_ObjectSubType_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjectSubType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjectSubType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjectSubType_Name.");
    return PositionObject_ObjectSubType_Name(enum_t_value);
  }
  static inline bool ObjectSubType_Parse(const std::string& name,
      ObjectSubType* value) {
    return PositionObject_ObjectSubType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLaneGroupsFieldNumber = 7,
    kContentFieldNumber = 6,
    kIdFieldNumber = 1,
    kBorderFieldNumber = 2,
    kCircleFieldNumber = 3,
    kPoleFieldNumber = 4,
    kTypeFieldNumber = 5,
    kSubtypeFieldNumber = 8,
  };
  // repeated .RoadPB.FeatureID lane_groups = 7;
  int lane_groups_size() const;
  private:
  int _internal_lane_groups_size() const;
  public:
  void clear_lane_groups();
  ::RoadPB::FeatureID* mutable_lane_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >*
      mutable_lane_groups();
  private:
  const ::RoadPB::FeatureID& _internal_lane_groups(int index) const;
  ::RoadPB::FeatureID* _internal_add_lane_groups();
  public:
  const ::RoadPB::FeatureID& lane_groups(int index) const;
  ::RoadPB::FeatureID* add_lane_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >&
      lane_groups() const;

  // optional string content = 6;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional .RoadPB.FeatureID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::RoadPB::FeatureID& id() const;
  ::RoadPB::FeatureID* release_id();
  ::RoadPB::FeatureID* mutable_id();
  void set_allocated_id(::RoadPB::FeatureID* id);
  private:
  const ::RoadPB::FeatureID& _internal_id() const;
  ::RoadPB::FeatureID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::RoadPB::FeatureID* id);
  ::RoadPB::FeatureID* unsafe_arena_release_id();

  // optional .RoadPB.Polygon border = 2;
  bool has_border() const;
  private:
  bool _internal_has_border() const;
  public:
  void clear_border();
  const ::RoadPB::Polygon& border() const;
  ::RoadPB::Polygon* release_border();
  ::RoadPB::Polygon* mutable_border();
  void set_allocated_border(::RoadPB::Polygon* border);
  private:
  const ::RoadPB::Polygon& _internal_border() const;
  ::RoadPB::Polygon* _internal_mutable_border();
  public:
  void unsafe_arena_set_allocated_border(
      ::RoadPB::Polygon* border);
  ::RoadPB::Polygon* unsafe_arena_release_border();

  // optional .RoadPB.Circle circle = 3;
  bool has_circle() const;
  private:
  bool _internal_has_circle() const;
  public:
  void clear_circle();
  const ::RoadPB::Circle& circle() const;
  ::RoadPB::Circle* release_circle();
  ::RoadPB::Circle* mutable_circle();
  void set_allocated_circle(::RoadPB::Circle* circle);
  private:
  const ::RoadPB::Circle& _internal_circle() const;
  ::RoadPB::Circle* _internal_mutable_circle();
  public:
  void unsafe_arena_set_allocated_circle(
      ::RoadPB::Circle* circle);
  ::RoadPB::Circle* unsafe_arena_release_circle();

  // optional .RoadPB.Polyline pole = 4;
  bool has_pole() const;
  private:
  bool _internal_has_pole() const;
  public:
  void clear_pole();
  const ::RoadPB::Polyline& pole() const;
  ::RoadPB::Polyline* release_pole();
  ::RoadPB::Polyline* mutable_pole();
  void set_allocated_pole(::RoadPB::Polyline* pole);
  private:
  const ::RoadPB::Polyline& _internal_pole() const;
  ::RoadPB::Polyline* _internal_mutable_pole();
  public:
  void unsafe_arena_set_allocated_pole(
      ::RoadPB::Polyline* pole);
  ::RoadPB::Polyline* unsafe_arena_release_pole();

  // optional int32 type = 5;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 subtype = 8;
  bool has_subtype() const;
  private:
  bool _internal_has_subtype() const;
  public:
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.PositionObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID > lane_groups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::RoadPB::FeatureID* id_;
  ::RoadPB::Polygon* border_;
  ::RoadPB::Circle* circle_;
  ::RoadPB::Polyline* pole_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  friend struct ::TableStruct_position_2fposition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PositionObject

// optional .RoadPB.FeatureID id = 1;
inline bool PositionObject::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool PositionObject::has_id() const {
  return _internal_has_id();
}
inline const ::RoadPB::FeatureID& PositionObject::_internal_id() const {
  const ::RoadPB::FeatureID* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::FeatureID*>(
      &::RoadPB::_FeatureID_default_instance_);
}
inline const ::RoadPB::FeatureID& PositionObject::id() const {
  // @@protoc_insertion_point(field_get:RoadPB.PositionObject.id)
  return _internal_id();
}
inline void PositionObject::unsafe_arena_set_allocated_id(
    ::RoadPB::FeatureID* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.PositionObject.id)
}
inline ::RoadPB::FeatureID* PositionObject::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::FeatureID* PositionObject::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:RoadPB.PositionObject.id)
  _has_bits_[0] &= ~0x00000002u;
  ::RoadPB::FeatureID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::RoadPB::FeatureID* PositionObject::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::FeatureID>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::RoadPB::FeatureID* PositionObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:RoadPB.PositionObject.id)
  return _internal_mutable_id();
}
inline void PositionObject::set_allocated_id(::RoadPB::FeatureID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.PositionObject.id)
}

// optional .RoadPB.Polygon border = 2;
inline bool PositionObject::_internal_has_border() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || border_ != nullptr);
  return value;
}
inline bool PositionObject::has_border() const {
  return _internal_has_border();
}
inline const ::RoadPB::Polygon& PositionObject::_internal_border() const {
  const ::RoadPB::Polygon* p = border_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Polygon*>(
      &::RoadPB::_Polygon_default_instance_);
}
inline const ::RoadPB::Polygon& PositionObject::border() const {
  // @@protoc_insertion_point(field_get:RoadPB.PositionObject.border)
  return _internal_border();
}
inline void PositionObject::unsafe_arena_set_allocated_border(
    ::RoadPB::Polygon* border) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(border_);
  }
  border_ = border;
  if (border) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.PositionObject.border)
}
inline ::RoadPB::Polygon* PositionObject::release_border() {
  auto temp = unsafe_arena_release_border();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Polygon* PositionObject::unsafe_arena_release_border() {
  // @@protoc_insertion_point(field_release:RoadPB.PositionObject.border)
  _has_bits_[0] &= ~0x00000004u;
  ::RoadPB::Polygon* temp = border_;
  border_ = nullptr;
  return temp;
}
inline ::RoadPB::Polygon* PositionObject::_internal_mutable_border() {
  _has_bits_[0] |= 0x00000004u;
  if (border_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Polygon>(GetArena());
    border_ = p;
  }
  return border_;
}
inline ::RoadPB::Polygon* PositionObject::mutable_border() {
  // @@protoc_insertion_point(field_mutable:RoadPB.PositionObject.border)
  return _internal_mutable_border();
}
inline void PositionObject::set_allocated_border(::RoadPB::Polygon* border) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(border_);
  }
  if (border) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(border)->GetArena();
    if (message_arena != submessage_arena) {
      border = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, border, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  border_ = border;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.PositionObject.border)
}

// optional .RoadPB.Circle circle = 3;
inline bool PositionObject::_internal_has_circle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || circle_ != nullptr);
  return value;
}
inline bool PositionObject::has_circle() const {
  return _internal_has_circle();
}
inline const ::RoadPB::Circle& PositionObject::_internal_circle() const {
  const ::RoadPB::Circle* p = circle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Circle*>(
      &::RoadPB::_Circle_default_instance_);
}
inline const ::RoadPB::Circle& PositionObject::circle() const {
  // @@protoc_insertion_point(field_get:RoadPB.PositionObject.circle)
  return _internal_circle();
}
inline void PositionObject::unsafe_arena_set_allocated_circle(
    ::RoadPB::Circle* circle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(circle_);
  }
  circle_ = circle;
  if (circle) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.PositionObject.circle)
}
inline ::RoadPB::Circle* PositionObject::release_circle() {
  auto temp = unsafe_arena_release_circle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Circle* PositionObject::unsafe_arena_release_circle() {
  // @@protoc_insertion_point(field_release:RoadPB.PositionObject.circle)
  _has_bits_[0] &= ~0x00000008u;
  ::RoadPB::Circle* temp = circle_;
  circle_ = nullptr;
  return temp;
}
inline ::RoadPB::Circle* PositionObject::_internal_mutable_circle() {
  _has_bits_[0] |= 0x00000008u;
  if (circle_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Circle>(GetArena());
    circle_ = p;
  }
  return circle_;
}
inline ::RoadPB::Circle* PositionObject::mutable_circle() {
  // @@protoc_insertion_point(field_mutable:RoadPB.PositionObject.circle)
  return _internal_mutable_circle();
}
inline void PositionObject::set_allocated_circle(::RoadPB::Circle* circle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(circle_);
  }
  if (circle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(circle)->GetArena();
    if (message_arena != submessage_arena) {
      circle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, circle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  circle_ = circle;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.PositionObject.circle)
}

// optional .RoadPB.Polyline pole = 4;
inline bool PositionObject::_internal_has_pole() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || pole_ != nullptr);
  return value;
}
inline bool PositionObject::has_pole() const {
  return _internal_has_pole();
}
inline const ::RoadPB::Polyline& PositionObject::_internal_pole() const {
  const ::RoadPB::Polyline* p = pole_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Polyline*>(
      &::RoadPB::_Polyline_default_instance_);
}
inline const ::RoadPB::Polyline& PositionObject::pole() const {
  // @@protoc_insertion_point(field_get:RoadPB.PositionObject.pole)
  return _internal_pole();
}
inline void PositionObject::unsafe_arena_set_allocated_pole(
    ::RoadPB::Polyline* pole) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pole_);
  }
  pole_ = pole;
  if (pole) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.PositionObject.pole)
}
inline ::RoadPB::Polyline* PositionObject::release_pole() {
  auto temp = unsafe_arena_release_pole();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Polyline* PositionObject::unsafe_arena_release_pole() {
  // @@protoc_insertion_point(field_release:RoadPB.PositionObject.pole)
  _has_bits_[0] &= ~0x00000010u;
  ::RoadPB::Polyline* temp = pole_;
  pole_ = nullptr;
  return temp;
}
inline ::RoadPB::Polyline* PositionObject::_internal_mutable_pole() {
  _has_bits_[0] |= 0x00000010u;
  if (pole_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Polyline>(GetArena());
    pole_ = p;
  }
  return pole_;
}
inline ::RoadPB::Polyline* PositionObject::mutable_pole() {
  // @@protoc_insertion_point(field_mutable:RoadPB.PositionObject.pole)
  return _internal_mutable_pole();
}
inline void PositionObject::set_allocated_pole(::RoadPB::Polyline* pole) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pole_);
  }
  if (pole) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pole)->GetArena();
    if (message_arena != submessage_arena) {
      pole = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pole, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  pole_ = pole;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.PositionObject.pole)
}

// optional int32 type = 5;
inline bool PositionObject::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PositionObject::has_type() const {
  return _internal_has_type();
}
inline void PositionObject::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionObject::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionObject::type() const {
  // @@protoc_insertion_point(field_get:RoadPB.PositionObject.type)
  return _internal_type();
}
inline void PositionObject::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void PositionObject::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RoadPB.PositionObject.type)
}

// optional string content = 6;
inline bool PositionObject::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PositionObject::has_content() const {
  return _internal_has_content();
}
inline void PositionObject::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PositionObject::content() const {
  // @@protoc_insertion_point(field_get:RoadPB.PositionObject.content)
  return _internal_content();
}
inline void PositionObject::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:RoadPB.PositionObject.content)
}
inline std::string* PositionObject::mutable_content() {
  // @@protoc_insertion_point(field_mutable:RoadPB.PositionObject.content)
  return _internal_mutable_content();
}
inline const std::string& PositionObject::_internal_content() const {
  return content_.Get();
}
inline void PositionObject::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PositionObject::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoadPB.PositionObject.content)
}
inline void PositionObject::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoadPB.PositionObject.content)
}
inline void PositionObject::set_content(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoadPB.PositionObject.content)
}
inline std::string* PositionObject::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PositionObject::release_content() {
  // @@protoc_insertion_point(field_release:RoadPB.PositionObject.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionObject::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.PositionObject.content)
}
inline std::string* PositionObject::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoadPB.PositionObject.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PositionObject::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.PositionObject.content)
}

// repeated .RoadPB.FeatureID lane_groups = 7;
inline int PositionObject::_internal_lane_groups_size() const {
  return lane_groups_.size();
}
inline int PositionObject::lane_groups_size() const {
  return _internal_lane_groups_size();
}
inline ::RoadPB::FeatureID* PositionObject::mutable_lane_groups(int index) {
  // @@protoc_insertion_point(field_mutable:RoadPB.PositionObject.lane_groups)
  return lane_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >*
PositionObject::mutable_lane_groups() {
  // @@protoc_insertion_point(field_mutable_list:RoadPB.PositionObject.lane_groups)
  return &lane_groups_;
}
inline const ::RoadPB::FeatureID& PositionObject::_internal_lane_groups(int index) const {
  return lane_groups_.Get(index);
}
inline const ::RoadPB::FeatureID& PositionObject::lane_groups(int index) const {
  // @@protoc_insertion_point(field_get:RoadPB.PositionObject.lane_groups)
  return _internal_lane_groups(index);
}
inline ::RoadPB::FeatureID* PositionObject::_internal_add_lane_groups() {
  return lane_groups_.Add();
}
inline ::RoadPB::FeatureID* PositionObject::add_lane_groups() {
  // @@protoc_insertion_point(field_add:RoadPB.PositionObject.lane_groups)
  return _internal_add_lane_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >&
PositionObject::lane_groups() const {
  // @@protoc_insertion_point(field_list:RoadPB.PositionObject.lane_groups)
  return lane_groups_;
}

// optional int32 subtype = 8;
inline bool PositionObject::_internal_has_subtype() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PositionObject::has_subtype() const {
  return _internal_has_subtype();
}
inline void PositionObject::clear_subtype() {
  subtype_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionObject::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionObject::subtype() const {
  // @@protoc_insertion_point(field_get:RoadPB.PositionObject.subtype)
  return _internal_subtype();
}
inline void PositionObject::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  subtype_ = value;
}
inline void PositionObject::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:RoadPB.PositionObject.subtype)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace RoadPB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RoadPB::PositionObject_ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoadPB::PositionObject_ObjectType>() {
  return ::RoadPB::PositionObject_ObjectType_descriptor();
}
template <> struct is_proto_enum< ::RoadPB::PositionObject_ObjectSubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoadPB::PositionObject_ObjectSubType>() {
  return ::RoadPB::PositionObject_ObjectSubType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_position_2fposition_2eproto
