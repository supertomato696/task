// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: link/link.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_link_2flink_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_link_2flink_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metadata/metadata.pb.h"
#include "common/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_link_2flink_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_link_2flink_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_link_2flink_2eproto;
namespace RoadPB {
class Link;
class LinkDefaultTypeInternal;
extern LinkDefaultTypeInternal _Link_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
}  // namespace RoadPB
PROTOBUF_NAMESPACE_OPEN
template<> ::RoadPB::Link* Arena::CreateMaybeMessage<::RoadPB::Link>(Arena*);
template<> ::RoadPB::Node* Arena::CreateMaybeMessage<::RoadPB::Node>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RoadPB {

// ===================================================================

class Link PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.Link) */ {
 public:
  inline Link() : Link(nullptr) {};
  virtual ~Link();

  Link(const Link& from);
  Link(Link&& from) noexcept
    : Link() {
    *this = ::std::move(from);
  }

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }
  inline Link& operator=(Link&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Link& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Link* internal_default_instance() {
    return reinterpret_cast<const Link*>(
               &_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Link& a, Link& b) {
    a.Swap(&b);
  }
  inline void Swap(Link* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Link* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Link* New() const final {
    return CreateMaybeMessage<Link>(nullptr);
  }

  Link* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Link>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Link* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.Link";
  }
  protected:
  explicit Link(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_link_2flink_2eproto);
    return ::descriptor_table_link_2flink_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 45,
    kForwardGroupsFieldNumber = 50,
    kBackwardGroupsFieldNumber = 51,
    kIdFieldNumber = 1,
    kSnodeIdFieldNumber = 2,
    kEnodeIdFieldNumber = 3,
    kGeomFieldNumber = 23,
    kDirectionFieldNumber = 4,
    kLaneCountFieldNumber = 5,
    kLeftLanesFieldNumber = 6,
    kRightLanesFieldNumber = 7,
    kMultiplyDigitizedFieldNumber = 10,
    kLinkTypeFieldNumber = 11,
    kRoadClassFieldNumber = 12,
    kUrbanFlagFieldNumber = 13,
    kLinkLengthFieldNumber = 17,
    kRoadGradeFieldNumber = 40,
    kNetGradeFieldNumber = 41,
    kProvincecodeFieldNumber = 46,
    kPavementInfoFieldNumber = 47,
    kPassTypeFieldNumber = 48,
    kGradeFieldNumber = 49,
  };
  // repeated .RoadPB.LangName names = 45;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  ::RoadPB::LangName* mutable_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::LangName >*
      mutable_names();
  private:
  const ::RoadPB::LangName& _internal_names(int index) const;
  ::RoadPB::LangName* _internal_add_names();
  public:
  const ::RoadPB::LangName& names(int index) const;
  ::RoadPB::LangName* add_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::LangName >&
      names() const;

  // repeated .RoadPB.FeatureID forward_groups = 50;
  int forward_groups_size() const;
  private:
  int _internal_forward_groups_size() const;
  public:
  void clear_forward_groups();
  ::RoadPB::FeatureID* mutable_forward_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >*
      mutable_forward_groups();
  private:
  const ::RoadPB::FeatureID& _internal_forward_groups(int index) const;
  ::RoadPB::FeatureID* _internal_add_forward_groups();
  public:
  const ::RoadPB::FeatureID& forward_groups(int index) const;
  ::RoadPB::FeatureID* add_forward_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >&
      forward_groups() const;

  // repeated .RoadPB.FeatureID backward_groups = 51;
  int backward_groups_size() const;
  private:
  int _internal_backward_groups_size() const;
  public:
  void clear_backward_groups();
  ::RoadPB::FeatureID* mutable_backward_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >*
      mutable_backward_groups();
  private:
  const ::RoadPB::FeatureID& _internal_backward_groups(int index) const;
  ::RoadPB::FeatureID* _internal_add_backward_groups();
  public:
  const ::RoadPB::FeatureID& backward_groups(int index) const;
  ::RoadPB::FeatureID* add_backward_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >&
      backward_groups() const;

  // optional .RoadPB.FeatureID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::RoadPB::FeatureID& id() const;
  ::RoadPB::FeatureID* release_id();
  ::RoadPB::FeatureID* mutable_id();
  void set_allocated_id(::RoadPB::FeatureID* id);
  private:
  const ::RoadPB::FeatureID& _internal_id() const;
  ::RoadPB::FeatureID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::RoadPB::FeatureID* id);
  ::RoadPB::FeatureID* unsafe_arena_release_id();

  // optional .RoadPB.FeatureID snode_id = 2;
  bool has_snode_id() const;
  private:
  bool _internal_has_snode_id() const;
  public:
  void clear_snode_id();
  const ::RoadPB::FeatureID& snode_id() const;
  ::RoadPB::FeatureID* release_snode_id();
  ::RoadPB::FeatureID* mutable_snode_id();
  void set_allocated_snode_id(::RoadPB::FeatureID* snode_id);
  private:
  const ::RoadPB::FeatureID& _internal_snode_id() const;
  ::RoadPB::FeatureID* _internal_mutable_snode_id();
  public:
  void unsafe_arena_set_allocated_snode_id(
      ::RoadPB::FeatureID* snode_id);
  ::RoadPB::FeatureID* unsafe_arena_release_snode_id();

  // optional .RoadPB.FeatureID enode_id = 3;
  bool has_enode_id() const;
  private:
  bool _internal_has_enode_id() const;
  public:
  void clear_enode_id();
  const ::RoadPB::FeatureID& enode_id() const;
  ::RoadPB::FeatureID* release_enode_id();
  ::RoadPB::FeatureID* mutable_enode_id();
  void set_allocated_enode_id(::RoadPB::FeatureID* enode_id);
  private:
  const ::RoadPB::FeatureID& _internal_enode_id() const;
  ::RoadPB::FeatureID* _internal_mutable_enode_id();
  public:
  void unsafe_arena_set_allocated_enode_id(
      ::RoadPB::FeatureID* enode_id);
  ::RoadPB::FeatureID* unsafe_arena_release_enode_id();

  // optional .RoadPB.Polyline geom = 23;
  bool has_geom() const;
  private:
  bool _internal_has_geom() const;
  public:
  void clear_geom();
  const ::RoadPB::Polyline& geom() const;
  ::RoadPB::Polyline* release_geom();
  ::RoadPB::Polyline* mutable_geom();
  void set_allocated_geom(::RoadPB::Polyline* geom);
  private:
  const ::RoadPB::Polyline& _internal_geom() const;
  ::RoadPB::Polyline* _internal_mutable_geom();
  public:
  void unsafe_arena_set_allocated_geom(
      ::RoadPB::Polyline* geom);
  ::RoadPB::Polyline* unsafe_arena_release_geom();

  // optional int32 direction = 4;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lane_count = 5;
  bool has_lane_count() const;
  private:
  bool _internal_has_lane_count() const;
  public:
  void clear_lane_count();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_count() const;
  void set_lane_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_count() const;
  void _internal_set_lane_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 left_lanes = 6;
  bool has_left_lanes() const;
  private:
  bool _internal_has_left_lanes() const;
  public:
  void clear_left_lanes();
  ::PROTOBUF_NAMESPACE_ID::int32 left_lanes() const;
  void set_left_lanes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left_lanes() const;
  void _internal_set_left_lanes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 right_lanes = 7;
  bool has_right_lanes() const;
  private:
  bool _internal_has_right_lanes() const;
  public:
  void clear_right_lanes();
  ::PROTOBUF_NAMESPACE_ID::int32 right_lanes() const;
  void set_right_lanes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right_lanes() const;
  void _internal_set_right_lanes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 multiply_digitized = 10;
  bool has_multiply_digitized() const;
  private:
  bool _internal_has_multiply_digitized() const;
  public:
  void clear_multiply_digitized();
  ::PROTOBUF_NAMESPACE_ID::int32 multiply_digitized() const;
  void set_multiply_digitized(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiply_digitized() const;
  void _internal_set_multiply_digitized(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 link_type = 11;
  bool has_link_type() const;
  private:
  bool _internal_has_link_type() const;
  public:
  void clear_link_type();
  ::PROTOBUF_NAMESPACE_ID::int32 link_type() const;
  void set_link_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_link_type() const;
  void _internal_set_link_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 road_class = 12;
  bool has_road_class() const;
  private:
  bool _internal_has_road_class() const;
  public:
  void clear_road_class();
  ::PROTOBUF_NAMESPACE_ID::int32 road_class() const;
  void set_road_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_road_class() const;
  void _internal_set_road_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 urban_flag = 13;
  bool has_urban_flag() const;
  private:
  bool _internal_has_urban_flag() const;
  public:
  void clear_urban_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 urban_flag() const;
  void set_urban_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_urban_flag() const;
  void _internal_set_urban_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double link_length = 17;
  bool has_link_length() const;
  private:
  bool _internal_has_link_length() const;
  public:
  void clear_link_length();
  double link_length() const;
  void set_link_length(double value);
  private:
  double _internal_link_length() const;
  void _internal_set_link_length(double value);
  public:

  // optional int32 road_grade = 40;
  bool has_road_grade() const;
  private:
  bool _internal_has_road_grade() const;
  public:
  void clear_road_grade();
  ::PROTOBUF_NAMESPACE_ID::int32 road_grade() const;
  void set_road_grade(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_road_grade() const;
  void _internal_set_road_grade(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 net_grade = 41;
  bool has_net_grade() const;
  private:
  bool _internal_has_net_grade() const;
  public:
  void clear_net_grade();
  ::PROTOBUF_NAMESPACE_ID::int32 net_grade() const;
  void set_net_grade(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_net_grade() const;
  void _internal_set_net_grade(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .RoadPB.ProvinceCode provincecode = 46;
  bool has_provincecode() const;
  private:
  bool _internal_has_provincecode() const;
  public:
  void clear_provincecode();
  ::RoadPB::ProvinceCode provincecode() const;
  void set_provincecode(::RoadPB::ProvinceCode value);
  private:
  ::RoadPB::ProvinceCode _internal_provincecode() const;
  void _internal_set_provincecode(::RoadPB::ProvinceCode value);
  public:

  // optional int32 pavement_info = 47;
  bool has_pavement_info() const;
  private:
  bool _internal_has_pavement_info() const;
  public:
  void clear_pavement_info();
  ::PROTOBUF_NAMESPACE_ID::int32 pavement_info() const;
  void set_pavement_info(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pavement_info() const;
  void _internal_set_pavement_info(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pass_type = 48;
  bool has_pass_type() const;
  private:
  bool _internal_has_pass_type() const;
  public:
  void clear_pass_type();
  ::PROTOBUF_NAMESPACE_ID::int32 pass_type() const;
  void set_pass_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pass_type() const;
  void _internal_set_pass_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 grade = 49;
  bool has_grade() const;
  private:
  bool _internal_has_grade() const;
  public:
  void clear_grade();
  ::PROTOBUF_NAMESPACE_ID::int32 grade() const;
  void set_grade(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grade() const;
  void _internal_set_grade(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.Link)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::LangName > names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID > forward_groups_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID > backward_groups_;
  ::RoadPB::FeatureID* id_;
  ::RoadPB::FeatureID* snode_id_;
  ::RoadPB::FeatureID* enode_id_;
  ::RoadPB::Polyline* geom_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_lanes_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_lanes_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiply_digitized_;
  ::PROTOBUF_NAMESPACE_ID::int32 link_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 road_class_;
  ::PROTOBUF_NAMESPACE_ID::int32 urban_flag_;
  double link_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 road_grade_;
  ::PROTOBUF_NAMESPACE_ID::int32 net_grade_;
  int provincecode_;
  ::PROTOBUF_NAMESPACE_ID::int32 pavement_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 pass_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 grade_;
  friend struct ::TableStruct_link_2flink_2eproto;
};
// -------------------------------------------------------------------

class Node PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.Node) */ {
 public:
  inline Node() : Node(nullptr) {};
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_link_2flink_2eproto);
    return ::descriptor_table_link_2flink_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkIdsFieldNumber = 7,
    kIdFieldNumber = 1,
    kGeomFieldNumber = 2,
    kJunctionIdFieldNumber = 8,
  };
  // repeated .RoadPB.FeatureID link_ids = 7;
  int link_ids_size() const;
  private:
  int _internal_link_ids_size() const;
  public:
  void clear_link_ids();
  ::RoadPB::FeatureID* mutable_link_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >*
      mutable_link_ids();
  private:
  const ::RoadPB::FeatureID& _internal_link_ids(int index) const;
  ::RoadPB::FeatureID* _internal_add_link_ids();
  public:
  const ::RoadPB::FeatureID& link_ids(int index) const;
  ::RoadPB::FeatureID* add_link_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >&
      link_ids() const;

  // optional .RoadPB.FeatureID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::RoadPB::FeatureID& id() const;
  ::RoadPB::FeatureID* release_id();
  ::RoadPB::FeatureID* mutable_id();
  void set_allocated_id(::RoadPB::FeatureID* id);
  private:
  const ::RoadPB::FeatureID& _internal_id() const;
  ::RoadPB::FeatureID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::RoadPB::FeatureID* id);
  ::RoadPB::FeatureID* unsafe_arena_release_id();

  // optional .RoadPB.Point geom = 2;
  bool has_geom() const;
  private:
  bool _internal_has_geom() const;
  public:
  void clear_geom();
  const ::RoadPB::Point& geom() const;
  ::RoadPB::Point* release_geom();
  ::RoadPB::Point* mutable_geom();
  void set_allocated_geom(::RoadPB::Point* geom);
  private:
  const ::RoadPB::Point& _internal_geom() const;
  ::RoadPB::Point* _internal_mutable_geom();
  public:
  void unsafe_arena_set_allocated_geom(
      ::RoadPB::Point* geom);
  ::RoadPB::Point* unsafe_arena_release_geom();

  // optional .RoadPB.FeatureID junction_id = 8;
  bool has_junction_id() const;
  private:
  bool _internal_has_junction_id() const;
  public:
  void clear_junction_id();
  const ::RoadPB::FeatureID& junction_id() const;
  ::RoadPB::FeatureID* release_junction_id();
  ::RoadPB::FeatureID* mutable_junction_id();
  void set_allocated_junction_id(::RoadPB::FeatureID* junction_id);
  private:
  const ::RoadPB::FeatureID& _internal_junction_id() const;
  ::RoadPB::FeatureID* _internal_mutable_junction_id();
  public:
  void unsafe_arena_set_allocated_junction_id(
      ::RoadPB::FeatureID* junction_id);
  ::RoadPB::FeatureID* unsafe_arena_release_junction_id();

  // @@protoc_insertion_point(class_scope:RoadPB.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID > link_ids_;
  ::RoadPB::FeatureID* id_;
  ::RoadPB::Point* geom_;
  ::RoadPB::FeatureID* junction_id_;
  friend struct ::TableStruct_link_2flink_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Link

// optional .RoadPB.FeatureID id = 1;
inline bool Link::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool Link::has_id() const {
  return _internal_has_id();
}
inline const ::RoadPB::FeatureID& Link::_internal_id() const {
  const ::RoadPB::FeatureID* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::FeatureID*>(
      &::RoadPB::_FeatureID_default_instance_);
}
inline const ::RoadPB::FeatureID& Link::id() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.id)
  return _internal_id();
}
inline void Link::unsafe_arena_set_allocated_id(
    ::RoadPB::FeatureID* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Link.id)
}
inline ::RoadPB::FeatureID* Link::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::FeatureID* Link::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:RoadPB.Link.id)
  _has_bits_[0] &= ~0x00000001u;
  ::RoadPB::FeatureID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::RoadPB::FeatureID* Link::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::FeatureID>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::RoadPB::FeatureID* Link::mutable_id() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Link.id)
  return _internal_mutable_id();
}
inline void Link::set_allocated_id(::RoadPB::FeatureID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Link.id)
}

// optional .RoadPB.FeatureID snode_id = 2;
inline bool Link::_internal_has_snode_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || snode_id_ != nullptr);
  return value;
}
inline bool Link::has_snode_id() const {
  return _internal_has_snode_id();
}
inline const ::RoadPB::FeatureID& Link::_internal_snode_id() const {
  const ::RoadPB::FeatureID* p = snode_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::FeatureID*>(
      &::RoadPB::_FeatureID_default_instance_);
}
inline const ::RoadPB::FeatureID& Link::snode_id() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.snode_id)
  return _internal_snode_id();
}
inline void Link::unsafe_arena_set_allocated_snode_id(
    ::RoadPB::FeatureID* snode_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snode_id_);
  }
  snode_id_ = snode_id;
  if (snode_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Link.snode_id)
}
inline ::RoadPB::FeatureID* Link::release_snode_id() {
  auto temp = unsafe_arena_release_snode_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::FeatureID* Link::unsafe_arena_release_snode_id() {
  // @@protoc_insertion_point(field_release:RoadPB.Link.snode_id)
  _has_bits_[0] &= ~0x00000002u;
  ::RoadPB::FeatureID* temp = snode_id_;
  snode_id_ = nullptr;
  return temp;
}
inline ::RoadPB::FeatureID* Link::_internal_mutable_snode_id() {
  _has_bits_[0] |= 0x00000002u;
  if (snode_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::FeatureID>(GetArena());
    snode_id_ = p;
  }
  return snode_id_;
}
inline ::RoadPB::FeatureID* Link::mutable_snode_id() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Link.snode_id)
  return _internal_mutable_snode_id();
}
inline void Link::set_allocated_snode_id(::RoadPB::FeatureID* snode_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(snode_id_);
  }
  if (snode_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snode_id)->GetArena();
    if (message_arena != submessage_arena) {
      snode_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snode_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  snode_id_ = snode_id;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Link.snode_id)
}

// optional .RoadPB.FeatureID enode_id = 3;
inline bool Link::_internal_has_enode_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || enode_id_ != nullptr);
  return value;
}
inline bool Link::has_enode_id() const {
  return _internal_has_enode_id();
}
inline const ::RoadPB::FeatureID& Link::_internal_enode_id() const {
  const ::RoadPB::FeatureID* p = enode_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::FeatureID*>(
      &::RoadPB::_FeatureID_default_instance_);
}
inline const ::RoadPB::FeatureID& Link::enode_id() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.enode_id)
  return _internal_enode_id();
}
inline void Link::unsafe_arena_set_allocated_enode_id(
    ::RoadPB::FeatureID* enode_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enode_id_);
  }
  enode_id_ = enode_id;
  if (enode_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Link.enode_id)
}
inline ::RoadPB::FeatureID* Link::release_enode_id() {
  auto temp = unsafe_arena_release_enode_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::FeatureID* Link::unsafe_arena_release_enode_id() {
  // @@protoc_insertion_point(field_release:RoadPB.Link.enode_id)
  _has_bits_[0] &= ~0x00000004u;
  ::RoadPB::FeatureID* temp = enode_id_;
  enode_id_ = nullptr;
  return temp;
}
inline ::RoadPB::FeatureID* Link::_internal_mutable_enode_id() {
  _has_bits_[0] |= 0x00000004u;
  if (enode_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::FeatureID>(GetArena());
    enode_id_ = p;
  }
  return enode_id_;
}
inline ::RoadPB::FeatureID* Link::mutable_enode_id() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Link.enode_id)
  return _internal_mutable_enode_id();
}
inline void Link::set_allocated_enode_id(::RoadPB::FeatureID* enode_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enode_id_);
  }
  if (enode_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enode_id)->GetArena();
    if (message_arena != submessage_arena) {
      enode_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enode_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  enode_id_ = enode_id;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Link.enode_id)
}

// optional int32 direction = 4;
inline bool Link::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Link::has_direction() const {
  return _internal_has_direction();
}
inline void Link::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::direction() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.direction)
  return _internal_direction();
}
inline void Link::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  direction_ = value;
}
inline void Link::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.direction)
}

// optional int32 lane_count = 5;
inline bool Link::_internal_has_lane_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Link::has_lane_count() const {
  return _internal_has_lane_count();
}
inline void Link::clear_lane_count() {
  lane_count_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::_internal_lane_count() const {
  return lane_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::lane_count() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.lane_count)
  return _internal_lane_count();
}
inline void Link::_internal_set_lane_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  lane_count_ = value;
}
inline void Link::set_lane_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_count(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.lane_count)
}

// optional int32 left_lanes = 6;
inline bool Link::_internal_has_left_lanes() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Link::has_left_lanes() const {
  return _internal_has_left_lanes();
}
inline void Link::clear_left_lanes() {
  left_lanes_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::_internal_left_lanes() const {
  return left_lanes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::left_lanes() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.left_lanes)
  return _internal_left_lanes();
}
inline void Link::_internal_set_left_lanes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  left_lanes_ = value;
}
inline void Link::set_left_lanes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left_lanes(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.left_lanes)
}

// optional int32 right_lanes = 7;
inline bool Link::_internal_has_right_lanes() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Link::has_right_lanes() const {
  return _internal_has_right_lanes();
}
inline void Link::clear_right_lanes() {
  right_lanes_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::_internal_right_lanes() const {
  return right_lanes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::right_lanes() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.right_lanes)
  return _internal_right_lanes();
}
inline void Link::_internal_set_right_lanes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  right_lanes_ = value;
}
inline void Link::set_right_lanes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right_lanes(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.right_lanes)
}

// optional int32 multiply_digitized = 10;
inline bool Link::_internal_has_multiply_digitized() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Link::has_multiply_digitized() const {
  return _internal_has_multiply_digitized();
}
inline void Link::clear_multiply_digitized() {
  multiply_digitized_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::_internal_multiply_digitized() const {
  return multiply_digitized_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::multiply_digitized() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.multiply_digitized)
  return _internal_multiply_digitized();
}
inline void Link::_internal_set_multiply_digitized(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  multiply_digitized_ = value;
}
inline void Link::set_multiply_digitized(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiply_digitized(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.multiply_digitized)
}

// optional int32 link_type = 11;
inline bool Link::_internal_has_link_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Link::has_link_type() const {
  return _internal_has_link_type();
}
inline void Link::clear_link_type() {
  link_type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::_internal_link_type() const {
  return link_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::link_type() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.link_type)
  return _internal_link_type();
}
inline void Link::_internal_set_link_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  link_type_ = value;
}
inline void Link::set_link_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_link_type(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.link_type)
}

// optional int32 road_class = 12;
inline bool Link::_internal_has_road_class() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Link::has_road_class() const {
  return _internal_has_road_class();
}
inline void Link::clear_road_class() {
  road_class_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::_internal_road_class() const {
  return road_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::road_class() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.road_class)
  return _internal_road_class();
}
inline void Link::_internal_set_road_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  road_class_ = value;
}
inline void Link::set_road_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_road_class(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.road_class)
}

// optional int32 urban_flag = 13;
inline bool Link::_internal_has_urban_flag() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Link::has_urban_flag() const {
  return _internal_has_urban_flag();
}
inline void Link::clear_urban_flag() {
  urban_flag_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::_internal_urban_flag() const {
  return urban_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::urban_flag() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.urban_flag)
  return _internal_urban_flag();
}
inline void Link::_internal_set_urban_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  urban_flag_ = value;
}
inline void Link::set_urban_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_urban_flag(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.urban_flag)
}

// optional double link_length = 17;
inline bool Link::_internal_has_link_length() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Link::has_link_length() const {
  return _internal_has_link_length();
}
inline void Link::clear_link_length() {
  link_length_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double Link::_internal_link_length() const {
  return link_length_;
}
inline double Link::link_length() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.link_length)
  return _internal_link_length();
}
inline void Link::_internal_set_link_length(double value) {
  _has_bits_[0] |= 0x00001000u;
  link_length_ = value;
}
inline void Link::set_link_length(double value) {
  _internal_set_link_length(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.link_length)
}

// optional .RoadPB.Polyline geom = 23;
inline bool Link::_internal_has_geom() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || geom_ != nullptr);
  return value;
}
inline bool Link::has_geom() const {
  return _internal_has_geom();
}
inline const ::RoadPB::Polyline& Link::_internal_geom() const {
  const ::RoadPB::Polyline* p = geom_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Polyline*>(
      &::RoadPB::_Polyline_default_instance_);
}
inline const ::RoadPB::Polyline& Link::geom() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.geom)
  return _internal_geom();
}
inline void Link::unsafe_arena_set_allocated_geom(
    ::RoadPB::Polyline* geom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geom_);
  }
  geom_ = geom;
  if (geom) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Link.geom)
}
inline ::RoadPB::Polyline* Link::release_geom() {
  auto temp = unsafe_arena_release_geom();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Polyline* Link::unsafe_arena_release_geom() {
  // @@protoc_insertion_point(field_release:RoadPB.Link.geom)
  _has_bits_[0] &= ~0x00000008u;
  ::RoadPB::Polyline* temp = geom_;
  geom_ = nullptr;
  return temp;
}
inline ::RoadPB::Polyline* Link::_internal_mutable_geom() {
  _has_bits_[0] |= 0x00000008u;
  if (geom_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Polyline>(GetArena());
    geom_ = p;
  }
  return geom_;
}
inline ::RoadPB::Polyline* Link::mutable_geom() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Link.geom)
  return _internal_mutable_geom();
}
inline void Link::set_allocated_geom(::RoadPB::Polyline* geom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(geom_);
  }
  if (geom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geom)->GetArena();
    if (message_arena != submessage_arena) {
      geom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geom, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  geom_ = geom;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Link.geom)
}

// optional int32 road_grade = 40;
inline bool Link::_internal_has_road_grade() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Link::has_road_grade() const {
  return _internal_has_road_grade();
}
inline void Link::clear_road_grade() {
  road_grade_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::_internal_road_grade() const {
  return road_grade_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::road_grade() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.road_grade)
  return _internal_road_grade();
}
inline void Link::_internal_set_road_grade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  road_grade_ = value;
}
inline void Link::set_road_grade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_road_grade(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.road_grade)
}

// optional int32 net_grade = 41;
inline bool Link::_internal_has_net_grade() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Link::has_net_grade() const {
  return _internal_has_net_grade();
}
inline void Link::clear_net_grade() {
  net_grade_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::_internal_net_grade() const {
  return net_grade_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::net_grade() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.net_grade)
  return _internal_net_grade();
}
inline void Link::_internal_set_net_grade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  net_grade_ = value;
}
inline void Link::set_net_grade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_net_grade(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.net_grade)
}

// repeated .RoadPB.LangName names = 45;
inline int Link::_internal_names_size() const {
  return names_.size();
}
inline int Link::names_size() const {
  return _internal_names_size();
}
inline ::RoadPB::LangName* Link::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:RoadPB.Link.names)
  return names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::LangName >*
Link::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:RoadPB.Link.names)
  return &names_;
}
inline const ::RoadPB::LangName& Link::_internal_names(int index) const {
  return names_.Get(index);
}
inline const ::RoadPB::LangName& Link::names(int index) const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.names)
  return _internal_names(index);
}
inline ::RoadPB::LangName* Link::_internal_add_names() {
  return names_.Add();
}
inline ::RoadPB::LangName* Link::add_names() {
  // @@protoc_insertion_point(field_add:RoadPB.Link.names)
  return _internal_add_names();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::LangName >&
Link::names() const {
  // @@protoc_insertion_point(field_list:RoadPB.Link.names)
  return names_;
}

// optional .RoadPB.ProvinceCode provincecode = 46;
inline bool Link::_internal_has_provincecode() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Link::has_provincecode() const {
  return _internal_has_provincecode();
}
inline void Link::clear_provincecode() {
  provincecode_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::RoadPB::ProvinceCode Link::_internal_provincecode() const {
  return static_cast< ::RoadPB::ProvinceCode >(provincecode_);
}
inline ::RoadPB::ProvinceCode Link::provincecode() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.provincecode)
  return _internal_provincecode();
}
inline void Link::_internal_set_provincecode(::RoadPB::ProvinceCode value) {
  assert(::RoadPB::ProvinceCode_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  provincecode_ = value;
}
inline void Link::set_provincecode(::RoadPB::ProvinceCode value) {
  _internal_set_provincecode(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.provincecode)
}

// optional int32 pavement_info = 47;
inline bool Link::_internal_has_pavement_info() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Link::has_pavement_info() const {
  return _internal_has_pavement_info();
}
inline void Link::clear_pavement_info() {
  pavement_info_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::_internal_pavement_info() const {
  return pavement_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::pavement_info() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.pavement_info)
  return _internal_pavement_info();
}
inline void Link::_internal_set_pavement_info(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  pavement_info_ = value;
}
inline void Link::set_pavement_info(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pavement_info(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.pavement_info)
}

// optional int32 pass_type = 48;
inline bool Link::_internal_has_pass_type() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Link::has_pass_type() const {
  return _internal_has_pass_type();
}
inline void Link::clear_pass_type() {
  pass_type_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::_internal_pass_type() const {
  return pass_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::pass_type() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.pass_type)
  return _internal_pass_type();
}
inline void Link::_internal_set_pass_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  pass_type_ = value;
}
inline void Link::set_pass_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pass_type(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.pass_type)
}

// optional int32 grade = 49;
inline bool Link::_internal_has_grade() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Link::has_grade() const {
  return _internal_has_grade();
}
inline void Link::clear_grade() {
  grade_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::_internal_grade() const {
  return grade_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Link::grade() const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.grade)
  return _internal_grade();
}
inline void Link::_internal_set_grade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  grade_ = value;
}
inline void Link::set_grade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:RoadPB.Link.grade)
}

// repeated .RoadPB.FeatureID forward_groups = 50;
inline int Link::_internal_forward_groups_size() const {
  return forward_groups_.size();
}
inline int Link::forward_groups_size() const {
  return _internal_forward_groups_size();
}
inline ::RoadPB::FeatureID* Link::mutable_forward_groups(int index) {
  // @@protoc_insertion_point(field_mutable:RoadPB.Link.forward_groups)
  return forward_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >*
Link::mutable_forward_groups() {
  // @@protoc_insertion_point(field_mutable_list:RoadPB.Link.forward_groups)
  return &forward_groups_;
}
inline const ::RoadPB::FeatureID& Link::_internal_forward_groups(int index) const {
  return forward_groups_.Get(index);
}
inline const ::RoadPB::FeatureID& Link::forward_groups(int index) const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.forward_groups)
  return _internal_forward_groups(index);
}
inline ::RoadPB::FeatureID* Link::_internal_add_forward_groups() {
  return forward_groups_.Add();
}
inline ::RoadPB::FeatureID* Link::add_forward_groups() {
  // @@protoc_insertion_point(field_add:RoadPB.Link.forward_groups)
  return _internal_add_forward_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >&
Link::forward_groups() const {
  // @@protoc_insertion_point(field_list:RoadPB.Link.forward_groups)
  return forward_groups_;
}

// repeated .RoadPB.FeatureID backward_groups = 51;
inline int Link::_internal_backward_groups_size() const {
  return backward_groups_.size();
}
inline int Link::backward_groups_size() const {
  return _internal_backward_groups_size();
}
inline ::RoadPB::FeatureID* Link::mutable_backward_groups(int index) {
  // @@protoc_insertion_point(field_mutable:RoadPB.Link.backward_groups)
  return backward_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >*
Link::mutable_backward_groups() {
  // @@protoc_insertion_point(field_mutable_list:RoadPB.Link.backward_groups)
  return &backward_groups_;
}
inline const ::RoadPB::FeatureID& Link::_internal_backward_groups(int index) const {
  return backward_groups_.Get(index);
}
inline const ::RoadPB::FeatureID& Link::backward_groups(int index) const {
  // @@protoc_insertion_point(field_get:RoadPB.Link.backward_groups)
  return _internal_backward_groups(index);
}
inline ::RoadPB::FeatureID* Link::_internal_add_backward_groups() {
  return backward_groups_.Add();
}
inline ::RoadPB::FeatureID* Link::add_backward_groups() {
  // @@protoc_insertion_point(field_add:RoadPB.Link.backward_groups)
  return _internal_add_backward_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >&
Link::backward_groups() const {
  // @@protoc_insertion_point(field_list:RoadPB.Link.backward_groups)
  return backward_groups_;
}

// -------------------------------------------------------------------

// Node

// optional .RoadPB.FeatureID id = 1;
inline bool Node::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool Node::has_id() const {
  return _internal_has_id();
}
inline const ::RoadPB::FeatureID& Node::_internal_id() const {
  const ::RoadPB::FeatureID* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::FeatureID*>(
      &::RoadPB::_FeatureID_default_instance_);
}
inline const ::RoadPB::FeatureID& Node::id() const {
  // @@protoc_insertion_point(field_get:RoadPB.Node.id)
  return _internal_id();
}
inline void Node::unsafe_arena_set_allocated_id(
    ::RoadPB::FeatureID* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Node.id)
}
inline ::RoadPB::FeatureID* Node::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::FeatureID* Node::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:RoadPB.Node.id)
  _has_bits_[0] &= ~0x00000001u;
  ::RoadPB::FeatureID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::RoadPB::FeatureID* Node::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::FeatureID>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::RoadPB::FeatureID* Node::mutable_id() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Node.id)
  return _internal_mutable_id();
}
inline void Node::set_allocated_id(::RoadPB::FeatureID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Node.id)
}

// optional .RoadPB.Point geom = 2;
inline bool Node::_internal_has_geom() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || geom_ != nullptr);
  return value;
}
inline bool Node::has_geom() const {
  return _internal_has_geom();
}
inline const ::RoadPB::Point& Node::_internal_geom() const {
  const ::RoadPB::Point* p = geom_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Point*>(
      &::RoadPB::_Point_default_instance_);
}
inline const ::RoadPB::Point& Node::geom() const {
  // @@protoc_insertion_point(field_get:RoadPB.Node.geom)
  return _internal_geom();
}
inline void Node::unsafe_arena_set_allocated_geom(
    ::RoadPB::Point* geom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geom_);
  }
  geom_ = geom;
  if (geom) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Node.geom)
}
inline ::RoadPB::Point* Node::release_geom() {
  auto temp = unsafe_arena_release_geom();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Point* Node::unsafe_arena_release_geom() {
  // @@protoc_insertion_point(field_release:RoadPB.Node.geom)
  _has_bits_[0] &= ~0x00000002u;
  ::RoadPB::Point* temp = geom_;
  geom_ = nullptr;
  return temp;
}
inline ::RoadPB::Point* Node::_internal_mutable_geom() {
  _has_bits_[0] |= 0x00000002u;
  if (geom_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Point>(GetArena());
    geom_ = p;
  }
  return geom_;
}
inline ::RoadPB::Point* Node::mutable_geom() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Node.geom)
  return _internal_mutable_geom();
}
inline void Node::set_allocated_geom(::RoadPB::Point* geom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(geom_);
  }
  if (geom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geom)->GetArena();
    if (message_arena != submessage_arena) {
      geom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geom, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  geom_ = geom;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Node.geom)
}

// repeated .RoadPB.FeatureID link_ids = 7;
inline int Node::_internal_link_ids_size() const {
  return link_ids_.size();
}
inline int Node::link_ids_size() const {
  return _internal_link_ids_size();
}
inline ::RoadPB::FeatureID* Node::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:RoadPB.Node.link_ids)
  return link_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >*
Node::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:RoadPB.Node.link_ids)
  return &link_ids_;
}
inline const ::RoadPB::FeatureID& Node::_internal_link_ids(int index) const {
  return link_ids_.Get(index);
}
inline const ::RoadPB::FeatureID& Node::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:RoadPB.Node.link_ids)
  return _internal_link_ids(index);
}
inline ::RoadPB::FeatureID* Node::_internal_add_link_ids() {
  return link_ids_.Add();
}
inline ::RoadPB::FeatureID* Node::add_link_ids() {
  // @@protoc_insertion_point(field_add:RoadPB.Node.link_ids)
  return _internal_add_link_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >&
Node::link_ids() const {
  // @@protoc_insertion_point(field_list:RoadPB.Node.link_ids)
  return link_ids_;
}

// optional .RoadPB.FeatureID junction_id = 8;
inline bool Node::_internal_has_junction_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || junction_id_ != nullptr);
  return value;
}
inline bool Node::has_junction_id() const {
  return _internal_has_junction_id();
}
inline const ::RoadPB::FeatureID& Node::_internal_junction_id() const {
  const ::RoadPB::FeatureID* p = junction_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::FeatureID*>(
      &::RoadPB::_FeatureID_default_instance_);
}
inline const ::RoadPB::FeatureID& Node::junction_id() const {
  // @@protoc_insertion_point(field_get:RoadPB.Node.junction_id)
  return _internal_junction_id();
}
inline void Node::unsafe_arena_set_allocated_junction_id(
    ::RoadPB::FeatureID* junction_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(junction_id_);
  }
  junction_id_ = junction_id;
  if (junction_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Node.junction_id)
}
inline ::RoadPB::FeatureID* Node::release_junction_id() {
  auto temp = unsafe_arena_release_junction_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::FeatureID* Node::unsafe_arena_release_junction_id() {
  // @@protoc_insertion_point(field_release:RoadPB.Node.junction_id)
  _has_bits_[0] &= ~0x00000004u;
  ::RoadPB::FeatureID* temp = junction_id_;
  junction_id_ = nullptr;
  return temp;
}
inline ::RoadPB::FeatureID* Node::_internal_mutable_junction_id() {
  _has_bits_[0] |= 0x00000004u;
  if (junction_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::FeatureID>(GetArena());
    junction_id_ = p;
  }
  return junction_id_;
}
inline ::RoadPB::FeatureID* Node::mutable_junction_id() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Node.junction_id)
  return _internal_mutable_junction_id();
}
inline void Node::set_allocated_junction_id(::RoadPB::FeatureID* junction_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(junction_id_);
  }
  if (junction_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(junction_id)->GetArena();
    if (message_arena != submessage_arena) {
      junction_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, junction_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  junction_id_ = junction_id;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Node.junction_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RoadPB

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_link_2flink_2eproto
