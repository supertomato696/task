// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamics/odd.proto

#include "dynamics/odd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Circle_common_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dynamics_2fodd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Dynamic_Relation_dynamics_2fodd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metadata_2fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeatureID_metadata_2fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_common_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_common_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polyline_common_2fcommon_2eproto;
namespace RoadPB {
class Dynamic_RelationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dynamic_Relation> _instance;
} _Dynamic_Relation_default_instance_;
class DynamicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dynamic> _instance;
} _Dynamic_default_instance_;
}  // namespace RoadPB
static void InitDefaultsscc_info_Dynamic_dynamics_2fodd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadPB::_Dynamic_default_instance_;
    new (ptr) ::RoadPB::Dynamic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadPB::Dynamic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Dynamic_dynamics_2fodd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Dynamic_dynamics_2fodd_2eproto}, {
      &scc_info_FeatureID_metadata_2fmetadata_2eproto.base,
      &scc_info_Circle_common_2fcommon_2eproto.base,
      &scc_info_Polyline_common_2fcommon_2eproto.base,
      &scc_info_Polygon_common_2fcommon_2eproto.base,
      &scc_info_Dynamic_Relation_dynamics_2fodd_2eproto.base,}};

static void InitDefaultsscc_info_Dynamic_Relation_dynamics_2fodd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadPB::_Dynamic_Relation_default_instance_;
    new (ptr) ::RoadPB::Dynamic_Relation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadPB::Dynamic_Relation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Dynamic_Relation_dynamics_2fodd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Dynamic_Relation_dynamics_2fodd_2eproto}, {
      &scc_info_FeatureID_metadata_2fmetadata_2eproto.base,
      &scc_info_Point_common_2fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dynamics_2fodd_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dynamics_2fodd_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dynamics_2fodd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dynamics_2fodd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic_Relation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic_Relation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic_Relation, id_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic_Relation, stp_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic_Relation, edp_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, id_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, is_odd_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, range_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, lines_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, area_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, relation_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, heading_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, reason_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, action_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, int_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, double_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, binary_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Dynamic, tags_),
  1,
  6,
  2,
  3,
  4,
  5,
  10,
  7,
  8,
  9,
  11,
  12,
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::RoadPB::Dynamic_Relation)},
  { 11, 30, sizeof(::RoadPB::Dynamic)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_Dynamic_Relation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_Dynamic_default_instance_),
};

const char descriptor_table_protodef_dynamics_2fodd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022dynamics/odd.proto\022\006RoadPB\032\027metadata/m"
  "etadata.proto\032\023common/common.proto\"\270\004\n\007D"
  "ynamic\022\035\n\002id\030\001 \001(\0132\021.RoadPB.FeatureID\022\016\n"
  "\006is_odd\030\002 \001(\010\022\035\n\005range\030\003 \001(\0132\016.RoadPB.Ci"
  "rcle\022\037\n\005lines\030\004 \001(\0132\020.RoadPB.Polyline\022\035\n"
  "\004area\030\005 \001(\0132\017.RoadPB.Polygon\022*\n\010relation"
  "\030\006 \001(\0132\030.RoadPB.Dynamic.Relation\022\017\n\007head"
  "ing\030\n \001(\002\022\014\n\004type\030\007 \001(\005\022\016\n\006reason\030\010 \001(\003\022"
  "\016\n\006action\030\t \001(\005\022\017\n\007int_val\030\013 \001(\003\022\022\n\ndoub"
  "le_val\030\014 \001(\001\022\022\n\nbinary_val\030\r \001(\014\022\014\n\004tags"
  "\030\016 \003(\t\032a\n\010Relation\022\035\n\002id\030\001 \001(\0132\021.RoadPB."
  "FeatureID\022\032\n\003stp\030\002 \001(\0132\r.RoadPB.Point\022\032\n"
  "\003edp\030\003 \001(\0132\r.RoadPB.Point\"\211\001\n\014DYNAMIC_TY"
  "PE\022\022\n\016STATIC_NOT_ODD\020\001\022\032\n\026PATCH_HIGH_SPE"
  "ED_LIMIT\020\003\022\031\n\025PATCH_LOW_SPEED_LIMIT\020\004\022\030\n"
  "\024PATCH_LANE_LINE_TYPE\020\005\022\024\n\020PATCH_DRIVE_L"
  "INE\020\006"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dynamics_2fodd_2eproto_deps[2] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_metadata_2fmetadata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dynamics_2fodd_2eproto_sccs[2] = {
  &scc_info_Dynamic_dynamics_2fodd_2eproto.base,
  &scc_info_Dynamic_Relation_dynamics_2fodd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dynamics_2fodd_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dynamics_2fodd_2eproto = {
  false, false, descriptor_table_protodef_dynamics_2fodd_2eproto, "dynamics/odd.proto", 645,
  &descriptor_table_dynamics_2fodd_2eproto_once, descriptor_table_dynamics_2fodd_2eproto_sccs, descriptor_table_dynamics_2fodd_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_dynamics_2fodd_2eproto::offsets,
  file_level_metadata_dynamics_2fodd_2eproto, 2, file_level_enum_descriptors_dynamics_2fodd_2eproto, file_level_service_descriptors_dynamics_2fodd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dynamics_2fodd_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dynamics_2fodd_2eproto)), true);
namespace RoadPB {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dynamic_DYNAMIC_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dynamics_2fodd_2eproto);
  return file_level_enum_descriptors_dynamics_2fodd_2eproto[0];
}
bool Dynamic_DYNAMIC_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Dynamic_DYNAMIC_TYPE Dynamic::STATIC_NOT_ODD;
constexpr Dynamic_DYNAMIC_TYPE Dynamic::PATCH_HIGH_SPEED_LIMIT;
constexpr Dynamic_DYNAMIC_TYPE Dynamic::PATCH_LOW_SPEED_LIMIT;
constexpr Dynamic_DYNAMIC_TYPE Dynamic::PATCH_LANE_LINE_TYPE;
constexpr Dynamic_DYNAMIC_TYPE Dynamic::PATCH_DRIVE_LINE;
constexpr Dynamic_DYNAMIC_TYPE Dynamic::DYNAMIC_TYPE_MIN;
constexpr Dynamic_DYNAMIC_TYPE Dynamic::DYNAMIC_TYPE_MAX;
constexpr int Dynamic::DYNAMIC_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Dynamic_Relation::InitAsDefaultInstance() {
  ::RoadPB::_Dynamic_Relation_default_instance_._instance.get_mutable()->id_ = const_cast< ::RoadPB::FeatureID*>(
      ::RoadPB::FeatureID::internal_default_instance());
  ::RoadPB::_Dynamic_Relation_default_instance_._instance.get_mutable()->stp_ = const_cast< ::RoadPB::Point*>(
      ::RoadPB::Point::internal_default_instance());
  ::RoadPB::_Dynamic_Relation_default_instance_._instance.get_mutable()->edp_ = const_cast< ::RoadPB::Point*>(
      ::RoadPB::Point::internal_default_instance());
}
class Dynamic_Relation::_Internal {
 public:
  using HasBits = decltype(std::declval<Dynamic_Relation>()._has_bits_);
  static const ::RoadPB::FeatureID& id(const Dynamic_Relation* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::RoadPB::Point& stp(const Dynamic_Relation* msg);
  static void set_has_stp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::RoadPB::Point& edp(const Dynamic_Relation* msg);
  static void set_has_edp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::RoadPB::FeatureID&
Dynamic_Relation::_Internal::id(const Dynamic_Relation* msg) {
  return *msg->id_;
}
const ::RoadPB::Point&
Dynamic_Relation::_Internal::stp(const Dynamic_Relation* msg) {
  return *msg->stp_;
}
const ::RoadPB::Point&
Dynamic_Relation::_Internal::edp(const Dynamic_Relation* msg) {
  return *msg->edp_;
}
void Dynamic_Relation::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Dynamic_Relation::clear_stp() {
  if (stp_ != nullptr) stp_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Dynamic_Relation::clear_edp() {
  if (edp_ != nullptr) edp_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Dynamic_Relation::Dynamic_Relation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadPB.Dynamic.Relation)
}
Dynamic_Relation::Dynamic_Relation(const Dynamic_Relation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::RoadPB::FeatureID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_stp()) {
    stp_ = new ::RoadPB::Point(*from.stp_);
  } else {
    stp_ = nullptr;
  }
  if (from._internal_has_edp()) {
    edp_ = new ::RoadPB::Point(*from.edp_);
  } else {
    edp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RoadPB.Dynamic.Relation)
}

void Dynamic_Relation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dynamic_Relation_dynamics_2fodd_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(edp_));
}

Dynamic_Relation::~Dynamic_Relation() {
  // @@protoc_insertion_point(destructor:RoadPB.Dynamic.Relation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Dynamic_Relation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete stp_;
  if (this != internal_default_instance()) delete edp_;
}

void Dynamic_Relation::ArenaDtor(void* object) {
  Dynamic_Relation* _this = reinterpret_cast< Dynamic_Relation* >(object);
  (void)_this;
}
void Dynamic_Relation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dynamic_Relation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dynamic_Relation& Dynamic_Relation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dynamic_Relation_dynamics_2fodd_2eproto.base);
  return *internal_default_instance();
}


void Dynamic_Relation::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.Dynamic.Relation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stp_ != nullptr);
      stp_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(edp_ != nullptr);
      edp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dynamic_Relation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .RoadPB.FeatureID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Point stp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Point edp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_edp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dynamic_Relation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.Dynamic.Relation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RoadPB.FeatureID id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .RoadPB.Point stp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stp(this), target, stream);
  }

  // optional .RoadPB.Point edp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::edp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.Dynamic.Relation)
  return target;
}

size_t Dynamic_Relation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.Dynamic.Relation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .RoadPB.FeatureID id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .RoadPB.Point stp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stp_);
    }

    // optional .RoadPB.Point edp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *edp_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dynamic_Relation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadPB.Dynamic.Relation)
  GOOGLE_DCHECK_NE(&from, this);
  const Dynamic_Relation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dynamic_Relation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadPB.Dynamic.Relation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadPB.Dynamic.Relation)
    MergeFrom(*source);
  }
}

void Dynamic_Relation::MergeFrom(const Dynamic_Relation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.Dynamic.Relation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::RoadPB::FeatureID::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stp()->::RoadPB::Point::MergeFrom(from._internal_stp());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_edp()->::RoadPB::Point::MergeFrom(from._internal_edp());
    }
  }
}

void Dynamic_Relation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadPB.Dynamic.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dynamic_Relation::CopyFrom(const Dynamic_Relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.Dynamic.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dynamic_Relation::IsInitialized() const {
  return true;
}

void Dynamic_Relation::InternalSwap(Dynamic_Relation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dynamic_Relation, edp_)
      + sizeof(Dynamic_Relation::edp_)
      - PROTOBUF_FIELD_OFFSET(Dynamic_Relation, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dynamic_Relation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dynamic::InitAsDefaultInstance() {
  ::RoadPB::_Dynamic_default_instance_._instance.get_mutable()->id_ = const_cast< ::RoadPB::FeatureID*>(
      ::RoadPB::FeatureID::internal_default_instance());
  ::RoadPB::_Dynamic_default_instance_._instance.get_mutable()->range_ = const_cast< ::RoadPB::Circle*>(
      ::RoadPB::Circle::internal_default_instance());
  ::RoadPB::_Dynamic_default_instance_._instance.get_mutable()->lines_ = const_cast< ::RoadPB::Polyline*>(
      ::RoadPB::Polyline::internal_default_instance());
  ::RoadPB::_Dynamic_default_instance_._instance.get_mutable()->area_ = const_cast< ::RoadPB::Polygon*>(
      ::RoadPB::Polygon::internal_default_instance());
  ::RoadPB::_Dynamic_default_instance_._instance.get_mutable()->relation_ = const_cast< ::RoadPB::Dynamic_Relation*>(
      ::RoadPB::Dynamic_Relation::internal_default_instance());
}
class Dynamic::_Internal {
 public:
  using HasBits = decltype(std::declval<Dynamic>()._has_bits_);
  static const ::RoadPB::FeatureID& id(const Dynamic* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_odd(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::RoadPB::Circle& range(const Dynamic* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::RoadPB::Polyline& lines(const Dynamic* msg);
  static void set_has_lines(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::RoadPB::Polygon& area(const Dynamic* msg);
  static void set_has_area(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::RoadPB::Dynamic_Relation& relation(const Dynamic* msg);
  static void set_has_relation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_int_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_double_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_binary_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::RoadPB::FeatureID&
Dynamic::_Internal::id(const Dynamic* msg) {
  return *msg->id_;
}
const ::RoadPB::Circle&
Dynamic::_Internal::range(const Dynamic* msg) {
  return *msg->range_;
}
const ::RoadPB::Polyline&
Dynamic::_Internal::lines(const Dynamic* msg) {
  return *msg->lines_;
}
const ::RoadPB::Polygon&
Dynamic::_Internal::area(const Dynamic* msg) {
  return *msg->area_;
}
const ::RoadPB::Dynamic_Relation&
Dynamic::_Internal::relation(const Dynamic* msg) {
  return *msg->relation_;
}
void Dynamic::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Dynamic::clear_range() {
  if (range_ != nullptr) range_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Dynamic::clear_lines() {
  if (lines_ != nullptr) lines_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Dynamic::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Dynamic::Dynamic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadPB.Dynamic)
}
Dynamic::Dynamic(const Dynamic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  binary_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_binary_val()) {
    binary_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_binary_val(),
      GetArena());
  }
  if (from._internal_has_id()) {
    id_ = new ::RoadPB::FeatureID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_range()) {
    range_ = new ::RoadPB::Circle(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from._internal_has_lines()) {
    lines_ = new ::RoadPB::Polyline(*from.lines_);
  } else {
    lines_ = nullptr;
  }
  if (from._internal_has_area()) {
    area_ = new ::RoadPB::Polygon(*from.area_);
  } else {
    area_ = nullptr;
  }
  if (from._internal_has_relation()) {
    relation_ = new ::RoadPB::Dynamic_Relation(*from.relation_);
  } else {
    relation_ = nullptr;
  }
  ::memcpy(&is_odd_, &from.is_odd_,
    static_cast<size_t>(reinterpret_cast<char*>(&double_val_) -
    reinterpret_cast<char*>(&is_odd_)) + sizeof(double_val_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.Dynamic)
}

void Dynamic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dynamic_dynamics_2fodd_2eproto.base);
  binary_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&double_val_) -
      reinterpret_cast<char*>(&id_)) + sizeof(double_val_));
}

Dynamic::~Dynamic() {
  // @@protoc_insertion_point(destructor:RoadPB.Dynamic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Dynamic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  binary_val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete lines_;
  if (this != internal_default_instance()) delete area_;
  if (this != internal_default_instance()) delete relation_;
}

void Dynamic::ArenaDtor(void* object) {
  Dynamic* _this = reinterpret_cast< Dynamic* >(object);
  (void)_this;
}
void Dynamic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dynamic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dynamic& Dynamic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dynamic_dynamics_2fodd_2eproto.base);
  return *internal_default_instance();
}


void Dynamic::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.Dynamic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      binary_val_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(range_ != nullptr);
      range_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(lines_ != nullptr);
      lines_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(area_ != nullptr);
      area_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(relation_ != nullptr);
      relation_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&is_odd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&is_odd_)) + sizeof(type_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&reason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&double_val_) -
        reinterpret_cast<char*>(&reason_)) + sizeof(double_val_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dynamic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .RoadPB.FeatureID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_odd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_odd(&has_bits);
          is_odd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Circle range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Polyline lines = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lines(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Polygon area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Dynamic.Relation relation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 reason = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 action = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_action(&has_bits);
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float heading = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 int_val = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_int_val(&has_bits);
          int_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double double_val = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_double_val(&has_bits);
          double_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bytes binary_val = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_binary_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.Dynamic.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dynamic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.Dynamic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RoadPB.FeatureID id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional bool is_odd = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_odd(), target);
  }

  // optional .RoadPB.Circle range = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::range(this), target, stream);
  }

  // optional .RoadPB.Polyline lines = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lines(this), target, stream);
  }

  // optional .RoadPB.Polygon area = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::area(this), target, stream);
  }

  // optional .RoadPB.Dynamic.Relation relation = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::relation(this), target, stream);
  }

  // optional int32 type = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_type(), target);
  }

  // optional int64 reason = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_reason(), target);
  }

  // optional int32 action = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_action(), target);
  }

  // optional float heading = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_heading(), target);
  }

  // optional int64 int_val = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_int_val(), target);
  }

  // optional double double_val = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_double_val(), target);
  }

  // optional bytes binary_val = 13;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_binary_val(), target);
  }

  // repeated string tags = 14;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.Dynamic.tags");
    target = stream->WriteString(14, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.Dynamic)
  return target;
}

size_t Dynamic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.Dynamic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes binary_val = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_binary_val());
    }

    // optional .RoadPB.FeatureID id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .RoadPB.Circle range = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_);
    }

    // optional .RoadPB.Polyline lines = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lines_);
    }

    // optional .RoadPB.Polygon area = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *area_);
    }

    // optional .RoadPB.Dynamic.Relation relation = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relation_);
    }

    // optional bool is_odd = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 type = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int64 reason = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_reason());
    }

    // optional int32 action = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_action());
    }

    // optional float heading = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional int64 int_val = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int_val());
    }

    // optional double double_val = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dynamic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadPB.Dynamic)
  GOOGLE_DCHECK_NE(&from, this);
  const Dynamic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dynamic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadPB.Dynamic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadPB.Dynamic)
    MergeFrom(*source);
  }
}

void Dynamic::MergeFrom(const Dynamic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.Dynamic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_binary_val(from._internal_binary_val());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_id()->::RoadPB::FeatureID::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_range()->::RoadPB::Circle::MergeFrom(from._internal_range());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_lines()->::RoadPB::Polyline::MergeFrom(from._internal_lines());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_area()->::RoadPB::Polygon::MergeFrom(from._internal_area());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_relation()->::RoadPB::Dynamic_Relation::MergeFrom(from._internal_relation());
    }
    if (cached_has_bits & 0x00000040u) {
      is_odd_ = from.is_odd_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000200u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000400u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000800u) {
      int_val_ = from.int_val_;
    }
    if (cached_has_bits & 0x00001000u) {
      double_val_ = from.double_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dynamic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadPB.Dynamic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dynamic::CopyFrom(const Dynamic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.Dynamic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dynamic::IsInitialized() const {
  return true;
}

void Dynamic::InternalSwap(Dynamic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(&other->tags_);
  binary_val_.Swap(&other->binary_val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dynamic, double_val_)
      + sizeof(Dynamic::double_val_)
      - PROTOBUF_FIELD_OFFSET(Dynamic, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dynamic::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RoadPB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RoadPB::Dynamic_Relation* Arena::CreateMaybeMessage< ::RoadPB::Dynamic_Relation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::Dynamic_Relation >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::Dynamic* Arena::CreateMaybeMessage< ::RoadPB::Dynamic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::Dynamic >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
