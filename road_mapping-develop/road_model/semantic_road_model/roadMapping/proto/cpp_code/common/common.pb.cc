// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/common.proto

#include "common/common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace RoadPB {
constexpr LangName::LangName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lang_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LangNameDefaultTypeInternal {
  constexpr LangNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LangNameDefaultTypeInternal() {}
  union {
    LangName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LangNameDefaultTypeInternal _LangName_default_instance_;
constexpr Point::Point(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct PointDefaultTypeInternal {
  constexpr PointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointDefaultTypeInternal _Point_default_instance_;
constexpr Polyline::Polyline(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pts_()
  , width_(0)
  , height_(0){}
struct PolylineDefaultTypeInternal {
  constexpr PolylineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolylineDefaultTypeInternal() {}
  union {
    Polyline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolylineDefaultTypeInternal _Polyline_default_instance_;
constexpr Polygon::Polygon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pts_()
  , normal_(nullptr)
  , orientation_(nullptr)
  , edge_width_(0){}
struct PolygonDefaultTypeInternal {
  constexpr PolygonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolygonDefaultTypeInternal() {}
  union {
    Polygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolygonDefaultTypeInternal _Polygon_default_instance_;
constexpr Circle::Circle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_(nullptr)
  , normal_(nullptr)
  , radius_(0)
  , edge_width_(0){}
struct CircleDefaultTypeInternal {
  constexpr CircleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CircleDefaultTypeInternal() {}
  union {
    Circle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CircleDefaultTypeInternal _Circle_default_instance_;
constexpr Cylinder::Cylinder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , radius_(0){}
struct CylinderDefaultTypeInternal {
  constexpr CylinderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CylinderDefaultTypeInternal() {}
  union {
    Cylinder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CylinderDefaultTypeInternal _Cylinder_default_instance_;
constexpr BoundingBox::BoundingBox(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_pt_(nullptr)
  , max_pt_(nullptr){}
struct BoundingBoxDefaultTypeInternal {
  constexpr BoundingBoxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoundingBoxDefaultTypeInternal() {}
  union {
    BoundingBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
constexpr AttributeValue::AttributeValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vru_val_(0)
  , oppo_val_(0)
  , multi_digitized_val_(0)
  , vari_speed_limit_val_(0)
  , overhead_obstruct_val_(0)
  , infra_sep_l_val_(0)
  , infra_sep_r_val_(0)
  , median_left_val_(0)
  , median_width_l_val_(0)
  , median_width_r_val_(0)
  , median_right_val_(0)
  , median_surface_l_val_(0)
  , median_surface_r_val_(0)
  , link_type_val_(0)
  , link_kind_val_(0)
  , pavement_val_(0)
  , lane_type_val_(0)
  , lane_kind_val_(0)
  , lane_width_val_(0)
  , lane_height_limit_val_(0)
  , lane_weight_limit_val_(0)
  , lane_width_limit_val_(0)
  , lane_bound_kind_val_(0)
  , lane_bound_color_val_(0)
  , lane_bound_material_val_(0)
  , road_bound_kind_val_(0){}
struct AttributeValueDefaultTypeInternal {
  constexpr AttributeValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AttributeValueDefaultTypeInternal() {}
  union {
    AttributeValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AttributeValueDefaultTypeInternal _AttributeValue_default_instance_;
constexpr RangeAttribute::RangeAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : geom_(nullptr)
  , start_val_(nullptr)
  , end_val_(nullptr)
  , attribute_len_(0)
  , type_(0)
{}
struct RangeAttributeDefaultTypeInternal {
  constexpr RangeAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeAttributeDefaultTypeInternal() {}
  union {
    RangeAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeAttributeDefaultTypeInternal _RangeAttribute_default_instance_;
constexpr FixedSpeedLimit::FixedSpeedLimit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : valid_period_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vehicle_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , geom_(nullptr)
  , direction_(0)
  , max_speed_(0)
  , max_source_(0)
  , min_speed_(0)
  , min_source_(0){}
struct FixedSpeedLimitDefaultTypeInternal {
  constexpr FixedSpeedLimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FixedSpeedLimitDefaultTypeInternal() {}
  union {
    FixedSpeedLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FixedSpeedLimitDefaultTypeInternal _FixedSpeedLimit_default_instance_;
constexpr CondSpeedLimit::CondSpeedLimit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : valid_period_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vehicle_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , geom_(nullptr)
  , direction_(0)
  , cond_type_(0)
  , attribute_len_(0)
  , cond_speed_limit_(0){}
struct CondSpeedLimitDefaultTypeInternal {
  constexpr CondSpeedLimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CondSpeedLimitDefaultTypeInternal() {}
  union {
    CondSpeedLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CondSpeedLimitDefaultTypeInternal _CondSpeedLimit_default_instance_;
}  // namespace RoadPB
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2fcommon_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2fcommon_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2fcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RoadPB::LangName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::LangName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::LangName, name_type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::LangName, lang_code_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::LangName, name_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::RoadPB::Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::Point, x_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Point, y_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Point, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::RoadPB::Polyline, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Polyline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::Polyline, pts_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Polyline, width_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Polyline, height_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::RoadPB::Polygon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::Polygon, pts_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Polygon, normal_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Polygon, edge_width_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Polygon, orientation_),
  ~0u,
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::RoadPB::Circle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Circle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::Circle, center_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Circle, normal_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Circle, radius_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Circle, edge_width_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::RoadPB::Cylinder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Cylinder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::Cylinder, points_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Cylinder, radius_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::RoadPB::BoundingBox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::BoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::BoundingBox, min_pt_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::BoundingBox, max_pt_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, vru_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, oppo_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, multi_digitized_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, vari_speed_limit_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, overhead_obstruct_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, infra_sep_l_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, infra_sep_r_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, median_left_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, median_width_l_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, median_right_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, median_width_r_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, median_surface_l_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, median_surface_r_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, link_type_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, link_kind_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, pavement_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, lane_type_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, lane_kind_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, lane_width_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, lane_height_limit_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, lane_weight_limit_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, lane_width_limit_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, lane_bound_kind_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, lane_bound_color_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, lane_bound_material_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::AttributeValue, road_bound_kind_val_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  9,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  PROTOBUF_FIELD_OFFSET(::RoadPB::RangeAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::RangeAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::RangeAttribute, geom_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::RangeAttribute, type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::RangeAttribute, start_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::RangeAttribute, end_val_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::RangeAttribute, attribute_len_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::RoadPB::FixedSpeedLimit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::FixedSpeedLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::FixedSpeedLimit, geom_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::FixedSpeedLimit, direction_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::FixedSpeedLimit, max_speed_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::FixedSpeedLimit, max_source_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::FixedSpeedLimit, min_speed_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::FixedSpeedLimit, min_source_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::FixedSpeedLimit, valid_period_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::FixedSpeedLimit, vehicle_type_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::RoadPB::CondSpeedLimit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::CondSpeedLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::CondSpeedLimit, geom_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::CondSpeedLimit, direction_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::CondSpeedLimit, cond_type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::CondSpeedLimit, cond_speed_limit_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::CondSpeedLimit, valid_period_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::CondSpeedLimit, vehicle_type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::CondSpeedLimit, attribute_len_),
  2,
  3,
  4,
  6,
  0,
  1,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::RoadPB::LangName)},
  { 11, 19, sizeof(::RoadPB::Point)},
  { 22, 30, sizeof(::RoadPB::Polyline)},
  { 33, 42, sizeof(::RoadPB::Polygon)},
  { 46, 55, sizeof(::RoadPB::Circle)},
  { 59, 66, sizeof(::RoadPB::Cylinder)},
  { 68, 75, sizeof(::RoadPB::BoundingBox)},
  { 77, 108, sizeof(::RoadPB::AttributeValue)},
  { 134, 144, sizeof(::RoadPB::RangeAttribute)},
  { 149, 162, sizeof(::RoadPB::FixedSpeedLimit)},
  { 170, 182, sizeof(::RoadPB::CondSpeedLimit)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_LangName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_Polyline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_Circle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_Cylinder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_BoundingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_AttributeValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_RangeAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_FixedSpeedLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_CondSpeedLimit_default_instance_),
};

const char descriptor_table_protodef_common_2fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023common/common.proto\022\006RoadPB\">\n\010LangNam"
  "e\022\021\n\tname_type\030\001 \001(\t\022\021\n\tlang_code\030\002 \001(\t\022"
  "\014\n\004name\030\003 \001(\t\"(\n\005Point\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002"
  " \001(\001\022\t\n\001z\030\003 \001(\001\"E\n\010Polyline\022\032\n\003pts\030\001 \003(\013"
  "2\r.RoadPB.Point\022\r\n\005width\030\002 \001(\002\022\016\n\006height"
  "\030\003 \001(\002\"|\n\007Polygon\022\032\n\003pts\030\001 \003(\0132\r.RoadPB."
  "Point\022\035\n\006normal\030\002 \001(\0132\r.RoadPB.Point\022\022\n\n"
  "edge_width\030\003 \001(\002\022\"\n\013orientation\030\004 \001(\0132\r."
  "RoadPB.Point\"j\n\006Circle\022\035\n\006center\030\001 \001(\0132\r"
  ".RoadPB.Point\022\035\n\006normal\030\002 \001(\0132\r.RoadPB.P"
  "oint\022\016\n\006radius\030\003 \001(\002\022\022\n\nedge_width\030\004 \001(\002"
  "\"9\n\010Cylinder\022\035\n\006points\030\001 \003(\0132\r.RoadPB.Po"
  "int\022\016\n\006radius\030\002 \001(\002\"K\n\013BoundingBox\022\035\n\006mi"
  "n_pt\030\001 \001(\0132\r.RoadPB.Point\022\035\n\006max_pt\030\002 \001("
  "\0132\r.RoadPB.Point\"\305\005\n\016AttributeValue\022\017\n\007V"
  "RU_VAL\030\001 \001(\005\022\020\n\010OPPO_VAL\030\002 \001(\005\022\033\n\023MULTI_"
  "DIGITIZED_VAL\030\003 \001(\005\022\034\n\024VARI_SPEED_LIMIT_"
  "VAL\030\004 \001(\005\022\035\n\025OVERHEAD_OBSTRUCT_VAL\030\005 \001(\005"
  "\022\027\n\017INFRA_SEP_L_VAL\030\006 \001(\005\022\027\n\017INFRA_SEP_R"
  "_VAL\030\007 \001(\005\022\027\n\017MEDIAN_LEFT_VAL\030\010 \001(\005\022\032\n\022M"
  "EDIAN_WIDTH_L_VAL\030\t \001(\001\022\030\n\020MEDIAN_RIGHT_"
  "VAL\030\n \001(\005\022\032\n\022MEDIAN_WIDTH_R_VAL\030\013 \001(\001\022\034\n"
  "\024MEDIAN_SURFACE_L_VAL\030\014 \001(\005\022\034\n\024MEDIAN_SU"
  "RFACE_R_VAL\030\r \001(\005\022\025\n\rLINK_TYPE_VAL\030\016 \001(\005"
  "\022\025\n\rLINK_KIND_VAL\030\017 \001(\005\022\024\n\014PAVEMENT_VAL\030"
  "\020 \001(\005\022\025\n\rLANE_TYPE_VAL\030\021 \001(\005\022\025\n\rLANE_KIN"
  "D_VAL\030\022 \001(\005\022\026\n\016LANE_WIDTH_VAL\030\023 \001(\001\022\035\n\025L"
  "ANE_HEIGHT_LIMIT_VAL\030\024 \001(\001\022\035\n\025LANE_WEIGH"
  "T_LIMIT_VAL\030\025 \001(\001\022\034\n\024LANE_WIDTH_LIMIT_VA"
  "L\030\026 \001(\001\022\033\n\023LANE_BOUND_KIND_VAL\030\031 \001(\005\022\034\n\024"
  "LANE_BOUND_COLOR_VAL\030\032 \001(\005\022\037\n\027LANE_BOUND"
  "_MATERIAL_VAL\030\033 \001(\005\022\033\n\023ROAD_BOUND_KIND_V"
  "AL\030\036 \001(\005\"\300\001\n\016RangeAttribute\022\036\n\004geom\030\001 \001("
  "\0132\020.RoadPB.Polyline\022#\n\004type\030\002 \001(\0162\025.Road"
  "PB.AttributeType\022)\n\tstart_val\030\003 \001(\0132\026.Ro"
  "adPB.AttributeValue\022\'\n\007end_val\030\004 \001(\0132\026.R"
  "oadPB.AttributeValue\022\025\n\rattribute_len\030\005 "
  "\001(\001\"\276\001\n\017FixedSpeedLimit\022\036\n\004geom\030\001 \001(\0132\020."
  "RoadPB.Polyline\022\021\n\tdirection\030\002 \001(\005\022\021\n\tma"
  "x_speed\030\003 \001(\002\022\022\n\nmax_source\030\004 \001(\005\022\021\n\tmin"
  "_speed\030\005 \001(\002\022\022\n\nmin_source\030\006 \001(\005\022\024\n\014vali"
  "d_period\030\007 \001(\t\022\024\n\014vehicle_type\030\010 \001(\t\"\263\001\n"
  "\016CondSpeedLimit\022\036\n\004geom\030\001 \001(\0132\020.RoadPB.P"
  "olyline\022\021\n\tdirection\030\002 \001(\005\022\021\n\tcond_type\030"
  "\003 \001(\005\022\030\n\020cond_speed_limit\030\004 \001(\005\022\024\n\014valid"
  "_period\030\005 \001(\t\022\024\n\014vehicle_type\030\006 \001(\t\022\025\n\ra"
  "ttribute_len\030\007 \001(\001*e\n\014ProvinceCode\022\014\n\010BE"
  "I_JING\020\000\022\r\n\tSHANG_HAI\020\001\022\016\n\nGUANG_ZHOU\020\002\022"
  "\r\n\tSHEN_ZHEN\020\003\022\n\n\006HE_BEI\020\004\022\r\n\tSHAN_DONG\020"
  "\005*\231\004\n\rAttributeType\022\013\n\007UNKNOWN\020\000\022\007\n\003VRU\020"
  "\001\022\010\n\004OPPO\020\002\022\r\n\treserved1\020\003\022\024\n\020VARI_SPEED"
  "_LIMIT\020\004\022\025\n\021OVERHEAD_OBSTRUCT\020\005\022\017\n\013INFRA"
  "_SEP_L\020\006\022\017\n\013INFRA_SEP_R\020\007\022\017\n\013MEDIAN_LEFT"
  "\020\010\022\022\n\016MEDIAN_WIDTH_L\020\t\022\020\n\014MEDIAN_RIGHT\020\n"
  "\022\022\n\016MEDIAN_WIDTH_R\020\013\022\024\n\020MEDIAN_SURFACE_L"
  "\020\014\022\024\n\020MEDIAN_SURFACE_R\020\r\022\r\n\treserved2\020\016\022"
  "\r\n\treserved3\020\017\022\014\n\010PAVEMENT\020\020\022\r\n\tLANE_TYP"
  "E\020\021\022\r\n\tLANE_KIND\020\022\022\016\n\nLANE_WIDTH\020\023\022\025\n\021LA"
  "NE_HEIGHT_LIMIT\020\024\022\025\n\021LANE_WEIGHT_LIMIT\020\025"
  "\022\024\n\020LANE_WIDTH_LIMIT\020\026\022\r\n\treserved4\020\027\022\r\n"
  "\treserved5\020\030\022\023\n\017LANE_BOUND_KIND\020\031\022\024\n\020LAN"
  "E_BOUND_COLOR\020\032\022\027\n\023LANE_BOUND_MATERIAL\020\033"
  "\022\023\n\017ROAD_BOUND_KIND\020\036"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fcommon_2eproto = {
  false, false, 2501, descriptor_table_protodef_common_2fcommon_2eproto, "common/common.proto", 
  &descriptor_table_common_2fcommon_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_common_2fcommon_2eproto::offsets,
  file_level_metadata_common_2fcommon_2eproto, file_level_enum_descriptors_common_2fcommon_2eproto, file_level_service_descriptors_common_2fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_common_2fcommon_2eproto_getter() {
  return &descriptor_table_common_2fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_common_2fcommon_2eproto(&descriptor_table_common_2fcommon_2eproto);
namespace RoadPB {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProvinceCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[0];
}
bool ProvinceCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttributeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[1];
}
bool AttributeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 30:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LangName::_Internal {
 public:
  using HasBits = decltype(std::declval<LangName>()._has_bits_);
  static void set_has_name_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lang_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LangName::LangName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.LangName)
}
LangName::LangName(const LangName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_type()) {
    name_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_type(), 
      GetArenaForAllocation());
  }
  lang_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lang_code()) {
    lang_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang_code(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RoadPB.LangName)
}

inline void LangName::SharedCtor() {
name_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lang_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LangName::~LangName() {
  // @@protoc_insertion_point(destructor:RoadPB.LangName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LangName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LangName::ArenaDtor(void* object) {
  LangName* _this = reinterpret_cast< LangName* >(object);
  (void)_this;
}
void LangName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LangName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LangName::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.LangName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      lang_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LangName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.LangName.name_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lang_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lang_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.LangName.lang_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.LangName.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LangName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.LangName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_type().data(), static_cast<int>(this->_internal_name_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.LangName.name_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_type(), target);
  }

  // optional string lang_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lang_code().data(), static_cast<int>(this->_internal_lang_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.LangName.lang_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lang_code(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.LangName.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.LangName)
  return target;
}

size_t LangName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.LangName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_type());
    }

    // optional string lang_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lang_code());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LangName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LangName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LangName::GetClassData() const { return &_class_data_; }

void LangName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LangName *>(to)->MergeFrom(
      static_cast<const LangName &>(from));
}


void LangName::MergeFrom(const LangName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.LangName)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name_type(from._internal_name_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_lang_code(from._internal_lang_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LangName::CopyFrom(const LangName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.LangName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LangName::IsInitialized() const {
  return true;
}

void LangName::InternalSwap(LangName* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_type_, GetArenaForAllocation(),
      &other->name_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lang_code_, GetArenaForAllocation(),
      &other->lang_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LangName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[0]);
}

// ===================================================================

class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.Point)
}

inline void Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:RoadPB.Point)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }

void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Point *>(to)->MergeFrom(
      static_cast<const Point &>(from));
}


void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.Point)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, z_)
      + sizeof(Point::z_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[1]);
}

// ===================================================================

class Polyline::_Internal {
 public:
  using HasBits = decltype(std::declval<Polyline>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Polyline::Polyline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.Polyline)
}
Polyline::Polyline(const Polyline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pts_(from.pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.Polyline)
}

inline void Polyline::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Polyline::~Polyline() {
  // @@protoc_insertion_point(destructor:RoadPB.Polyline)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Polyline::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Polyline::ArenaDtor(void* object) {
  Polyline* _this = reinterpret_cast< Polyline* >(object);
  (void)_this;
}
void Polyline::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polyline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Polyline::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.Polyline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polyline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .RoadPB.Point pts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polyline::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.Polyline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RoadPB.Point pts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pts(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional float width = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_width(), target);
  }

  // optional float height = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.Polyline)
  return target;
}

size_t Polyline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.Polyline)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoadPB.Point pts = 1;
  total_size += 1UL * this->_internal_pts_size();
  for (const auto& msg : this->pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float width = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float height = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Polyline::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Polyline::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Polyline::GetClassData() const { return &_class_data_; }

void Polyline::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Polyline *>(to)->MergeFrom(
      static_cast<const Polyline &>(from));
}


void Polyline::MergeFrom(const Polyline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.Polyline)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_.MergeFrom(from.pts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Polyline::CopyFrom(const Polyline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.Polyline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polyline::IsInitialized() const {
  return true;
}

void Polyline::InternalSwap(Polyline* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pts_.InternalSwap(&other->pts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Polyline, height_)
      + sizeof(Polyline::height_)
      - PROTOBUF_FIELD_OFFSET(Polyline, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Polyline::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[2]);
}

// ===================================================================

class Polygon::_Internal {
 public:
  using HasBits = decltype(std::declval<Polygon>()._has_bits_);
  static const ::RoadPB::Point& normal(const Polygon* msg);
  static void set_has_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_edge_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::RoadPB::Point& orientation(const Polygon* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::RoadPB::Point&
Polygon::_Internal::normal(const Polygon* msg) {
  return *msg->normal_;
}
const ::RoadPB::Point&
Polygon::_Internal::orientation(const Polygon* msg) {
  return *msg->orientation_;
}
Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pts_(from.pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_normal()) {
    normal_ = new ::RoadPB::Point(*from.normal_);
  } else {
    normal_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::RoadPB::Point(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  edge_width_ = from.edge_width_;
  // @@protoc_insertion_point(copy_constructor:RoadPB.Polygon)
}

inline void Polygon::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&normal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&edge_width_) -
    reinterpret_cast<char*>(&normal_)) + sizeof(edge_width_));
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:RoadPB.Polygon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete normal_;
  if (this != internal_default_instance()) delete orientation_;
}

void Polygon::ArenaDtor(void* object) {
  Polygon* _this = reinterpret_cast< Polygon* >(object);
  (void)_this;
}
void Polygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(normal_ != nullptr);
      normal_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orientation_ != nullptr);
      orientation_->Clear();
    }
  }
  edge_width_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .RoadPB.Point pts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Point normal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float edge_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_edge_width(&has_bits);
          edge_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Point orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RoadPB.Point pts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pts(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .RoadPB.Point normal = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::normal(this), target, stream);
  }

  // optional float edge_width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_edge_width(), target);
  }

  // optional .RoadPB.Point orientation = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoadPB.Point pts = 1;
  total_size += 1UL * this->_internal_pts_size();
  for (const auto& msg : this->pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .RoadPB.Point normal = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *normal_);
    }

    // optional .RoadPB.Point orientation = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_);
    }

    // optional float edge_width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Polygon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Polygon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Polygon::GetClassData() const { return &_class_data_; }

void Polygon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Polygon *>(to)->MergeFrom(
      static_cast<const Polygon &>(from));
}


void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_.MergeFrom(from.pts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_normal()->::RoadPB::Point::MergeFrom(from._internal_normal());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_orientation()->::RoadPB::Point::MergeFrom(from._internal_orientation());
    }
    if (cached_has_bits & 0x00000004u) {
      edge_width_ = from.edge_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pts_.InternalSwap(&other->pts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Polygon, edge_width_)
      + sizeof(Polygon::edge_width_)
      - PROTOBUF_FIELD_OFFSET(Polygon, normal_)>(
          reinterpret_cast<char*>(&normal_),
          reinterpret_cast<char*>(&other->normal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[3]);
}

// ===================================================================

class Circle::_Internal {
 public:
  using HasBits = decltype(std::declval<Circle>()._has_bits_);
  static const ::RoadPB::Point& center(const Circle* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::RoadPB::Point& normal(const Circle* msg);
  static void set_has_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_edge_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::RoadPB::Point&
Circle::_Internal::center(const Circle* msg) {
  return *msg->center_;
}
const ::RoadPB::Point&
Circle::_Internal::normal(const Circle* msg) {
  return *msg->normal_;
}
Circle::Circle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.Circle)
}
Circle::Circle(const Circle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::RoadPB::Point(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_normal()) {
    normal_ = new ::RoadPB::Point(*from.normal_);
  } else {
    normal_ = nullptr;
  }
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&edge_width_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(edge_width_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.Circle)
}

inline void Circle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&edge_width_) -
    reinterpret_cast<char*>(&center_)) + sizeof(edge_width_));
}

Circle::~Circle() {
  // @@protoc_insertion_point(destructor:RoadPB.Circle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Circle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete normal_;
}

void Circle::ArenaDtor(void* object) {
  Circle* _this = reinterpret_cast< Circle* >(object);
  (void)_this;
}
void Circle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Circle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.Circle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(center_ != nullptr);
      center_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(normal_ != nullptr);
      normal_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&edge_width_) -
        reinterpret_cast<char*>(&radius_)) + sizeof(edge_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Circle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .RoadPB.Point center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Point normal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float radius = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float edge_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_edge_width(&has_bits);
          edge_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Circle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.Circle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RoadPB.Point center = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // optional .RoadPB.Point normal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::normal(this), target, stream);
  }

  // optional float radius = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_radius(), target);
  }

  // optional float edge_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_edge_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.Circle)
  return target;
}

size_t Circle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.Circle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .RoadPB.Point center = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *center_);
    }

    // optional .RoadPB.Point normal = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *normal_);
    }

    // optional float radius = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float edge_width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Circle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Circle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Circle::GetClassData() const { return &_class_data_; }

void Circle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Circle *>(to)->MergeFrom(
      static_cast<const Circle &>(from));
}


void Circle::MergeFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_center()->::RoadPB::Point::MergeFrom(from._internal_center());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_normal()->::RoadPB::Point::MergeFrom(from._internal_normal());
    }
    if (cached_has_bits & 0x00000004u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      edge_width_ = from.edge_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Circle::CopyFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Circle::IsInitialized() const {
  return true;
}

void Circle::InternalSwap(Circle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Circle, edge_width_)
      + sizeof(Circle::edge_width_)
      - PROTOBUF_FIELD_OFFSET(Circle, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Circle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[4]);
}

// ===================================================================

class Cylinder::_Internal {
 public:
  using HasBits = decltype(std::declval<Cylinder>()._has_bits_);
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Cylinder::Cylinder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.Cylinder)
}
Cylinder::Cylinder(const Cylinder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:RoadPB.Cylinder)
}

inline void Cylinder::SharedCtor() {
radius_ = 0;
}

Cylinder::~Cylinder() {
  // @@protoc_insertion_point(destructor:RoadPB.Cylinder)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Cylinder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Cylinder::ArenaDtor(void* object) {
  Cylinder* _this = reinterpret_cast< Cylinder* >(object);
  (void)_this;
}
void Cylinder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cylinder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Cylinder::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.Cylinder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  radius_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cylinder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .RoadPB.Point points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cylinder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.Cylinder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RoadPB.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional float radius = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.Cylinder)
  return target;
}

size_t Cylinder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.Cylinder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoadPB.Point points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional float radius = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cylinder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Cylinder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cylinder::GetClassData() const { return &_class_data_; }

void Cylinder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Cylinder *>(to)->MergeFrom(
      static_cast<const Cylinder &>(from));
}


void Cylinder::MergeFrom(const Cylinder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.Cylinder)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from._internal_has_radius()) {
    _internal_set_radius(from._internal_radius());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cylinder::CopyFrom(const Cylinder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.Cylinder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cylinder::IsInitialized() const {
  return true;
}

void Cylinder::InternalSwap(Cylinder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  points_.InternalSwap(&other->points_);
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cylinder::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[5]);
}

// ===================================================================

class BoundingBox::_Internal {
 public:
  using HasBits = decltype(std::declval<BoundingBox>()._has_bits_);
  static const ::RoadPB::Point& min_pt(const BoundingBox* msg);
  static void set_has_min_pt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::RoadPB::Point& max_pt(const BoundingBox* msg);
  static void set_has_max_pt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::RoadPB::Point&
BoundingBox::_Internal::min_pt(const BoundingBox* msg) {
  return *msg->min_pt_;
}
const ::RoadPB::Point&
BoundingBox::_Internal::max_pt(const BoundingBox* msg) {
  return *msg->max_pt_;
}
BoundingBox::BoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.BoundingBox)
}
BoundingBox::BoundingBox(const BoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min_pt()) {
    min_pt_ = new ::RoadPB::Point(*from.min_pt_);
  } else {
    min_pt_ = nullptr;
  }
  if (from._internal_has_max_pt()) {
    max_pt_ = new ::RoadPB::Point(*from.max_pt_);
  } else {
    max_pt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RoadPB.BoundingBox)
}

inline void BoundingBox::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_pt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_pt_) -
    reinterpret_cast<char*>(&min_pt_)) + sizeof(max_pt_));
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:RoadPB.BoundingBox)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoundingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete min_pt_;
  if (this != internal_default_instance()) delete max_pt_;
}

void BoundingBox::ArenaDtor(void* object) {
  BoundingBox* _this = reinterpret_cast< BoundingBox* >(object);
  (void)_this;
}
void BoundingBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(min_pt_ != nullptr);
      min_pt_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(max_pt_ != nullptr);
      max_pt_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .RoadPB.Point min_pt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Point max_pt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RoadPB.Point min_pt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::min_pt(this), target, stream);
  }

  // optional .RoadPB.Point max_pt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::max_pt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.BoundingBox)
  return target;
}

size_t BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.BoundingBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .RoadPB.Point min_pt = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *min_pt_);
    }

    // optional .RoadPB.Point max_pt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_pt_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoundingBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoundingBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoundingBox::GetClassData() const { return &_class_data_; }

void BoundingBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BoundingBox *>(to)->MergeFrom(
      static_cast<const BoundingBox &>(from));
}


void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_min_pt()->::RoadPB::Point::MergeFrom(from._internal_min_pt());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_max_pt()->::RoadPB::Point::MergeFrom(from._internal_max_pt());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  return true;
}

void BoundingBox::InternalSwap(BoundingBox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox, max_pt_)
      + sizeof(BoundingBox::max_pt_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox, min_pt_)>(
          reinterpret_cast<char*>(&min_pt_),
          reinterpret_cast<char*>(&other->min_pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[6]);
}

// ===================================================================

class AttributeValue::_Internal {
 public:
  using HasBits = decltype(std::declval<AttributeValue>()._has_bits_);
  static void set_has_vru_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_oppo_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_multi_digitized_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vari_speed_limit_val(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_overhead_obstruct_val(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_infra_sep_l_val(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_infra_sep_r_val(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_median_left_val(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_median_width_l_val(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_median_right_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_median_width_r_val(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_median_surface_l_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_median_surface_r_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_link_type_val(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_link_kind_val(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_pavement_val(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_lane_type_val(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_lane_kind_val(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_lane_width_val(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_lane_height_limit_val(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_lane_weight_limit_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_lane_width_limit_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_lane_bound_kind_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_lane_bound_color_val(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_lane_bound_material_val(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_road_bound_kind_val(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
};

AttributeValue::AttributeValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.AttributeValue)
}
AttributeValue::AttributeValue(const AttributeValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vru_val_, &from.vru_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&road_bound_kind_val_) -
    reinterpret_cast<char*>(&vru_val_)) + sizeof(road_bound_kind_val_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.AttributeValue)
}

inline void AttributeValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vru_val_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&road_bound_kind_val_) -
    reinterpret_cast<char*>(&vru_val_)) + sizeof(road_bound_kind_val_));
}

AttributeValue::~AttributeValue() {
  // @@protoc_insertion_point(destructor:RoadPB.AttributeValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AttributeValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AttributeValue::ArenaDtor(void* object) {
  AttributeValue* _this = reinterpret_cast< AttributeValue* >(object);
  (void)_this;
}
void AttributeValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttributeValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttributeValue::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.AttributeValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vru_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&median_left_val_) -
        reinterpret_cast<char*>(&vru_val_)) + sizeof(median_left_val_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&median_width_l_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pavement_val_) -
        reinterpret_cast<char*>(&median_width_l_val_)) + sizeof(pavement_val_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&lane_type_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lane_bound_color_val_) -
        reinterpret_cast<char*>(&lane_type_val_)) + sizeof(lane_bound_color_val_));
  }
  if (cached_has_bits & 0x03000000u) {
    ::memset(&lane_bound_material_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&road_bound_kind_val_) -
        reinterpret_cast<char*>(&lane_bound_material_val_)) + sizeof(road_bound_kind_val_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 VRU_VAL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vru_val(&has_bits);
          vru_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 OPPO_VAL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_oppo_val(&has_bits);
          oppo_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 MULTI_DIGITIZED_VAL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_multi_digitized_val(&has_bits);
          multi_digitized_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 VARI_SPEED_LIMIT_VAL = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_vari_speed_limit_val(&has_bits);
          vari_speed_limit_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 OVERHEAD_OBSTRUCT_VAL = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_overhead_obstruct_val(&has_bits);
          overhead_obstruct_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 INFRA_SEP_L_VAL = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_infra_sep_l_val(&has_bits);
          infra_sep_l_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 INFRA_SEP_R_VAL = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_infra_sep_r_val(&has_bits);
          infra_sep_r_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 MEDIAN_LEFT_VAL = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_median_left_val(&has_bits);
          median_left_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double MEDIAN_WIDTH_L_VAL = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_median_width_l_val(&has_bits);
          median_width_l_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 MEDIAN_RIGHT_VAL = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_median_right_val(&has_bits);
          median_right_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double MEDIAN_WIDTH_R_VAL = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_median_width_r_val(&has_bits);
          median_width_r_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 MEDIAN_SURFACE_L_VAL = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_median_surface_l_val(&has_bits);
          median_surface_l_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 MEDIAN_SURFACE_R_VAL = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_median_surface_r_val(&has_bits);
          median_surface_r_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 LINK_TYPE_VAL = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_link_type_val(&has_bits);
          link_type_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 LINK_KIND_VAL = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_link_kind_val(&has_bits);
          link_kind_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 PAVEMENT_VAL = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_pavement_val(&has_bits);
          pavement_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 LANE_TYPE_VAL = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_lane_type_val(&has_bits);
          lane_type_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 LANE_KIND_VAL = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_lane_kind_val(&has_bits);
          lane_kind_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double LANE_WIDTH_VAL = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_lane_width_val(&has_bits);
          lane_width_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double LANE_HEIGHT_LIMIT_VAL = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_lane_height_limit_val(&has_bits);
          lane_height_limit_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double LANE_WEIGHT_LIMIT_VAL = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_lane_weight_limit_val(&has_bits);
          lane_weight_limit_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double LANE_WIDTH_LIMIT_VAL = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_lane_width_limit_val(&has_bits);
          lane_width_limit_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 LANE_BOUND_KIND_VAL = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_lane_bound_kind_val(&has_bits);
          lane_bound_kind_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 LANE_BOUND_COLOR_VAL = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_lane_bound_color_val(&has_bits);
          lane_bound_color_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 LANE_BOUND_MATERIAL_VAL = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_lane_bound_material_val(&has_bits);
          lane_bound_material_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ROAD_BOUND_KIND_VAL = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_road_bound_kind_val(&has_bits);
          road_bound_kind_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttributeValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.AttributeValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 VRU_VAL = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vru_val(), target);
  }

  // optional int32 OPPO_VAL = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_oppo_val(), target);
  }

  // optional int32 MULTI_DIGITIZED_VAL = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_multi_digitized_val(), target);
  }

  // optional int32 VARI_SPEED_LIMIT_VAL = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vari_speed_limit_val(), target);
  }

  // optional int32 OVERHEAD_OBSTRUCT_VAL = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_overhead_obstruct_val(), target);
  }

  // optional int32 INFRA_SEP_L_VAL = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_infra_sep_l_val(), target);
  }

  // optional int32 INFRA_SEP_R_VAL = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_infra_sep_r_val(), target);
  }

  // optional int32 MEDIAN_LEFT_VAL = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_median_left_val(), target);
  }

  // optional double MEDIAN_WIDTH_L_VAL = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_median_width_l_val(), target);
  }

  // optional int32 MEDIAN_RIGHT_VAL = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_median_right_val(), target);
  }

  // optional double MEDIAN_WIDTH_R_VAL = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_median_width_r_val(), target);
  }

  // optional int32 MEDIAN_SURFACE_L_VAL = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_median_surface_l_val(), target);
  }

  // optional int32 MEDIAN_SURFACE_R_VAL = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_median_surface_r_val(), target);
  }

  // optional int32 LINK_TYPE_VAL = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_link_type_val(), target);
  }

  // optional int32 LINK_KIND_VAL = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_link_kind_val(), target);
  }

  // optional int32 PAVEMENT_VAL = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_pavement_val(), target);
  }

  // optional int32 LANE_TYPE_VAL = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_lane_type_val(), target);
  }

  // optional int32 LANE_KIND_VAL = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_lane_kind_val(), target);
  }

  // optional double LANE_WIDTH_VAL = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_lane_width_val(), target);
  }

  // optional double LANE_HEIGHT_LIMIT_VAL = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_lane_height_limit_val(), target);
  }

  // optional double LANE_WEIGHT_LIMIT_VAL = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_lane_weight_limit_val(), target);
  }

  // optional double LANE_WIDTH_LIMIT_VAL = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_lane_width_limit_val(), target);
  }

  // optional int32 LANE_BOUND_KIND_VAL = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_lane_bound_kind_val(), target);
  }

  // optional int32 LANE_BOUND_COLOR_VAL = 26;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_lane_bound_color_val(), target);
  }

  // optional int32 LANE_BOUND_MATERIAL_VAL = 27;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_lane_bound_material_val(), target);
  }

  // optional int32 ROAD_BOUND_KIND_VAL = 30;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_road_bound_kind_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.AttributeValue)
  return target;
}

size_t AttributeValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.AttributeValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 VRU_VAL = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vru_val());
    }

    // optional int32 OPPO_VAL = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_oppo_val());
    }

    // optional int32 MULTI_DIGITIZED_VAL = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_multi_digitized_val());
    }

    // optional int32 VARI_SPEED_LIMIT_VAL = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vari_speed_limit_val());
    }

    // optional int32 OVERHEAD_OBSTRUCT_VAL = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_overhead_obstruct_val());
    }

    // optional int32 INFRA_SEP_L_VAL = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_infra_sep_l_val());
    }

    // optional int32 INFRA_SEP_R_VAL = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_infra_sep_r_val());
    }

    // optional int32 MEDIAN_LEFT_VAL = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_median_left_val());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double MEDIAN_WIDTH_L_VAL = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double MEDIAN_WIDTH_R_VAL = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional int32 MEDIAN_RIGHT_VAL = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_median_right_val());
    }

    // optional int32 MEDIAN_SURFACE_L_VAL = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_median_surface_l_val());
    }

    // optional int32 MEDIAN_SURFACE_R_VAL = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_median_surface_r_val());
    }

    // optional int32 LINK_TYPE_VAL = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_link_type_val());
    }

    // optional int32 LINK_KIND_VAL = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_link_kind_val());
    }

    // optional int32 PAVEMENT_VAL = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pavement_val());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 LANE_TYPE_VAL = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lane_type_val());
    }

    // optional int32 LANE_KIND_VAL = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lane_kind_val());
    }

    // optional double LANE_WIDTH_VAL = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double LANE_HEIGHT_LIMIT_VAL = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double LANE_WEIGHT_LIMIT_VAL = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double LANE_WIDTH_LIMIT_VAL = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional int32 LANE_BOUND_KIND_VAL = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lane_bound_kind_val());
    }

    // optional int32 LANE_BOUND_COLOR_VAL = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lane_bound_color_val());
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional int32 LANE_BOUND_MATERIAL_VAL = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lane_bound_material_val());
    }

    // optional int32 ROAD_BOUND_KIND_VAL = 30;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_road_bound_kind_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AttributeValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeValue::GetClassData() const { return &_class_data_; }

void AttributeValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AttributeValue *>(to)->MergeFrom(
      static_cast<const AttributeValue &>(from));
}


void AttributeValue::MergeFrom(const AttributeValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.AttributeValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vru_val_ = from.vru_val_;
    }
    if (cached_has_bits & 0x00000002u) {
      oppo_val_ = from.oppo_val_;
    }
    if (cached_has_bits & 0x00000004u) {
      multi_digitized_val_ = from.multi_digitized_val_;
    }
    if (cached_has_bits & 0x00000008u) {
      vari_speed_limit_val_ = from.vari_speed_limit_val_;
    }
    if (cached_has_bits & 0x00000010u) {
      overhead_obstruct_val_ = from.overhead_obstruct_val_;
    }
    if (cached_has_bits & 0x00000020u) {
      infra_sep_l_val_ = from.infra_sep_l_val_;
    }
    if (cached_has_bits & 0x00000040u) {
      infra_sep_r_val_ = from.infra_sep_r_val_;
    }
    if (cached_has_bits & 0x00000080u) {
      median_left_val_ = from.median_left_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      median_width_l_val_ = from.median_width_l_val_;
    }
    if (cached_has_bits & 0x00000200u) {
      median_width_r_val_ = from.median_width_r_val_;
    }
    if (cached_has_bits & 0x00000400u) {
      median_right_val_ = from.median_right_val_;
    }
    if (cached_has_bits & 0x00000800u) {
      median_surface_l_val_ = from.median_surface_l_val_;
    }
    if (cached_has_bits & 0x00001000u) {
      median_surface_r_val_ = from.median_surface_r_val_;
    }
    if (cached_has_bits & 0x00002000u) {
      link_type_val_ = from.link_type_val_;
    }
    if (cached_has_bits & 0x00004000u) {
      link_kind_val_ = from.link_kind_val_;
    }
    if (cached_has_bits & 0x00008000u) {
      pavement_val_ = from.pavement_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      lane_type_val_ = from.lane_type_val_;
    }
    if (cached_has_bits & 0x00020000u) {
      lane_kind_val_ = from.lane_kind_val_;
    }
    if (cached_has_bits & 0x00040000u) {
      lane_width_val_ = from.lane_width_val_;
    }
    if (cached_has_bits & 0x00080000u) {
      lane_height_limit_val_ = from.lane_height_limit_val_;
    }
    if (cached_has_bits & 0x00100000u) {
      lane_weight_limit_val_ = from.lane_weight_limit_val_;
    }
    if (cached_has_bits & 0x00200000u) {
      lane_width_limit_val_ = from.lane_width_limit_val_;
    }
    if (cached_has_bits & 0x00400000u) {
      lane_bound_kind_val_ = from.lane_bound_kind_val_;
    }
    if (cached_has_bits & 0x00800000u) {
      lane_bound_color_val_ = from.lane_bound_color_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      lane_bound_material_val_ = from.lane_bound_material_val_;
    }
    if (cached_has_bits & 0x02000000u) {
      road_bound_kind_val_ = from.road_bound_kind_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeValue::CopyFrom(const AttributeValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.AttributeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeValue::IsInitialized() const {
  return true;
}

void AttributeValue::InternalSwap(AttributeValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttributeValue, road_bound_kind_val_)
      + sizeof(AttributeValue::road_bound_kind_val_)
      - PROTOBUF_FIELD_OFFSET(AttributeValue, vru_val_)>(
          reinterpret_cast<char*>(&vru_val_),
          reinterpret_cast<char*>(&other->vru_val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[7]);
}

// ===================================================================

class RangeAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeAttribute>()._has_bits_);
  static const ::RoadPB::Polyline& geom(const RangeAttribute* msg);
  static void set_has_geom(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::RoadPB::AttributeValue& start_val(const RangeAttribute* msg);
  static void set_has_start_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::RoadPB::AttributeValue& end_val(const RangeAttribute* msg);
  static void set_has_end_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attribute_len(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::RoadPB::Polyline&
RangeAttribute::_Internal::geom(const RangeAttribute* msg) {
  return *msg->geom_;
}
const ::RoadPB::AttributeValue&
RangeAttribute::_Internal::start_val(const RangeAttribute* msg) {
  return *msg->start_val_;
}
const ::RoadPB::AttributeValue&
RangeAttribute::_Internal::end_val(const RangeAttribute* msg) {
  return *msg->end_val_;
}
RangeAttribute::RangeAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.RangeAttribute)
}
RangeAttribute::RangeAttribute(const RangeAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_geom()) {
    geom_ = new ::RoadPB::Polyline(*from.geom_);
  } else {
    geom_ = nullptr;
  }
  if (from._internal_has_start_val()) {
    start_val_ = new ::RoadPB::AttributeValue(*from.start_val_);
  } else {
    start_val_ = nullptr;
  }
  if (from._internal_has_end_val()) {
    end_val_ = new ::RoadPB::AttributeValue(*from.end_val_);
  } else {
    end_val_ = nullptr;
  }
  ::memcpy(&attribute_len_, &from.attribute_len_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&attribute_len_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.RangeAttribute)
}

inline void RangeAttribute::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&geom_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&geom_)) + sizeof(type_));
}

RangeAttribute::~RangeAttribute() {
  // @@protoc_insertion_point(destructor:RoadPB.RangeAttribute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RangeAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete geom_;
  if (this != internal_default_instance()) delete start_val_;
  if (this != internal_default_instance()) delete end_val_;
}

void RangeAttribute::ArenaDtor(void* object) {
  RangeAttribute* _this = reinterpret_cast< RangeAttribute* >(object);
  (void)_this;
}
void RangeAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangeAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RangeAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.RangeAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(geom_ != nullptr);
      geom_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(start_val_ != nullptr);
      start_val_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(end_val_ != nullptr);
      end_val_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&attribute_len_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&attribute_len_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .RoadPB.Polyline geom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.AttributeType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::RoadPB::AttributeType_IsValid(val))) {
            _internal_set_type(static_cast<::RoadPB::AttributeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.AttributeValue start_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_val(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.AttributeValue end_val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_val(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double attribute_len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_attribute_len(&has_bits);
          attribute_len_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.RangeAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RoadPB.Polyline geom = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geom(this), target, stream);
  }

  // optional .RoadPB.AttributeType type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .RoadPB.AttributeValue start_val = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start_val(this), target, stream);
  }

  // optional .RoadPB.AttributeValue end_val = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end_val(this), target, stream);
  }

  // optional double attribute_len = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_attribute_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.RangeAttribute)
  return target;
}

size_t RangeAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.RangeAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .RoadPB.Polyline geom = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geom_);
    }

    // optional .RoadPB.AttributeValue start_val = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_val_);
    }

    // optional .RoadPB.AttributeValue end_val = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_val_);
    }

    // optional double attribute_len = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .RoadPB.AttributeType type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RangeAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeAttribute::GetClassData() const { return &_class_data_; }

void RangeAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RangeAttribute *>(to)->MergeFrom(
      static_cast<const RangeAttribute &>(from));
}


void RangeAttribute::MergeFrom(const RangeAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.RangeAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_geom()->::RoadPB::Polyline::MergeFrom(from._internal_geom());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_start_val()->::RoadPB::AttributeValue::MergeFrom(from._internal_start_val());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_end_val()->::RoadPB::AttributeValue::MergeFrom(from._internal_end_val());
    }
    if (cached_has_bits & 0x00000008u) {
      attribute_len_ = from.attribute_len_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeAttribute::CopyFrom(const RangeAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.RangeAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeAttribute::IsInitialized() const {
  return true;
}

void RangeAttribute::InternalSwap(RangeAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeAttribute, type_)
      + sizeof(RangeAttribute::type_)
      - PROTOBUF_FIELD_OFFSET(RangeAttribute, geom_)>(
          reinterpret_cast<char*>(&geom_),
          reinterpret_cast<char*>(&other->geom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeAttribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[8]);
}

// ===================================================================

class FixedSpeedLimit::_Internal {
 public:
  using HasBits = decltype(std::declval<FixedSpeedLimit>()._has_bits_);
  static const ::RoadPB::Polyline& geom(const FixedSpeedLimit* msg);
  static void set_has_geom(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_min_source(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_valid_period(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vehicle_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::RoadPB::Polyline&
FixedSpeedLimit::_Internal::geom(const FixedSpeedLimit* msg) {
  return *msg->geom_;
}
FixedSpeedLimit::FixedSpeedLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.FixedSpeedLimit)
}
FixedSpeedLimit::FixedSpeedLimit(const FixedSpeedLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  valid_period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_valid_period()) {
    valid_period_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_valid_period(), 
      GetArenaForAllocation());
  }
  vehicle_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vehicle_type()) {
    vehicle_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vehicle_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_geom()) {
    geom_ = new ::RoadPB::Polyline(*from.geom_);
  } else {
    geom_ = nullptr;
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_source_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(min_source_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.FixedSpeedLimit)
}

inline void FixedSpeedLimit::SharedCtor() {
valid_period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vehicle_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&geom_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_source_) -
    reinterpret_cast<char*>(&geom_)) + sizeof(min_source_));
}

FixedSpeedLimit::~FixedSpeedLimit() {
  // @@protoc_insertion_point(destructor:RoadPB.FixedSpeedLimit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FixedSpeedLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  valid_period_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete geom_;
}

void FixedSpeedLimit::ArenaDtor(void* object) {
  FixedSpeedLimit* _this = reinterpret_cast< FixedSpeedLimit* >(object);
  (void)_this;
}
void FixedSpeedLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FixedSpeedLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FixedSpeedLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.FixedSpeedLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      valid_period_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      vehicle_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(geom_ != nullptr);
      geom_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_source_) -
        reinterpret_cast<char*>(&direction_)) + sizeof(min_source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FixedSpeedLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .RoadPB.Polyline geom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_direction(&has_bits);
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float max_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_max_speed(&has_bits);
          max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 max_source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_source(&has_bits);
          max_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float min_speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_min_speed(&has_bits);
          min_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 min_source = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_min_source(&has_bits);
          min_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string valid_period = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_valid_period();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.FixedSpeedLimit.valid_period");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vehicle_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_vehicle_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.FixedSpeedLimit.vehicle_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedSpeedLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.FixedSpeedLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RoadPB.Polyline geom = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geom(this), target, stream);
  }

  // optional int32 direction = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_direction(), target);
  }

  // optional float max_speed = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max_speed(), target);
  }

  // optional int32 max_source = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_source(), target);
  }

  // optional float min_speed = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_min_speed(), target);
  }

  // optional int32 min_source = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_min_source(), target);
  }

  // optional string valid_period = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_valid_period().data(), static_cast<int>(this->_internal_valid_period().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.FixedSpeedLimit.valid_period");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_valid_period(), target);
  }

  // optional string vehicle_type = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vehicle_type().data(), static_cast<int>(this->_internal_vehicle_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.FixedSpeedLimit.vehicle_type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_vehicle_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.FixedSpeedLimit)
  return target;
}

size_t FixedSpeedLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.FixedSpeedLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string valid_period = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_valid_period());
    }

    // optional string vehicle_type = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vehicle_type());
    }

    // optional .RoadPB.Polyline geom = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geom_);
    }

    // optional int32 direction = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_direction());
    }

    // optional float max_speed = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 max_source = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_source());
    }

    // optional float min_speed = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int32 min_source = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_source());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FixedSpeedLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FixedSpeedLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FixedSpeedLimit::GetClassData() const { return &_class_data_; }

void FixedSpeedLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FixedSpeedLimit *>(to)->MergeFrom(
      static_cast<const FixedSpeedLimit &>(from));
}


void FixedSpeedLimit::MergeFrom(const FixedSpeedLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.FixedSpeedLimit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_valid_period(from._internal_valid_period());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_vehicle_type(from._internal_vehicle_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_geom()->::RoadPB::Polyline::MergeFrom(from._internal_geom());
    }
    if (cached_has_bits & 0x00000008u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_speed_ = from.max_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_source_ = from.max_source_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_speed_ = from.min_speed_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_source_ = from.min_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FixedSpeedLimit::CopyFrom(const FixedSpeedLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.FixedSpeedLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedSpeedLimit::IsInitialized() const {
  return true;
}

void FixedSpeedLimit::InternalSwap(FixedSpeedLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &valid_period_, GetArenaForAllocation(),
      &other->valid_period_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vehicle_type_, GetArenaForAllocation(),
      &other->vehicle_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FixedSpeedLimit, min_source_)
      + sizeof(FixedSpeedLimit::min_source_)
      - PROTOBUF_FIELD_OFFSET(FixedSpeedLimit, geom_)>(
          reinterpret_cast<char*>(&geom_),
          reinterpret_cast<char*>(&other->geom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedSpeedLimit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[9]);
}

// ===================================================================

class CondSpeedLimit::_Internal {
 public:
  using HasBits = decltype(std::declval<CondSpeedLimit>()._has_bits_);
  static const ::RoadPB::Polyline& geom(const CondSpeedLimit* msg);
  static void set_has_geom(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cond_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cond_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_valid_period(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vehicle_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attribute_len(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::RoadPB::Polyline&
CondSpeedLimit::_Internal::geom(const CondSpeedLimit* msg) {
  return *msg->geom_;
}
CondSpeedLimit::CondSpeedLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.CondSpeedLimit)
}
CondSpeedLimit::CondSpeedLimit(const CondSpeedLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  valid_period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_valid_period()) {
    valid_period_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_valid_period(), 
      GetArenaForAllocation());
  }
  vehicle_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vehicle_type()) {
    vehicle_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vehicle_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_geom()) {
    geom_ = new ::RoadPB::Polyline(*from.geom_);
  } else {
    geom_ = nullptr;
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&cond_speed_limit_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(cond_speed_limit_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.CondSpeedLimit)
}

inline void CondSpeedLimit::SharedCtor() {
valid_period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vehicle_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&geom_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cond_speed_limit_) -
    reinterpret_cast<char*>(&geom_)) + sizeof(cond_speed_limit_));
}

CondSpeedLimit::~CondSpeedLimit() {
  // @@protoc_insertion_point(destructor:RoadPB.CondSpeedLimit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CondSpeedLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  valid_period_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete geom_;
}

void CondSpeedLimit::ArenaDtor(void* object) {
  CondSpeedLimit* _this = reinterpret_cast< CondSpeedLimit* >(object);
  (void)_this;
}
void CondSpeedLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CondSpeedLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CondSpeedLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.CondSpeedLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      valid_period_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      vehicle_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(geom_ != nullptr);
      geom_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cond_speed_limit_) -
        reinterpret_cast<char*>(&direction_)) + sizeof(cond_speed_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CondSpeedLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .RoadPB.Polyline geom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_direction(&has_bits);
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cond_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cond_type(&has_bits);
          cond_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cond_speed_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cond_speed_limit(&has_bits);
          cond_speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string valid_period = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_valid_period();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.CondSpeedLimit.valid_period");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vehicle_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_vehicle_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.CondSpeedLimit.vehicle_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double attribute_len = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_attribute_len(&has_bits);
          attribute_len_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CondSpeedLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.CondSpeedLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RoadPB.Polyline geom = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geom(this), target, stream);
  }

  // optional int32 direction = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_direction(), target);
  }

  // optional int32 cond_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cond_type(), target);
  }

  // optional int32 cond_speed_limit = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cond_speed_limit(), target);
  }

  // optional string valid_period = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_valid_period().data(), static_cast<int>(this->_internal_valid_period().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.CondSpeedLimit.valid_period");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_valid_period(), target);
  }

  // optional string vehicle_type = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vehicle_type().data(), static_cast<int>(this->_internal_vehicle_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.CondSpeedLimit.vehicle_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_vehicle_type(), target);
  }

  // optional double attribute_len = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_attribute_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.CondSpeedLimit)
  return target;
}

size_t CondSpeedLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.CondSpeedLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string valid_period = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_valid_period());
    }

    // optional string vehicle_type = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vehicle_type());
    }

    // optional .RoadPB.Polyline geom = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geom_);
    }

    // optional int32 direction = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_direction());
    }

    // optional int32 cond_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cond_type());
    }

    // optional double attribute_len = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 cond_speed_limit = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cond_speed_limit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CondSpeedLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CondSpeedLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CondSpeedLimit::GetClassData() const { return &_class_data_; }

void CondSpeedLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CondSpeedLimit *>(to)->MergeFrom(
      static_cast<const CondSpeedLimit &>(from));
}


void CondSpeedLimit::MergeFrom(const CondSpeedLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.CondSpeedLimit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_valid_period(from._internal_valid_period());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_vehicle_type(from._internal_vehicle_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_geom()->::RoadPB::Polyline::MergeFrom(from._internal_geom());
    }
    if (cached_has_bits & 0x00000008u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000010u) {
      cond_type_ = from.cond_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      attribute_len_ = from.attribute_len_;
    }
    if (cached_has_bits & 0x00000040u) {
      cond_speed_limit_ = from.cond_speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CondSpeedLimit::CopyFrom(const CondSpeedLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.CondSpeedLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CondSpeedLimit::IsInitialized() const {
  return true;
}

void CondSpeedLimit::InternalSwap(CondSpeedLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &valid_period_, GetArenaForAllocation(),
      &other->valid_period_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vehicle_type_, GetArenaForAllocation(),
      &other->vehicle_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CondSpeedLimit, cond_speed_limit_)
      + sizeof(CondSpeedLimit::cond_speed_limit_)
      - PROTOBUF_FIELD_OFFSET(CondSpeedLimit, geom_)>(
          reinterpret_cast<char*>(&geom_),
          reinterpret_cast<char*>(&other->geom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CondSpeedLimit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace RoadPB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RoadPB::LangName* Arena::CreateMaybeMessage< ::RoadPB::LangName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::LangName >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::Point* Arena::CreateMaybeMessage< ::RoadPB::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::Polyline* Arena::CreateMaybeMessage< ::RoadPB::Polyline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::Polyline >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::Polygon* Arena::CreateMaybeMessage< ::RoadPB::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::Circle* Arena::CreateMaybeMessage< ::RoadPB::Circle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::Circle >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::Cylinder* Arena::CreateMaybeMessage< ::RoadPB::Cylinder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::Cylinder >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::BoundingBox* Arena::CreateMaybeMessage< ::RoadPB::BoundingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::BoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::AttributeValue* Arena::CreateMaybeMessage< ::RoadPB::AttributeValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::AttributeValue >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::RangeAttribute* Arena::CreateMaybeMessage< ::RoadPB::RangeAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::RangeAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::FixedSpeedLimit* Arena::CreateMaybeMessage< ::RoadPB::FixedSpeedLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::FixedSpeedLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::CondSpeedLimit* Arena::CreateMaybeMessage< ::RoadPB::CondSpeedLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::CondSpeedLimit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
