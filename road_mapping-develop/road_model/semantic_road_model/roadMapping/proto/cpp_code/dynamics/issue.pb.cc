// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamics/issue.proto

#include "dynamics/issue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace RoadPB {
constexpr ErrorPoint::ErrorPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , min_distance_(0)
  , min_angle_(0){}
struct ErrorPointDefaultTypeInternal {
  constexpr ErrorPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorPointDefaultTypeInternal() {}
  union {
    ErrorPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorPointDefaultTypeInternal _ErrorPoint_default_instance_;
constexpr Issue::Issue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_points_()
  , diff_ids_()
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mark_red_editor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mark_red_timestamp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , match_strategy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , field_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , pt_(nullptr)
  , ref_id_(nullptr)
  , tar_id_(nullptr)
  , relate_id_(nullptr)
  , type_(0)
  , manual_(false)
  , timestamp_(int64_t{0})
  , state_(0)
  , geotype_(0)
  , angle_(0)
  , rule_id_(int64_t{0})
  , mark_red_qcid_(int64_t{0})
  , mark_red_phase2_(0)
  , can_edit_tile_(0)
  , zy_state_(0)
  , diff_state_(0)
  , change_type_(0)
  , diff_phase_(0)
  , len_(0){}
struct IssueDefaultTypeInternal {
  constexpr IssueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IssueDefaultTypeInternal() {}
  union {
    Issue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IssueDefaultTypeInternal _Issue_default_instance_;
}  // namespace RoadPB
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dynamics_2fissue_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dynamics_2fissue_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dynamics_2fissue_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dynamics_2fissue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RoadPB::ErrorPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::ErrorPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::ErrorPoint, position_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::ErrorPoint, min_distance_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::ErrorPoint, min_angle_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, id_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, desc_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, pt_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, manual_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, error_points_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, state_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, geotype_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, angle_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, memo_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, rule_id_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, mark_red_phase2_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, mark_red_qcid_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, mark_red_editor_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, mark_red_timestamp_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, can_edit_tile_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, zy_state_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, diff_state_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, ref_id_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, tar_id_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, change_type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, match_strategy_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, field_name_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, diff_ids_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, relate_id_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, diff_phase_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Issue, len_),
  6,
  0,
  7,
  11,
  12,
  ~0u,
  14,
  13,
  15,
  16,
  1,
  17,
  19,
  18,
  2,
  3,
  20,
  21,
  22,
  8,
  9,
  23,
  4,
  5,
  ~0u,
  10,
  24,
  25,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::RoadPB::ErrorPoint)},
  { 11, 44, sizeof(::RoadPB::Issue)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_ErrorPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_Issue_default_instance_),
};

const char descriptor_table_protodef_dynamics_2fissue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024dynamics/issue.proto\022\006RoadPB\032\027metadata"
  "/metadata.proto\032\023common/common.proto\"V\n\n"
  "ErrorPoint\022\037\n\010position\030\001 \002(\0132\r.RoadPB.Po"
  "int\022\024\n\014min_distance\030\002 \002(\001\022\021\n\tmin_angle\030\003"
  " \002(\001\"\226\005\n\005Issue\022\035\n\002id\030\001 \001(\0132\021.RoadPB.Feat"
  "ureID\022\014\n\004desc\030\002 \001(\t\022\031\n\002pt\030\003 \001(\0132\r.RoadPB"
  ".Point\022\014\n\004type\030\006 \001(\005\022\016\n\006manual\030\007 \001(\010\022(\n\014"
  "error_points\030\010 \003(\0132\022.RoadPB.ErrorPoint\022\r"
  "\n\005state\030\t \001(\005\022\021\n\ttimestamp\030\n \001(\003\022\017\n\007geot"
  "ype\030\013 \001(\005\022\r\n\005angle\030\014 \001(\001\022\014\n\004memo\030\r \001(\t\022\017"
  "\n\007rule_id\030\016 \001(\003\022\027\n\017mark_red_phase2\030\021 \001(\005"
  "\022\025\n\rmark_red_qcid\030\022 \001(\003\022\027\n\017mark_red_edit"
  "or\030\023 \001(\t\022\032\n\022mark_red_timestamp\030\024 \001(\t\022\025\n\r"
  "can_edit_tile\030\025 \001(\005\022\020\n\010zy_state\030\026 \001(\005\022\025\n"
  "\ndiff_state\030\027 \001(\005:\0010\022!\n\006ref_id\030\030 \001(\0132\021.R"
  "oadPB.FeatureID\022!\n\006tar_id\030\031 \001(\0132\021.RoadPB"
  ".FeatureID\022\023\n\013change_type\030\032 \001(\005\022\026\n\016match"
  "_strategy\030\033 \001(\t\022\022\n\nfield_name\030\034 \001(\t\022#\n\010d"
  "iff_ids\030\035 \003(\0132\021.RoadPB.FeatureID\022$\n\trela"
  "te_id\030\036 \001(\0132\021.RoadPB.FeatureID\022\025\n\ndiff_p"
  "hase\030\037 \001(\005:\0010\022\016\n\003len\030  \001(\001:\0010*\374\002\n\tIssueT"
  "ype\022\037\n\033ISSUE_LANE_LINE_UNCONNECTED\020\001\022\"\n\036"
  "ISSUE_LANE_LINE_GEOMETRY_ERROR\020\002\022\036\n\032ISSU"
  "E_LANE_ATTRIBUTE_ERROR\020\003\022&\n\"ISSUE_CURB_B"
  "ARRIER_CONNECTED_ERROR\020\004\022\037\n\033ISSUE_OBJECT"
  "_LOCATION_ERROR\020\005\022 \n\034ISSUE_OBJECT_ATTRIB"
  "UTE_ERROR\020\006\022\031\n\025ISSUE_INFORMATION_LOG\020\007\022\027"
  "\n\023ISSUE_TASK_OVERFLOW\020\010\022\024\n\020ISSUE_AREA_ER"
  "ROR\020\t\022\026\n\022ISSUE_DADIAN_POINT\020\n\022\023\n\017ISSUE_P"
  "CD_ERROR\020\013\022\023\n\017ISSUE_EDGE_MARK\020\014\022\023\n\017ISSUE"
  "_DIFF_LINE\020\r*\227\001\n\tStateType\022\016\n\nSTATE_DONE"
  "\020\001\022\024\n\020STATE_REDUNDANCY\020\002\022\016\n\nSTATE_NONE\020\003"
  "\022\032\n\026STATE_STAGE_REDUNDANCY\020\004\022\021\n\rSTATE_PE"
  "NDING\020\005\022\021\n\rSTATE_SUSPEND\020\006\022\022\n\016STATE_CLEA"
  "RING\020\007*<\n\014GeometryType\022\r\n\tGEO_POINT\020\001\022\014\n"
  "\010GEO_LINE\020\002\022\017\n\013GEO_POLYGON\020\003*+\n\tDiffStat"
  "e\022\007\n\003NON\020\001\022\t\n\005QC_IN\020\002\022\n\n\006QC_OUT\020\003*a\n\021Ele"
  "mentChangeType\022\026\n\022ELEMENT_CHANGE_ADD\020\001\022\031"
  "\n\025ELEMENT_CHANGE_DELETE\020\002\022\031\n\025ELEMENT_CHA"
  "NGE_MODIFY\020\003B\034\n\023com.byd.hdmap.protoB\005iss"
  "ue"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dynamics_2fissue_2eproto_deps[2] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_metadata_2fmetadata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dynamics_2fissue_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dynamics_2fissue_2eproto = {
  false, false, 1602, descriptor_table_protodef_dynamics_2fissue_2eproto, "dynamics/issue.proto", 
  &descriptor_table_dynamics_2fissue_2eproto_once, descriptor_table_dynamics_2fissue_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_dynamics_2fissue_2eproto::offsets,
  file_level_metadata_dynamics_2fissue_2eproto, file_level_enum_descriptors_dynamics_2fissue_2eproto, file_level_service_descriptors_dynamics_2fissue_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_dynamics_2fissue_2eproto_getter() {
  return &descriptor_table_dynamics_2fissue_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dynamics_2fissue_2eproto(&descriptor_table_dynamics_2fissue_2eproto);
namespace RoadPB {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IssueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dynamics_2fissue_2eproto);
  return file_level_enum_descriptors_dynamics_2fissue_2eproto[0];
}
bool IssueType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dynamics_2fissue_2eproto);
  return file_level_enum_descriptors_dynamics_2fissue_2eproto[1];
}
bool StateType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeometryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dynamics_2fissue_2eproto);
  return file_level_enum_descriptors_dynamics_2fissue_2eproto[2];
}
bool GeometryType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DiffState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dynamics_2fissue_2eproto);
  return file_level_enum_descriptors_dynamics_2fissue_2eproto[3];
}
bool DiffState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ElementChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dynamics_2fissue_2eproto);
  return file_level_enum_descriptors_dynamics_2fissue_2eproto[4];
}
bool ElementChangeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ErrorPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorPoint>()._has_bits_);
  static const ::RoadPB::Point& position(const ErrorPoint* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::RoadPB::Point&
ErrorPoint::_Internal::position(const ErrorPoint* msg) {
  return *msg->position_;
}
void ErrorPoint::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ErrorPoint::ErrorPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.ErrorPoint)
}
ErrorPoint::ErrorPoint(const ErrorPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::RoadPB::Point(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&min_distance_, &from.min_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_angle_) -
    reinterpret_cast<char*>(&min_distance_)) + sizeof(min_angle_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.ErrorPoint)
}

inline void ErrorPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_angle_) -
    reinterpret_cast<char*>(&position_)) + sizeof(min_angle_));
}

ErrorPoint::~ErrorPoint() {
  // @@protoc_insertion_point(destructor:RoadPB.ErrorPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ErrorPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void ErrorPoint::ArenaDtor(void* object) {
  ErrorPoint* _this = reinterpret_cast< ErrorPoint* >(object);
  (void)_this;
}
void ErrorPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ErrorPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.ErrorPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&min_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_angle_) -
        reinterpret_cast<char*>(&min_distance_)) + sizeof(min_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .RoadPB.Point position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double min_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_min_distance(&has_bits);
          min_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double min_angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_min_angle(&has_bits);
          min_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.ErrorPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RoadPB.Point position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // required double min_distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_distance(), target);
  }

  // required double min_angle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.ErrorPoint)
  return target;
}

size_t ErrorPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RoadPB.ErrorPoint)
  size_t total_size = 0;

  if (_internal_has_position()) {
    // required .RoadPB.Point position = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (_internal_has_min_distance()) {
    // required double min_distance = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_min_angle()) {
    // required double min_angle = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ErrorPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.ErrorPoint)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .RoadPB.Point position = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);

    // required double min_distance = 2;
    total_size += 1 + 8;

    // required double min_angle = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ErrorPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorPoint::GetClassData() const { return &_class_data_; }

void ErrorPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ErrorPoint *>(to)->MergeFrom(
      static_cast<const ErrorPoint &>(from));
}


void ErrorPoint::MergeFrom(const ErrorPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.ErrorPoint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::RoadPB::Point::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      min_distance_ = from.min_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_angle_ = from.min_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorPoint::CopyFrom(const ErrorPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.ErrorPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorPoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ErrorPoint::InternalSwap(ErrorPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ErrorPoint, min_angle_)
      + sizeof(ErrorPoint::min_angle_)
      - PROTOBUF_FIELD_OFFSET(ErrorPoint, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dynamics_2fissue_2eproto_getter, &descriptor_table_dynamics_2fissue_2eproto_once,
      file_level_metadata_dynamics_2fissue_2eproto[0]);
}

// ===================================================================

class Issue::_Internal {
 public:
  using HasBits = decltype(std::declval<Issue>()._has_bits_);
  static const ::RoadPB::FeatureID& id(const Issue* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::RoadPB::Point& pt(const Issue* msg);
  static void set_has_pt(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_manual(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_geotype(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_memo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rule_id(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_mark_red_phase2(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_mark_red_qcid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_mark_red_editor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mark_red_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_edit_tile(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_zy_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_diff_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::RoadPB::FeatureID& ref_id(const Issue* msg);
  static void set_has_ref_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::RoadPB::FeatureID& tar_id(const Issue* msg);
  static void set_has_tar_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_change_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_match_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_field_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::RoadPB::FeatureID& relate_id(const Issue* msg);
  static void set_has_relate_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_diff_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
};

const ::RoadPB::FeatureID&
Issue::_Internal::id(const Issue* msg) {
  return *msg->id_;
}
const ::RoadPB::Point&
Issue::_Internal::pt(const Issue* msg) {
  return *msg->pt_;
}
const ::RoadPB::FeatureID&
Issue::_Internal::ref_id(const Issue* msg) {
  return *msg->ref_id_;
}
const ::RoadPB::FeatureID&
Issue::_Internal::tar_id(const Issue* msg) {
  return *msg->tar_id_;
}
const ::RoadPB::FeatureID&
Issue::_Internal::relate_id(const Issue* msg) {
  return *msg->relate_id_;
}
void Issue::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void Issue::clear_pt() {
  if (pt_ != nullptr) pt_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void Issue::clear_ref_id() {
  if (ref_id_ != nullptr) ref_id_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void Issue::clear_tar_id() {
  if (tar_id_ != nullptr) tar_id_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void Issue::clear_diff_ids() {
  diff_ids_.Clear();
}
void Issue::clear_relate_id() {
  if (relate_id_ != nullptr) relate_id_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
Issue::Issue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  error_points_(arena),
  diff_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.Issue)
}
Issue::Issue(const Issue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      error_points_(from.error_points_),
      diff_ids_(from.diff_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArenaForAllocation());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_memo()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArenaForAllocation());
  }
  mark_red_editor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mark_red_editor()) {
    mark_red_editor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mark_red_editor(), 
      GetArenaForAllocation());
  }
  mark_red_timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mark_red_timestamp()) {
    mark_red_timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mark_red_timestamp(), 
      GetArenaForAllocation());
  }
  match_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_match_strategy()) {
    match_strategy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_match_strategy(), 
      GetArenaForAllocation());
  }
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field_name()) {
    field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::RoadPB::FeatureID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_pt()) {
    pt_ = new ::RoadPB::Point(*from.pt_);
  } else {
    pt_ = nullptr;
  }
  if (from._internal_has_ref_id()) {
    ref_id_ = new ::RoadPB::FeatureID(*from.ref_id_);
  } else {
    ref_id_ = nullptr;
  }
  if (from._internal_has_tar_id()) {
    tar_id_ = new ::RoadPB::FeatureID(*from.tar_id_);
  } else {
    tar_id_ = nullptr;
  }
  if (from._internal_has_relate_id()) {
    relate_id_ = new ::RoadPB::FeatureID(*from.relate_id_);
  } else {
    relate_id_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&type_)) + sizeof(len_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.Issue)
}

inline void Issue::SharedCtor() {
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mark_red_editor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mark_red_timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
match_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&id_)) + sizeof(len_));
}

Issue::~Issue() {
  // @@protoc_insertion_point(destructor:RoadPB.Issue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Issue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mark_red_editor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mark_red_timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  match_strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete pt_;
  if (this != internal_default_instance()) delete ref_id_;
  if (this != internal_default_instance()) delete tar_id_;
  if (this != internal_default_instance()) delete relate_id_;
}

void Issue::ArenaDtor(void* object) {
  Issue* _this = reinterpret_cast< Issue* >(object);
  (void)_this;
}
void Issue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Issue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Issue::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.Issue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_points_.Clear();
  diff_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      memo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      mark_red_editor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      mark_red_timestamp_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      match_strategy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      field_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(pt_ != nullptr);
      pt_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(ref_id_ != nullptr);
      ref_id_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tar_id_ != nullptr);
      tar_id_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(relate_id_ != nullptr);
      relate_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&geotype_) -
        reinterpret_cast<char*>(&type_)) + sizeof(geotype_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_type_) -
        reinterpret_cast<char*>(&angle_)) + sizeof(change_type_));
  }
  if (cached_has_bits & 0x03000000u) {
    ::memset(&diff_phase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&len_) -
        reinterpret_cast<char*>(&diff_phase_)) + sizeof(len_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Issue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .RoadPB.FeatureID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.Issue.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Point pt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool manual = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_manual(&has_bits);
          manual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RoadPB.ErrorPoint error_points = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 geotype = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_geotype(&has_bits);
          geotype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double angle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string memo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.Issue.memo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 rule_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_rule_id(&has_bits);
          rule_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mark_red_phase2 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_mark_red_phase2(&has_bits);
          mark_red_phase2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mark_red_qcid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_mark_red_qcid(&has_bits);
          mark_red_qcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mark_red_editor = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_mark_red_editor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.Issue.mark_red_editor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mark_red_timestamp = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_mark_red_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.Issue.mark_red_timestamp");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_edit_tile = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_can_edit_tile(&has_bits);
          can_edit_tile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 zy_state = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_zy_state(&has_bits);
          zy_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 diff_state = 23 [default = 0];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_diff_state(&has_bits);
          diff_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.FeatureID ref_id = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.FeatureID tar_id = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tar_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 change_type = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_change_type(&has_bits);
          change_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string match_strategy = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_match_strategy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.Issue.match_strategy");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field_name = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.Issue.field_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RoadPB.FeatureID diff_ids = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_diff_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.FeatureID relate_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_relate_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 diff_phase = 31 [default = 0];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_diff_phase(&has_bits);
          diff_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double len = 32 [default = 0];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_len(&has_bits);
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Issue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.Issue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RoadPB.FeatureID id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.Issue.desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desc(), target);
  }

  // optional .RoadPB.Point pt = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pt(this), target, stream);
  }

  // optional int32 type = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_type(), target);
  }

  // optional bool manual = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_manual(), target);
  }

  // repeated .RoadPB.ErrorPoint error_points = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_error_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_error_points(i), target, stream);
  }

  // optional int32 state = 9;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_state(), target);
  }

  // optional int64 timestamp = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_timestamp(), target);
  }

  // optional int32 geotype = 11;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_geotype(), target);
  }

  // optional double angle = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_angle(), target);
  }

  // optional string memo = 13;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.Issue.memo");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_memo(), target);
  }

  // optional int64 rule_id = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_rule_id(), target);
  }

  // optional int32 mark_red_phase2 = 17;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_mark_red_phase2(), target);
  }

  // optional int64 mark_red_qcid = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_mark_red_qcid(), target);
  }

  // optional string mark_red_editor = 19;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mark_red_editor().data(), static_cast<int>(this->_internal_mark_red_editor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.Issue.mark_red_editor");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_mark_red_editor(), target);
  }

  // optional string mark_red_timestamp = 20;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mark_red_timestamp().data(), static_cast<int>(this->_internal_mark_red_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.Issue.mark_red_timestamp");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_mark_red_timestamp(), target);
  }

  // optional int32 can_edit_tile = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_can_edit_tile(), target);
  }

  // optional int32 zy_state = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_zy_state(), target);
  }

  // optional int32 diff_state = 23 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_diff_state(), target);
  }

  // optional .RoadPB.FeatureID ref_id = 24;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::ref_id(this), target, stream);
  }

  // optional .RoadPB.FeatureID tar_id = 25;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::tar_id(this), target, stream);
  }

  // optional int32 change_type = 26;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_change_type(), target);
  }

  // optional string match_strategy = 27;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_match_strategy().data(), static_cast<int>(this->_internal_match_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.Issue.match_strategy");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_match_strategy(), target);
  }

  // optional string field_name = 28;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.Issue.field_name");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_field_name(), target);
  }

  // repeated .RoadPB.FeatureID diff_ids = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diff_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_diff_ids(i), target, stream);
  }

  // optional .RoadPB.FeatureID relate_id = 30;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::relate_id(this), target, stream);
  }

  // optional int32 diff_phase = 31 [default = 0];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_diff_phase(), target);
  }

  // optional double len = 32 [default = 0];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.Issue)
  return target;
}

size_t Issue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.Issue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoadPB.ErrorPoint error_points = 8;
  total_size += 1UL * this->_internal_error_points_size();
  for (const auto& msg : this->error_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .RoadPB.FeatureID diff_ids = 29;
  total_size += 2UL * this->_internal_diff_ids_size();
  for (const auto& msg : this->diff_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string desc = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc());
    }

    // optional string memo = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_memo());
    }

    // optional string mark_red_editor = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mark_red_editor());
    }

    // optional string mark_red_timestamp = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mark_red_timestamp());
    }

    // optional string match_strategy = 27;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_match_strategy());
    }

    // optional string field_name = 28;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field_name());
    }

    // optional .RoadPB.FeatureID id = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .RoadPB.Point pt = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pt_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .RoadPB.FeatureID ref_id = 24;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ref_id_);
    }

    // optional .RoadPB.FeatureID tar_id = 25;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tar_id_);
    }

    // optional .RoadPB.FeatureID relate_id = 30;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relate_id_);
    }

    // optional int32 type = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional bool manual = 7;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional int64 timestamp = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_timestamp());
    }

    // optional int32 state = 9;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_state());
    }

    // optional int32 geotype = 11;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_geotype());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double angle = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional int64 rule_id = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_rule_id());
    }

    // optional int64 mark_red_qcid = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mark_red_qcid());
    }

    // optional int32 mark_red_phase2 = 17;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mark_red_phase2());
    }

    // optional int32 can_edit_tile = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_edit_tile());
    }

    // optional int32 zy_state = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_zy_state());
    }

    // optional int32 diff_state = 23 [default = 0];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_diff_state());
    }

    // optional int32 change_type = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_change_type());
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional int32 diff_phase = 31 [default = 0];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_diff_phase());
    }

    // optional double len = 32 [default = 0];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Issue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Issue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Issue::GetClassData() const { return &_class_data_; }

void Issue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Issue *>(to)->MergeFrom(
      static_cast<const Issue &>(from));
}


void Issue::MergeFrom(const Issue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.Issue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  error_points_.MergeFrom(from.error_points_);
  diff_ids_.MergeFrom(from.diff_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_memo(from._internal_memo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_mark_red_editor(from._internal_mark_red_editor());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_mark_red_timestamp(from._internal_mark_red_timestamp());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_match_strategy(from._internal_match_strategy());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_field_name(from._internal_field_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_id()->::RoadPB::FeatureID::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_pt()->::RoadPB::Point::MergeFrom(from._internal_pt());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_ref_id()->::RoadPB::FeatureID::MergeFrom(from._internal_ref_id());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tar_id()->::RoadPB::FeatureID::MergeFrom(from._internal_tar_id());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_relate_id()->::RoadPB::FeatureID::MergeFrom(from._internal_relate_id());
    }
    if (cached_has_bits & 0x00000800u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00001000u) {
      manual_ = from.manual_;
    }
    if (cached_has_bits & 0x00002000u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00004000u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00008000u) {
      geotype_ = from.geotype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00020000u) {
      rule_id_ = from.rule_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      mark_red_qcid_ = from.mark_red_qcid_;
    }
    if (cached_has_bits & 0x00080000u) {
      mark_red_phase2_ = from.mark_red_phase2_;
    }
    if (cached_has_bits & 0x00100000u) {
      can_edit_tile_ = from.can_edit_tile_;
    }
    if (cached_has_bits & 0x00200000u) {
      zy_state_ = from.zy_state_;
    }
    if (cached_has_bits & 0x00400000u) {
      diff_state_ = from.diff_state_;
    }
    if (cached_has_bits & 0x00800000u) {
      change_type_ = from.change_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      diff_phase_ = from.diff_phase_;
    }
    if (cached_has_bits & 0x02000000u) {
      len_ = from.len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Issue::CopyFrom(const Issue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.Issue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Issue::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(error_points_)) return false;
  return true;
}

void Issue::InternalSwap(Issue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_points_.InternalSwap(&other->error_points_);
  diff_ids_.InternalSwap(&other->diff_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desc_, GetArenaForAllocation(),
      &other->desc_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memo_, GetArenaForAllocation(),
      &other->memo_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mark_red_editor_, GetArenaForAllocation(),
      &other->mark_red_editor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mark_red_timestamp_, GetArenaForAllocation(),
      &other->mark_red_timestamp_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &match_strategy_, GetArenaForAllocation(),
      &other->match_strategy_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &field_name_, GetArenaForAllocation(),
      &other->field_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Issue, len_)
      + sizeof(Issue::len_)
      - PROTOBUF_FIELD_OFFSET(Issue, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Issue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dynamics_2fissue_2eproto_getter, &descriptor_table_dynamics_2fissue_2eproto_once,
      file_level_metadata_dynamics_2fissue_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace RoadPB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RoadPB::ErrorPoint* Arena::CreateMaybeMessage< ::RoadPB::ErrorPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::ErrorPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::Issue* Arena::CreateMaybeMessage< ::RoadPB::Issue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::Issue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
