// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: link/link.proto

#include "link/link.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace RoadPB {
constexpr Link::Link(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : names_()
  , forward_groups_()
  , backward_groups_()
  , id_(nullptr)
  , snode_id_(nullptr)
  , enode_id_(nullptr)
  , geom_(nullptr)
  , direction_(0)
  , lane_count_(0)
  , left_lanes_(0)
  , right_lanes_(0)
  , multiply_digitized_(0)
  , link_type_(0)
  , road_class_(0)
  , urban_flag_(0)
  , link_length_(0)
  , road_grade_(0)
  , net_grade_(0)
  , provincecode_(0)

  , pavement_info_(0)
  , pass_type_(0)
  , grade_(0){}
struct LinkDefaultTypeInternal {
  constexpr LinkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinkDefaultTypeInternal() {}
  union {
    Link _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinkDefaultTypeInternal _Link_default_instance_;
constexpr Node::Node(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : link_ids_()
  , id_(nullptr)
  , geom_(nullptr)
  , junction_id_(nullptr){}
struct NodeDefaultTypeInternal {
  constexpr NodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeDefaultTypeInternal _Node_default_instance_;
}  // namespace RoadPB
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_link_2flink_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_link_2flink_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_link_2flink_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_link_2flink_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, id_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, snode_id_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, enode_id_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, direction_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, lane_count_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, left_lanes_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, right_lanes_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, multiply_digitized_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, link_type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, road_class_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, urban_flag_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, link_length_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, geom_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, road_grade_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, net_grade_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, names_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, provincecode_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, pavement_info_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, pass_type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, grade_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, forward_groups_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Link, backward_groups_),
  0,
  1,
  2,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  3,
  13,
  14,
  ~0u,
  15,
  16,
  17,
  18,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::RoadPB::Node, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::Node, id_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Node, geom_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Node, link_ids_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::Node, junction_id_),
  0,
  1,
  ~0u,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 27, sizeof(::RoadPB::Link)},
  { 49, 58, sizeof(::RoadPB::Node)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_Link_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_Node_default_instance_),
};

const char descriptor_table_protodef_link_2flink_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017link/link.proto\022\006RoadPB\032\027metadata/meta"
  "data.proto\032\023common/common.proto\"\317\004\n\004Link"
  "\022\035\n\002id\030\001 \001(\0132\021.RoadPB.FeatureID\022#\n\010snode"
  "_id\030\002 \001(\0132\021.RoadPB.FeatureID\022#\n\010enode_id"
  "\030\003 \001(\0132\021.RoadPB.FeatureID\022\021\n\tdirection\030\004"
  " \001(\005\022\022\n\nlane_count\030\005 \001(\005\022\022\n\nleft_lanes\030\006"
  " \001(\005\022\023\n\013right_lanes\030\007 \001(\005\022\032\n\022multiply_di"
  "gitized\030\n \001(\005\022\021\n\tlink_type\030\013 \001(\005\022\022\n\nroad"
  "_class\030\014 \001(\005\022\022\n\nurban_flag\030\r \001(\005\022\023\n\013link"
  "_length\030\021 \001(\001\022\036\n\004geom\030\027 \001(\0132\020.RoadPB.Pol"
  "yline\022\022\n\nroad_grade\030( \001(\005\022\021\n\tnet_grade\030)"
  " \001(\005\022\037\n\005names\030- \003(\0132\020.RoadPB.LangName\022*\n"
  "\014provincecode\030. \001(\0162\024.RoadPB.ProvinceCod"
  "e\022\025\n\rpavement_info\030/ \001(\005\022\021\n\tpass_type\0300 "
  "\001(\005\022\r\n\005grade\0301 \001(\005\022)\n\016forward_groups\0302 \003"
  "(\0132\021.RoadPB.FeatureID\022*\n\017backward_groups"
  "\0303 \003(\0132\021.RoadPB.FeatureID\"\217\001\n\004Node\022\035\n\002id"
  "\030\001 \001(\0132\021.RoadPB.FeatureID\022\033\n\004geom\030\002 \001(\0132"
  "\r.RoadPB.Point\022#\n\010link_ids\030\007 \003(\0132\021.RoadP"
  "B.FeatureID\022&\n\013junction_id\030\010 \001(\0132\021.RoadP"
  "B.FeatureID"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_link_2flink_2eproto_deps[2] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_metadata_2fmetadata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_link_2flink_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_link_2flink_2eproto = {
  false, false, 811, descriptor_table_protodef_link_2flink_2eproto, "link/link.proto", 
  &descriptor_table_link_2flink_2eproto_once, descriptor_table_link_2flink_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_link_2flink_2eproto::offsets,
  file_level_metadata_link_2flink_2eproto, file_level_enum_descriptors_link_2flink_2eproto, file_level_service_descriptors_link_2flink_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_link_2flink_2eproto_getter() {
  return &descriptor_table_link_2flink_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_link_2flink_2eproto(&descriptor_table_link_2flink_2eproto);
namespace RoadPB {

// ===================================================================

class Link::_Internal {
 public:
  using HasBits = decltype(std::declval<Link>()._has_bits_);
  static const ::RoadPB::FeatureID& id(const Link* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::RoadPB::FeatureID& snode_id(const Link* msg);
  static void set_has_snode_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::RoadPB::FeatureID& enode_id(const Link* msg);
  static void set_has_enode_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lane_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_left_lanes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_right_lanes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_multiply_digitized(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_link_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_road_class(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_urban_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_link_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::RoadPB::Polyline& geom(const Link* msg);
  static void set_has_geom(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_road_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_net_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_provincecode(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_pavement_info(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_pass_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::RoadPB::FeatureID&
Link::_Internal::id(const Link* msg) {
  return *msg->id_;
}
const ::RoadPB::FeatureID&
Link::_Internal::snode_id(const Link* msg) {
  return *msg->snode_id_;
}
const ::RoadPB::FeatureID&
Link::_Internal::enode_id(const Link* msg) {
  return *msg->enode_id_;
}
const ::RoadPB::Polyline&
Link::_Internal::geom(const Link* msg) {
  return *msg->geom_;
}
void Link::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Link::clear_snode_id() {
  if (snode_id_ != nullptr) snode_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Link::clear_enode_id() {
  if (enode_id_ != nullptr) enode_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Link::clear_geom() {
  if (geom_ != nullptr) geom_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Link::clear_names() {
  names_.Clear();
}
void Link::clear_forward_groups() {
  forward_groups_.Clear();
}
void Link::clear_backward_groups() {
  backward_groups_.Clear();
}
Link::Link(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  names_(arena),
  forward_groups_(arena),
  backward_groups_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.Link)
}
Link::Link(const Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      names_(from.names_),
      forward_groups_(from.forward_groups_),
      backward_groups_(from.backward_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::RoadPB::FeatureID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_snode_id()) {
    snode_id_ = new ::RoadPB::FeatureID(*from.snode_id_);
  } else {
    snode_id_ = nullptr;
  }
  if (from._internal_has_enode_id()) {
    enode_id_ = new ::RoadPB::FeatureID(*from.enode_id_);
  } else {
    enode_id_ = nullptr;
  }
  if (from._internal_has_geom()) {
    geom_ = new ::RoadPB::Polyline(*from.geom_);
  } else {
    geom_ = nullptr;
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&grade_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(grade_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.Link)
}

inline void Link::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&grade_) -
    reinterpret_cast<char*>(&id_)) + sizeof(grade_));
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:RoadPB.Link)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Link::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete snode_id_;
  if (this != internal_default_instance()) delete enode_id_;
  if (this != internal_default_instance()) delete geom_;
}

void Link::ArenaDtor(void* object) {
  Link* _this = reinterpret_cast< Link* >(object);
  (void)_this;
}
void Link::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.Link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  forward_groups_.Clear();
  backward_groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(snode_id_ != nullptr);
      snode_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(enode_id_ != nullptr);
      enode_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(geom_ != nullptr);
      geom_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_lanes_) -
        reinterpret_cast<char*>(&direction_)) + sizeof(right_lanes_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&multiply_digitized_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&provincecode_) -
        reinterpret_cast<char*>(&multiply_digitized_)) + sizeof(provincecode_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&pavement_info_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grade_) -
        reinterpret_cast<char*>(&pavement_info_)) + sizeof(grade_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Link::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .RoadPB.FeatureID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.FeatureID snode_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_snode_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.FeatureID enode_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_enode_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_direction(&has_bits);
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lane_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_lane_count(&has_bits);
          lane_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 left_lanes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_left_lanes(&has_bits);
          left_lanes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 right_lanes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_right_lanes(&has_bits);
          right_lanes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 multiply_digitized = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_multiply_digitized(&has_bits);
          multiply_digitized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 link_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_link_type(&has_bits);
          link_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 road_class = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_road_class(&has_bits);
          road_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 urban_flag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_urban_flag(&has_bits);
          urban_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double link_length = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_link_length(&has_bits);
          link_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Polyline geom = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_geom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 road_grade = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_road_grade(&has_bits);
          road_grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 net_grade = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_net_grade(&has_bits);
          net_grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RoadPB.LangName names = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.ProvinceCode provincecode = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::RoadPB::ProvinceCode_IsValid(val))) {
            _internal_set_provincecode(static_cast<::RoadPB::ProvinceCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 pavement_info = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_pavement_info(&has_bits);
          pavement_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pass_type = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_pass_type(&has_bits);
          pass_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 grade = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_grade(&has_bits);
          grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RoadPB.FeatureID forward_groups = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_forward_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .RoadPB.FeatureID backward_groups = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_backward_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<410>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Link::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.Link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RoadPB.FeatureID id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .RoadPB.FeatureID snode_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::snode_id(this), target, stream);
  }

  // optional .RoadPB.FeatureID enode_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::enode_id(this), target, stream);
  }

  // optional int32 direction = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_direction(), target);
  }

  // optional int32 lane_count = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_lane_count(), target);
  }

  // optional int32 left_lanes = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_left_lanes(), target);
  }

  // optional int32 right_lanes = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_right_lanes(), target);
  }

  // optional int32 multiply_digitized = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_multiply_digitized(), target);
  }

  // optional int32 link_type = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_link_type(), target);
  }

  // optional int32 road_class = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_road_class(), target);
  }

  // optional int32 urban_flag = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_urban_flag(), target);
  }

  // optional double link_length = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_link_length(), target);
  }

  // optional .RoadPB.Polyline geom = 23;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::geom(this), target, stream);
  }

  // optional int32 road_grade = 40;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_road_grade(), target);
  }

  // optional int32 net_grade = 41;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_net_grade(), target);
  }

  // repeated .RoadPB.LangName names = 45;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_names_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, this->_internal_names(i), target, stream);
  }

  // optional .RoadPB.ProvinceCode provincecode = 46;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      46, this->_internal_provincecode(), target);
  }

  // optional int32 pavement_info = 47;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(47, this->_internal_pavement_info(), target);
  }

  // optional int32 pass_type = 48;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(48, this->_internal_pass_type(), target);
  }

  // optional int32 grade = 49;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(49, this->_internal_grade(), target);
  }

  // repeated .RoadPB.FeatureID forward_groups = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_forward_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, this->_internal_forward_groups(i), target, stream);
  }

  // repeated .RoadPB.FeatureID backward_groups = 51;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_backward_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, this->_internal_backward_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.Link)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoadPB.LangName names = 45;
  total_size += 2UL * this->_internal_names_size();
  for (const auto& msg : this->names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .RoadPB.FeatureID forward_groups = 50;
  total_size += 2UL * this->_internal_forward_groups_size();
  for (const auto& msg : this->forward_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .RoadPB.FeatureID backward_groups = 51;
  total_size += 2UL * this->_internal_backward_groups_size();
  for (const auto& msg : this->backward_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .RoadPB.FeatureID id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .RoadPB.FeatureID snode_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *snode_id_);
    }

    // optional .RoadPB.FeatureID enode_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enode_id_);
    }

    // optional .RoadPB.Polyline geom = 23;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geom_);
    }

    // optional int32 direction = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_direction());
    }

    // optional int32 lane_count = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lane_count());
    }

    // optional int32 left_lanes = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_left_lanes());
    }

    // optional int32 right_lanes = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_right_lanes());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 multiply_digitized = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_multiply_digitized());
    }

    // optional int32 link_type = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_link_type());
    }

    // optional int32 road_class = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_road_class());
    }

    // optional int32 urban_flag = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_urban_flag());
    }

    // optional double link_length = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional int32 road_grade = 40;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_road_grade());
    }

    // optional int32 net_grade = 41;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_net_grade());
    }

    // optional .RoadPB.ProvinceCode provincecode = 46;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_provincecode());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional int32 pavement_info = 47;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pavement_info());
    }

    // optional int32 pass_type = 48;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pass_type());
    }

    // optional int32 grade = 49;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_grade());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Link::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Link::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Link::GetClassData() const { return &_class_data_; }

void Link::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Link *>(to)->MergeFrom(
      static_cast<const Link &>(from));
}


void Link::MergeFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.Link)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  forward_groups_.MergeFrom(from.forward_groups_);
  backward_groups_.MergeFrom(from.backward_groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::RoadPB::FeatureID::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_snode_id()->::RoadPB::FeatureID::MergeFrom(from._internal_snode_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_enode_id()->::RoadPB::FeatureID::MergeFrom(from._internal_enode_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_geom()->::RoadPB::Polyline::MergeFrom(from._internal_geom());
    }
    if (cached_has_bits & 0x00000010u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000020u) {
      lane_count_ = from.lane_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      left_lanes_ = from.left_lanes_;
    }
    if (cached_has_bits & 0x00000080u) {
      right_lanes_ = from.right_lanes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      multiply_digitized_ = from.multiply_digitized_;
    }
    if (cached_has_bits & 0x00000200u) {
      link_type_ = from.link_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      road_class_ = from.road_class_;
    }
    if (cached_has_bits & 0x00000800u) {
      urban_flag_ = from.urban_flag_;
    }
    if (cached_has_bits & 0x00001000u) {
      link_length_ = from.link_length_;
    }
    if (cached_has_bits & 0x00002000u) {
      road_grade_ = from.road_grade_;
    }
    if (cached_has_bits & 0x00004000u) {
      net_grade_ = from.net_grade_;
    }
    if (cached_has_bits & 0x00008000u) {
      provincecode_ = from.provincecode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      pavement_info_ = from.pavement_info_;
    }
    if (cached_has_bits & 0x00020000u) {
      pass_type_ = from.pass_type_;
    }
    if (cached_has_bits & 0x00040000u) {
      grade_ = from.grade_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::InternalSwap(Link* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  names_.InternalSwap(&other->names_);
  forward_groups_.InternalSwap(&other->forward_groups_);
  backward_groups_.InternalSwap(&other->backward_groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Link, grade_)
      + sizeof(Link::grade_)
      - PROTOBUF_FIELD_OFFSET(Link, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Link::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_link_2flink_2eproto_getter, &descriptor_table_link_2flink_2eproto_once,
      file_level_metadata_link_2flink_2eproto[0]);
}

// ===================================================================

class Node::_Internal {
 public:
  using HasBits = decltype(std::declval<Node>()._has_bits_);
  static const ::RoadPB::FeatureID& id(const Node* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::RoadPB::Point& geom(const Node* msg);
  static void set_has_geom(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::RoadPB::FeatureID& junction_id(const Node* msg);
  static void set_has_junction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::RoadPB::FeatureID&
Node::_Internal::id(const Node* msg) {
  return *msg->id_;
}
const ::RoadPB::Point&
Node::_Internal::geom(const Node* msg) {
  return *msg->geom_;
}
const ::RoadPB::FeatureID&
Node::_Internal::junction_id(const Node* msg) {
  return *msg->junction_id_;
}
void Node::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Node::clear_geom() {
  if (geom_ != nullptr) geom_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Node::clear_link_ids() {
  link_ids_.Clear();
}
void Node::clear_junction_id() {
  if (junction_id_ != nullptr) junction_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  link_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      link_ids_(from.link_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::RoadPB::FeatureID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_geom()) {
    geom_ = new ::RoadPB::Point(*from.geom_);
  } else {
    geom_ = nullptr;
  }
  if (from._internal_has_junction_id()) {
    junction_id_ = new ::RoadPB::FeatureID(*from.junction_id_);
  } else {
    junction_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RoadPB.Node)
}

inline void Node::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&junction_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(junction_id_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:RoadPB.Node)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete geom_;
  if (this != internal_default_instance()) delete junction_id_;
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(geom_ != nullptr);
      geom_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(junction_id_ != nullptr);
      junction_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .RoadPB.FeatureID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Point geom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_geom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RoadPB.FeatureID link_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_link_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.FeatureID junction_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_junction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RoadPB.FeatureID id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .RoadPB.Point geom = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::geom(this), target, stream);
  }

  // repeated .RoadPB.FeatureID link_ids = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_link_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_link_ids(i), target, stream);
  }

  // optional .RoadPB.FeatureID junction_id = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::junction_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoadPB.FeatureID link_ids = 7;
  total_size += 1UL * this->_internal_link_ids_size();
  for (const auto& msg : this->link_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .RoadPB.FeatureID id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .RoadPB.Point geom = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geom_);
    }

    // optional .RoadPB.FeatureID junction_id = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *junction_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }

void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Node *>(to)->MergeFrom(
      static_cast<const Node &>(from));
}


void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.Node)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  link_ids_.MergeFrom(from.link_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::RoadPB::FeatureID::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_geom()->::RoadPB::Point::MergeFrom(from._internal_geom());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_junction_id()->::RoadPB::FeatureID::MergeFrom(from._internal_junction_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  link_ids_.InternalSwap(&other->link_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, junction_id_)
      + sizeof(Node::junction_id_)
      - PROTOBUF_FIELD_OFFSET(Node, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_link_2flink_2eproto_getter, &descriptor_table_link_2flink_2eproto_once,
      file_level_metadata_link_2flink_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace RoadPB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RoadPB::Link* Arena::CreateMaybeMessage< ::RoadPB::Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::Link >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::Node* Arena::CreateMaybeMessage< ::RoadPB::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::Node >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
