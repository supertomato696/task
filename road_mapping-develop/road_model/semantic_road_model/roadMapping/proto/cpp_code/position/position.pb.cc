// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: position/position.proto

#include "position/position.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace RoadPB {
constexpr PositionObject::PositionObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_groups_()
  , content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , border_(nullptr)
  , circle_(nullptr)
  , pole_(nullptr)
  , type_(0)
  , subtype_(0){}
struct PositionObjectDefaultTypeInternal {
  constexpr PositionObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionObjectDefaultTypeInternal() {}
  union {
    PositionObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionObjectDefaultTypeInternal _PositionObject_default_instance_;
}  // namespace RoadPB
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_position_2fposition_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_position_2fposition_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_position_2fposition_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_position_2fposition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RoadPB::PositionObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::PositionObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::PositionObject, id_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::PositionObject, border_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::PositionObject, circle_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::PositionObject, pole_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::PositionObject, type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::PositionObject, content_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::PositionObject, lane_groups_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::PositionObject, subtype_),
  1,
  2,
  3,
  4,
  5,
  0,
  ~0u,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::RoadPB::PositionObject)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_PositionObject_default_instance_),
};

const char descriptor_table_protodef_position_2fposition_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027position/position.proto\022\006RoadPB\032\027metad"
  "ata/metadata.proto\032\023common/common.proto\""
  "\334\003\n\016PositionObject\022\035\n\002id\030\001 \001(\0132\021.RoadPB."
  "FeatureID\022\037\n\006border\030\002 \001(\0132\017.RoadPB.Polyg"
  "on\022\036\n\006circle\030\003 \001(\0132\016.RoadPB.Circle\022\036\n\004po"
  "le\030\004 \001(\0132\020.RoadPB.Polyline\022\014\n\004type\030\005 \001(\005"
  "\022\017\n\007content\030\006 \001(\t\022&\n\013lane_groups\030\007 \003(\0132\021"
  ".RoadPB.FeatureID\022\017\n\007subtype\030\010 \001(\005\"\217\001\n\nO"
  "bjectType\022\013\n\007UNKNOWN\020\000\022\010\n\004POLE\020\001\022\010\n\004SIGN"
  "\020\002\022\014\n\010OVERHEAD\020\005\022\021\n\rTRAFFIC_LIGHT\020\006\022\020\n\014L"
  "ANE_MARKING\020\007\022\r\n\tSTOP_LINE\020\010\022\016\n\nSPEED_BU"
  "MP\020\t\022\016\n\nCROSS_WALK\020\n\"`\n\rObjectSubType\022\023\n"
  "\017UNKNOWN_SUBTYPE\020\000\022\t\n\005SOLID\020\001\022\020\n\014DOUBLE_"
  "SOLID\020\002\022\n\n\006DASHED\020\003\022\021\n\rDOUBLE_DASHED\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_position_2fposition_2eproto_deps[2] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_metadata_2fmetadata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_position_2fposition_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_position_2fposition_2eproto = {
  false, false, 558, descriptor_table_protodef_position_2fposition_2eproto, "position/position.proto", 
  &descriptor_table_position_2fposition_2eproto_once, descriptor_table_position_2fposition_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_position_2fposition_2eproto::offsets,
  file_level_metadata_position_2fposition_2eproto, file_level_enum_descriptors_position_2fposition_2eproto, file_level_service_descriptors_position_2fposition_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_position_2fposition_2eproto_getter() {
  return &descriptor_table_position_2fposition_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_position_2fposition_2eproto(&descriptor_table_position_2fposition_2eproto);
namespace RoadPB {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionObject_ObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_position_2fposition_2eproto);
  return file_level_enum_descriptors_position_2fposition_2eproto[0];
}
bool PositionObject_ObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PositionObject_ObjectType PositionObject::UNKNOWN;
constexpr PositionObject_ObjectType PositionObject::POLE;
constexpr PositionObject_ObjectType PositionObject::SIGN;
constexpr PositionObject_ObjectType PositionObject::OVERHEAD;
constexpr PositionObject_ObjectType PositionObject::TRAFFIC_LIGHT;
constexpr PositionObject_ObjectType PositionObject::LANE_MARKING;
constexpr PositionObject_ObjectType PositionObject::STOP_LINE;
constexpr PositionObject_ObjectType PositionObject::SPEED_BUMP;
constexpr PositionObject_ObjectType PositionObject::CROSS_WALK;
constexpr PositionObject_ObjectType PositionObject::ObjectType_MIN;
constexpr PositionObject_ObjectType PositionObject::ObjectType_MAX;
constexpr int PositionObject::ObjectType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionObject_ObjectSubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_position_2fposition_2eproto);
  return file_level_enum_descriptors_position_2fposition_2eproto[1];
}
bool PositionObject_ObjectSubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PositionObject_ObjectSubType PositionObject::UNKNOWN_SUBTYPE;
constexpr PositionObject_ObjectSubType PositionObject::SOLID;
constexpr PositionObject_ObjectSubType PositionObject::DOUBLE_SOLID;
constexpr PositionObject_ObjectSubType PositionObject::DASHED;
constexpr PositionObject_ObjectSubType PositionObject::DOUBLE_DASHED;
constexpr PositionObject_ObjectSubType PositionObject::ObjectSubType_MIN;
constexpr PositionObject_ObjectSubType PositionObject::ObjectSubType_MAX;
constexpr int PositionObject::ObjectSubType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PositionObject::_Internal {
 public:
  using HasBits = decltype(std::declval<PositionObject>()._has_bits_);
  static const ::RoadPB::FeatureID& id(const PositionObject* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::RoadPB::Polygon& border(const PositionObject* msg);
  static void set_has_border(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::RoadPB::Circle& circle(const PositionObject* msg);
  static void set_has_circle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::RoadPB::Polyline& pole(const PositionObject* msg);
  static void set_has_pole(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subtype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::RoadPB::FeatureID&
PositionObject::_Internal::id(const PositionObject* msg) {
  return *msg->id_;
}
const ::RoadPB::Polygon&
PositionObject::_Internal::border(const PositionObject* msg) {
  return *msg->border_;
}
const ::RoadPB::Circle&
PositionObject::_Internal::circle(const PositionObject* msg) {
  return *msg->circle_;
}
const ::RoadPB::Polyline&
PositionObject::_Internal::pole(const PositionObject* msg) {
  return *msg->pole_;
}
void PositionObject::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PositionObject::clear_border() {
  if (border_ != nullptr) border_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void PositionObject::clear_circle() {
  if (circle_ != nullptr) circle_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void PositionObject::clear_pole() {
  if (pole_ != nullptr) pole_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void PositionObject::clear_lane_groups() {
  lane_groups_.Clear();
}
PositionObject::PositionObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lane_groups_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RoadPB.PositionObject)
}
PositionObject::PositionObject(const PositionObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      lane_groups_(from.lane_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::RoadPB::FeatureID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_border()) {
    border_ = new ::RoadPB::Polygon(*from.border_);
  } else {
    border_ = nullptr;
  }
  if (from._internal_has_circle()) {
    circle_ = new ::RoadPB::Circle(*from.circle_);
  } else {
    circle_ = nullptr;
  }
  if (from._internal_has_pole()) {
    pole_ = new ::RoadPB::Polyline(*from.pole_);
  } else {
    pole_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&subtype_) -
    reinterpret_cast<char*>(&type_)) + sizeof(subtype_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.PositionObject)
}

inline void PositionObject::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subtype_) -
    reinterpret_cast<char*>(&id_)) + sizeof(subtype_));
}

PositionObject::~PositionObject() {
  // @@protoc_insertion_point(destructor:RoadPB.PositionObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PositionObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete border_;
  if (this != internal_default_instance()) delete circle_;
  if (this != internal_default_instance()) delete pole_;
}

void PositionObject::ArenaDtor(void* object) {
  PositionObject* _this = reinterpret_cast< PositionObject* >(object);
  (void)_this;
}
void PositionObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PositionObject::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.PositionObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(border_ != nullptr);
      border_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(circle_ != nullptr);
      circle_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(pole_ != nullptr);
      pole_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subtype_) -
        reinterpret_cast<char*>(&type_)) + sizeof(subtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .RoadPB.FeatureID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Polygon border = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_border(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Circle circle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_circle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.Polyline pole = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pole(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.PositionObject.content");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RoadPB.FeatureID lane_groups = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 subtype = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_subtype(&has_bits);
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.PositionObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RoadPB.FeatureID id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .RoadPB.Polygon border = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::border(this), target, stream);
  }

  // optional .RoadPB.Circle circle = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::circle(this), target, stream);
  }

  // optional .RoadPB.Polyline pole = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pole(this), target, stream);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  // optional string content = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.PositionObject.content");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_content(), target);
  }

  // repeated .RoadPB.FeatureID lane_groups = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_lane_groups(i), target, stream);
  }

  // optional int32 subtype = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_subtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.PositionObject)
  return target;
}

size_t PositionObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.PositionObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoadPB.FeatureID lane_groups = 7;
  total_size += 1UL * this->_internal_lane_groups_size();
  for (const auto& msg : this->lane_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string content = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional .RoadPB.FeatureID id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .RoadPB.Polygon border = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *border_);
    }

    // optional .RoadPB.Circle circle = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *circle_);
    }

    // optional .RoadPB.Polyline pole = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pole_);
    }

    // optional int32 type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 subtype = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_subtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PositionObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionObject::GetClassData() const { return &_class_data_; }

void PositionObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PositionObject *>(to)->MergeFrom(
      static_cast<const PositionObject &>(from));
}


void PositionObject::MergeFrom(const PositionObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.PositionObject)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_groups_.MergeFrom(from.lane_groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_id()->::RoadPB::FeatureID::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_border()->::RoadPB::Polygon::MergeFrom(from._internal_border());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_circle()->::RoadPB::Circle::MergeFrom(from._internal_circle());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_pole()->::RoadPB::Polyline::MergeFrom(from._internal_pole());
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      subtype_ = from.subtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionObject::CopyFrom(const PositionObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.PositionObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionObject::IsInitialized() const {
  return true;
}

void PositionObject::InternalSwap(PositionObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lane_groups_.InternalSwap(&other->lane_groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, GetArenaForAllocation(),
      &other->content_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionObject, subtype_)
      + sizeof(PositionObject::subtype_)
      - PROTOBUF_FIELD_OFFSET(PositionObject, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_position_2fposition_2eproto_getter, &descriptor_table_position_2fposition_2eproto_once,
      file_level_metadata_position_2fposition_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace RoadPB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RoadPB::PositionObject* Arena::CreateMaybeMessage< ::RoadPB::PositionObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::PositionObject >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
