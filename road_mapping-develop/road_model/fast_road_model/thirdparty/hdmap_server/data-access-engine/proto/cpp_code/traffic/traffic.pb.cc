// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic/traffic.proto

#include "traffic/traffic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_metadata_2fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeatureID_metadata_2fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2ftraffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneMarking_traffic_2ftraffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2ftraffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedBump_traffic_2ftraffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2ftraffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficCondition_traffic_2ftraffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2ftraffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficLight_traffic_2ftraffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2ftraffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficSign_traffic_2ftraffic_2eproto;
namespace RoadPB {
class TrafficConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficCondition> _instance;
} _TrafficCondition_default_instance_;
class TrafficSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSign> _instance;
} _TrafficSign_default_instance_;
class TrafficLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLight> _instance;
} _TrafficLight_default_instance_;
class LaneMarkingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneMarking> _instance;
} _LaneMarking_default_instance_;
class SpeedBumpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedBump> _instance;
} _SpeedBump_default_instance_;
class TrafficInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficInfo> _instance;
} _TrafficInfo_default_instance_;
}  // namespace RoadPB
static void InitDefaultsscc_info_LaneMarking_traffic_2ftraffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadPB::_LaneMarking_default_instance_;
    new (ptr) ::RoadPB::LaneMarking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadPB::LaneMarking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneMarking_traffic_2ftraffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LaneMarking_traffic_2ftraffic_2eproto}, {}};

static void InitDefaultsscc_info_SpeedBump_traffic_2ftraffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadPB::_SpeedBump_default_instance_;
    new (ptr) ::RoadPB::SpeedBump();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadPB::SpeedBump::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedBump_traffic_2ftraffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeedBump_traffic_2ftraffic_2eproto}, {}};

static void InitDefaultsscc_info_TrafficCondition_traffic_2ftraffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadPB::_TrafficCondition_default_instance_;
    new (ptr) ::RoadPB::TrafficCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadPB::TrafficCondition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficCondition_traffic_2ftraffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficCondition_traffic_2ftraffic_2eproto}, {}};

static void InitDefaultsscc_info_TrafficInfo_traffic_2ftraffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadPB::_TrafficInfo_default_instance_;
    new (ptr) ::RoadPB::TrafficInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadPB::TrafficInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TrafficInfo_traffic_2ftraffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_TrafficInfo_traffic_2ftraffic_2eproto}, {
      &scc_info_FeatureID_metadata_2fmetadata_2eproto.base,
      &scc_info_TrafficSign_traffic_2ftraffic_2eproto.base,
      &scc_info_TrafficLight_traffic_2ftraffic_2eproto.base,
      &scc_info_LaneMarking_traffic_2ftraffic_2eproto.base,
      &scc_info_SpeedBump_traffic_2ftraffic_2eproto.base,}};

static void InitDefaultsscc_info_TrafficLight_traffic_2ftraffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadPB::_TrafficLight_default_instance_;
    new (ptr) ::RoadPB::TrafficLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadPB::TrafficLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficLight_traffic_2ftraffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficLight_traffic_2ftraffic_2eproto}, {}};

static void InitDefaultsscc_info_TrafficSign_traffic_2ftraffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoadPB::_TrafficSign_default_instance_;
    new (ptr) ::RoadPB::TrafficSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadPB::TrafficSign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficSign_traffic_2ftraffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficSign_traffic_2ftraffic_2eproto}, {
      &scc_info_TrafficCondition_traffic_2ftraffic_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_traffic_2ftraffic_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_traffic_2ftraffic_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_traffic_2ftraffic_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_traffic_2ftraffic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficCondition, type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficCondition, value_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficCondition, vehicle_type_mask_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficCondition, load_type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficCondition, start_minues_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficCondition, end_minues_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficCondition, weather_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficCondition, fuzzy_time_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficCondition, direction_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficSign, type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficSign, shape_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficSign, value_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficSign, content_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficSign, variable_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficSign, panels_),
  1,
  2,
  3,
  0,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficLight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficLight, type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficLight, arrange_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficLight, bulbs_num_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::RoadPB::LaneMarking, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::LaneMarking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::LaneMarking, type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::LaneMarking, value_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::LaneMarking, content_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::RoadPB::SpeedBump, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::SpeedBump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::SpeedBump, height_),
  0,
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficInfo, id_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficInfo, objs_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficInfo, type_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficInfo, lanes_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficInfo, lanegroups_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficInfo, sign_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficInfo, light_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficInfo, marking_),
  PROTOBUF_FIELD_OFFSET(::RoadPB::TrafficInfo, bump_),
  0,
  ~0u,
  7,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::RoadPB::TrafficCondition)},
  { 23, 34, sizeof(::RoadPB::TrafficSign)},
  { 40, 48, sizeof(::RoadPB::TrafficLight)},
  { 51, 59, sizeof(::RoadPB::LaneMarking)},
  { 62, 68, sizeof(::RoadPB::SpeedBump)},
  { 69, 83, sizeof(::RoadPB::TrafficInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_TrafficCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_TrafficSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_TrafficLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_LaneMarking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_SpeedBump_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoadPB::_TrafficInfo_default_instance_),
};

const char descriptor_table_protodef_traffic_2ftraffic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025traffic/traffic.proto\022\006RoadPB\032\027metadat"
  "a/metadata.proto\032\023common/common.proto\"\333\006"
  "\n\020TrafficCondition\022\014\n\004type\030\001 \001(\005\022\r\n\005valu"
  "e\030\002 \001(\005\022\031\n\021vehicle_type_mask\030\003 \001(\005\022\021\n\tlo"
  "ad_type\030\004 \001(\005\022\024\n\014start_minues\030\005 \001(\005\022\022\n\ne"
  "nd_minues\030\006 \001(\005\022\017\n\007weather\030\007 \001(\005\022\022\n\nfuzz"
  "y_time\030\010 \001(\005\022\021\n\tdirection\030\t \001(\005\"u\n\rCondi"
  "tionType\022\013\n\007NUMERIC\020\000\022\013\n\007VEHICLE\020\001\022\010\n\004LO"
  "AD\020\002\022\017\n\013TIME_OF_DAY\020\003\022\013\n\007WEATHER\020\004\022\016\n\nFU"
  "ZZY_TIME\020\005\022\022\n\016TURN_DIRECTION\020\006\"\332\001\n\010LoadT"
  "ype\022\023\n\017WATER_POLLUTING\020\001\022\r\n\tEXPLOSIVE\020\002\022"
  "\023\n\017OTHER_DANGEROUS\020\003\022\t\n\005EMPTY\020\004\022\013\n\007SPECI"
  "AL\020\005\022\n\n\006GASSES\020\006\022\025\n\021FLAMMABLE_LIQUIDS\020\007\022"
  "\024\n\020FLAMMABLE_SOLIDS\020\010\022\r\n\tOXIDIZING\020\t\022\024\n\020"
  "TOXIC_INFECTIOUS\020\n\022\020\n\014RADIO_ACTIVE\020\013\022\r\n\t"
  "CORROSIVE\020\014\"k\n\007Weather\022\013\n\007UNKNOWN\020\000\022\016\n\nN"
  "O_SPECIAL\020\001\022\014\n\010SUNSHINE\020\002\022\010\n\004RAIN\020\003\022\007\n\003F"
  "OG\020\004\022\010\n\004SNOW\020\005\022\007\n\003ICE\020\006\022\017\n\013STRONG_WIND\020\007"
  "\";\n\tFuzzyTime\022\020\n\014TIME_UNKNOWN\020\001\022\014\n\010TIME_"
  "DAY\020\002\022\016\n\nTIME_NIGHT\020\003\"\233\001\n\rTurnDirection\022"
  "\010\n\004NONE\020\000\022\014\n\010STRAIGHT\020\001\022\020\n\014SLIGHT_RIGHT\020"
  "\002\022\t\n\005RIGHT\020\004\022\016\n\nHARD_RIGHT\020\010\022\t\n\005UTURN\020\020\022"
  "\r\n\tHARD_LEFT\020 \022\010\n\004LEFT\020@\022\020\n\013SLIGHT_LEFT\020"
  "\200\001\022\017\n\002NA\020\377\377\377\377\377\377\377\377\377\001\"\306\005\n\013TrafficSign\022\014\n\004t"
  "ype\030\003 \001(\005\022\r\n\005shape\030\004 \001(\005\022\r\n\005value\030\006 \001(\002\022"
  "\017\n\007content\030\007 \001(\t\022\020\n\010variable\030\010 \001(\010\022(\n\006pa"
  "nels\030\t \003(\0132\030.RoadPB.TrafficCondition\"\237\003\n"
  "\010SignType\022\013\n\007UNKNOWN\020\000\022\014\n\010STOP_FOR\020\001\022\014\n\010"
  "SLOW_FOR\020\002\022\014\n\010GIVE_WAY\020\003\022\t\n\005NOWAY\020\004\022\014\n\010N"
  "O_ENTRY\020\005\022\016\n\nNO_PARKING\020\006\022\023\n\017NO_LONG_PAR"
  "KING\020\007\022\021\n\rPARKING_CHECK\020\010\022\014\n\010NO_MOTOR\020\t\022"
  "\024\n\020SPEED_LIMIT_HIGH\020\n\022\023\n\017SPEED_LIMIT_LOW"
  "\020\013\022\027\n\023SPEED_LIMIT_REMOVED\020\014\022\027\n\023CHILDREN_"
  "SCHOOLZONE\020\r\022\r\n\tROADWORKS\020\016\022\030\n\024OVERTAKIN"
  "GPROHIBITED\020\017\022 \n\034ENDOFPROHIBITIONONOVERT"
  "AKING\020\020\022\020\n\014ENDOFHIGHWAY\020\021\022\022\n\016STARTOFHIGH"
  "WAY\020\022\022\r\n\tLEFTCURVE\020\023\022\016\n\nRIGHTCURVE\020\024\022\020\n\014"
  "SERIESCURVES\020\025\"\233\001\n\005Shape\022\021\n\rUNKNOWN_SHAP"
  "E\020\000\022\r\n\tRECTANGLE\020\001\022\014\n\010TRIANGLE\020\002\022\n\n\006CIRC"
  "LE\020\003\022\013\n\007DIAMOND\020\004\022\013\n\007HEXAGON\020\005\022\013\n\007OCTAGO"
  "N\020\006\022\r\n\tFURCATION\020\007\022\017\n\013COMBINATION\020\010\022\017\n\013O"
  "THER_SHAPE\020c\"\237\001\n\014TrafficLight\022\014\n\004type\030\001 "
  "\001(\005\022\017\n\007arrange\030\004 \001(\005\022\021\n\tbulbs_num\030\n \001(\005\""
  "]\n\tLightType\022\010\n\004NONE\020\000\022\t\n\005ROUND\020\001\022\t\n\005CRO"
  "SS\020\002\022\016\n\nPEDESTRIAN\020\003\022\013\n\007BICYCLE\020\004\022\t\n\005ARR"
  "OW\020\005\022\010\n\004TIME\020\006\"\320\005\n\013LaneMarking\022\014\n\004type\030\001"
  " \001(\005\022\r\n\005value\030\006 \001(\002\022\017\n\007content\030\007 \001(\t\"\222\005\n"
  "\013MarkingType\022\021\n\rARROW_UNKNOWN\020\000\022\016\n\nARROW"
  "_LEFT\020\001\022\021\n\rARROW_FORWARD\020\002\022\017\n\013ARROW_RIGH"
  "T\020\003\022\032\n\026ARROW_LEFT_AND_FORWARD\020\004\022\033\n\027ARROW"
  "_RIGHT_AND_FORWARD\020\005\022\030\n\024ARROW_LEFT_AND_R"
  "IGHT\020\006\022\020\n\014ARROW_U_TURN\020\007\022\034\n\030ARROW_U_TURN"
  "_AND_FORWARD\020\010\022\031\n\025ARROW_U_TURN_AND_LEFT\020"
  "\t\022\024\n\020ARROW_MERGE_LEFT\020\n\022\025\n\021ARROW_MERGE_R"
  "IGHT\020\013\022\024\n\020CROSSWALK_NOTICE\020\014\022\023\n\017SPEED_LI"
  "MIT_LOW\020\r\022\024\n\020SPEED_LIMIT_HIGH\020\016\022\026\n\022ARROW"
  "_NO_LEFT_TURN\020\017\022\027\n\023ARROW_NO_RIGHT_TURN\020\020"
  "\022\023\n\017ARROW_NO_U_TURN\020\021\022$\n ARROW_FORWARD_A"
  "ND_LEFT_AND_RIGHT\020\022\022%\n!ARROW_FORWARD_AND"
  "_U_TURN_AND_LEFT\020\023\022\032\n\026ARROW_RIGHT_AND_U_"
  "TURN\020\024\022\020\n\014MARKING_TEXT\020\025\022\020\n\014MARKING_TIME"
  "\020\026\022\034\n\030CHECK_FOLLOWING_DISTANCE\020\027\022\023\n\017STOP"
  "TO_GIVE_WAY\020\030\022\030\n\024SLOWDOWN_TO_GIVE_WAY\020\031\022"
  "\020\n\014MARKING_NETS\020\033\"\033\n\tSpeedBump\022\016\n\006height"
  "\030\001 \001(\002\"\363\002\n\013TrafficInfo\022\035\n\002id\030\001 \001(\0132\021.Roa"
  "dPB.FeatureID\022\037\n\004objs\030\002 \003(\0132\021.RoadPB.Fea"
  "tureID\022\014\n\004type\030\003 \001(\005\022 \n\005lanes\030\004 \001(\0132\021.Ro"
  "adPB.FeatureID\022%\n\nlanegroups\030\005 \001(\0132\021.Roa"
  "dPB.FeatureID\022!\n\004sign\030\006 \001(\0132\023.RoadPB.Tra"
  "fficSign\022#\n\005light\030\007 \001(\0132\024.RoadPB.Traffic"
  "Light\022$\n\007marking\030\t \001(\0132\023.RoadPB.LaneMark"
  "ing\022\037\n\004bump\030\n \001(\0132\021.RoadPB.SpeedBump\">\n\010"
  "InfoType\022\010\n\004SIGN\020\001\022\t\n\005LIGHT\020\002\022\r\n\tLANE_MA"
  "RK\020\004\022\016\n\nSPEED_BUMP\020\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_traffic_2ftraffic_2eproto_deps[2] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_metadata_2fmetadata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_traffic_2ftraffic_2eproto_sccs[6] = {
  &scc_info_LaneMarking_traffic_2ftraffic_2eproto.base,
  &scc_info_SpeedBump_traffic_2ftraffic_2eproto.base,
  &scc_info_TrafficCondition_traffic_2ftraffic_2eproto.base,
  &scc_info_TrafficInfo_traffic_2ftraffic_2eproto.base,
  &scc_info_TrafficLight_traffic_2ftraffic_2eproto.base,
  &scc_info_TrafficSign_traffic_2ftraffic_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_traffic_2ftraffic_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_traffic_2ftraffic_2eproto = {
  false, false, descriptor_table_protodef_traffic_2ftraffic_2eproto, "traffic/traffic.proto", 2940,
  &descriptor_table_traffic_2ftraffic_2eproto_once, descriptor_table_traffic_2ftraffic_2eproto_sccs, descriptor_table_traffic_2ftraffic_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_traffic_2ftraffic_2eproto::offsets,
  file_level_metadata_traffic_2ftraffic_2eproto, 6, file_level_enum_descriptors_traffic_2ftraffic_2eproto, file_level_service_descriptors_traffic_2ftraffic_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_traffic_2ftraffic_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_traffic_2ftraffic_2eproto)), true);
namespace RoadPB {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficCondition_ConditionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2ftraffic_2eproto);
  return file_level_enum_descriptors_traffic_2ftraffic_2eproto[0];
}
bool TrafficCondition_ConditionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficCondition_ConditionType TrafficCondition::NUMERIC;
constexpr TrafficCondition_ConditionType TrafficCondition::VEHICLE;
constexpr TrafficCondition_ConditionType TrafficCondition::LOAD;
constexpr TrafficCondition_ConditionType TrafficCondition::TIME_OF_DAY;
constexpr TrafficCondition_ConditionType TrafficCondition::WEATHER;
constexpr TrafficCondition_ConditionType TrafficCondition::FUZZY_TIME;
constexpr TrafficCondition_ConditionType TrafficCondition::TURN_DIRECTION;
constexpr TrafficCondition_ConditionType TrafficCondition::ConditionType_MIN;
constexpr TrafficCondition_ConditionType TrafficCondition::ConditionType_MAX;
constexpr int TrafficCondition::ConditionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficCondition_LoadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2ftraffic_2eproto);
  return file_level_enum_descriptors_traffic_2ftraffic_2eproto[1];
}
bool TrafficCondition_LoadType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficCondition_LoadType TrafficCondition::WATER_POLLUTING;
constexpr TrafficCondition_LoadType TrafficCondition::EXPLOSIVE;
constexpr TrafficCondition_LoadType TrafficCondition::OTHER_DANGEROUS;
constexpr TrafficCondition_LoadType TrafficCondition::EMPTY;
constexpr TrafficCondition_LoadType TrafficCondition::SPECIAL;
constexpr TrafficCondition_LoadType TrafficCondition::GASSES;
constexpr TrafficCondition_LoadType TrafficCondition::FLAMMABLE_LIQUIDS;
constexpr TrafficCondition_LoadType TrafficCondition::FLAMMABLE_SOLIDS;
constexpr TrafficCondition_LoadType TrafficCondition::OXIDIZING;
constexpr TrafficCondition_LoadType TrafficCondition::TOXIC_INFECTIOUS;
constexpr TrafficCondition_LoadType TrafficCondition::RADIO_ACTIVE;
constexpr TrafficCondition_LoadType TrafficCondition::CORROSIVE;
constexpr TrafficCondition_LoadType TrafficCondition::LoadType_MIN;
constexpr TrafficCondition_LoadType TrafficCondition::LoadType_MAX;
constexpr int TrafficCondition::LoadType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficCondition_Weather_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2ftraffic_2eproto);
  return file_level_enum_descriptors_traffic_2ftraffic_2eproto[2];
}
bool TrafficCondition_Weather_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficCondition_Weather TrafficCondition::UNKNOWN;
constexpr TrafficCondition_Weather TrafficCondition::NO_SPECIAL;
constexpr TrafficCondition_Weather TrafficCondition::SUNSHINE;
constexpr TrafficCondition_Weather TrafficCondition::RAIN;
constexpr TrafficCondition_Weather TrafficCondition::FOG;
constexpr TrafficCondition_Weather TrafficCondition::SNOW;
constexpr TrafficCondition_Weather TrafficCondition::ICE;
constexpr TrafficCondition_Weather TrafficCondition::STRONG_WIND;
constexpr TrafficCondition_Weather TrafficCondition::Weather_MIN;
constexpr TrafficCondition_Weather TrafficCondition::Weather_MAX;
constexpr int TrafficCondition::Weather_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficCondition_FuzzyTime_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2ftraffic_2eproto);
  return file_level_enum_descriptors_traffic_2ftraffic_2eproto[3];
}
bool TrafficCondition_FuzzyTime_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficCondition_FuzzyTime TrafficCondition::TIME_UNKNOWN;
constexpr TrafficCondition_FuzzyTime TrafficCondition::TIME_DAY;
constexpr TrafficCondition_FuzzyTime TrafficCondition::TIME_NIGHT;
constexpr TrafficCondition_FuzzyTime TrafficCondition::FuzzyTime_MIN;
constexpr TrafficCondition_FuzzyTime TrafficCondition::FuzzyTime_MAX;
constexpr int TrafficCondition::FuzzyTime_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficCondition_TurnDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2ftraffic_2eproto);
  return file_level_enum_descriptors_traffic_2ftraffic_2eproto[4];
}
bool TrafficCondition_TurnDirection_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficCondition_TurnDirection TrafficCondition::NONE;
constexpr TrafficCondition_TurnDirection TrafficCondition::STRAIGHT;
constexpr TrafficCondition_TurnDirection TrafficCondition::SLIGHT_RIGHT;
constexpr TrafficCondition_TurnDirection TrafficCondition::RIGHT;
constexpr TrafficCondition_TurnDirection TrafficCondition::HARD_RIGHT;
constexpr TrafficCondition_TurnDirection TrafficCondition::UTURN;
constexpr TrafficCondition_TurnDirection TrafficCondition::HARD_LEFT;
constexpr TrafficCondition_TurnDirection TrafficCondition::LEFT;
constexpr TrafficCondition_TurnDirection TrafficCondition::SLIGHT_LEFT;
constexpr TrafficCondition_TurnDirection TrafficCondition::NA;
constexpr TrafficCondition_TurnDirection TrafficCondition::TurnDirection_MIN;
constexpr TrafficCondition_TurnDirection TrafficCondition::TurnDirection_MAX;
constexpr int TrafficCondition::TurnDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_SignType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2ftraffic_2eproto);
  return file_level_enum_descriptors_traffic_2ftraffic_2eproto[5];
}
bool TrafficSign_SignType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSign_SignType TrafficSign::UNKNOWN;
constexpr TrafficSign_SignType TrafficSign::STOP_FOR;
constexpr TrafficSign_SignType TrafficSign::SLOW_FOR;
constexpr TrafficSign_SignType TrafficSign::GIVE_WAY;
constexpr TrafficSign_SignType TrafficSign::NOWAY;
constexpr TrafficSign_SignType TrafficSign::NO_ENTRY;
constexpr TrafficSign_SignType TrafficSign::NO_PARKING;
constexpr TrafficSign_SignType TrafficSign::NO_LONG_PARKING;
constexpr TrafficSign_SignType TrafficSign::PARKING_CHECK;
constexpr TrafficSign_SignType TrafficSign::NO_MOTOR;
constexpr TrafficSign_SignType TrafficSign::SPEED_LIMIT_HIGH;
constexpr TrafficSign_SignType TrafficSign::SPEED_LIMIT_LOW;
constexpr TrafficSign_SignType TrafficSign::SPEED_LIMIT_REMOVED;
constexpr TrafficSign_SignType TrafficSign::CHILDREN_SCHOOLZONE;
constexpr TrafficSign_SignType TrafficSign::ROADWORKS;
constexpr TrafficSign_SignType TrafficSign::OVERTAKINGPROHIBITED;
constexpr TrafficSign_SignType TrafficSign::ENDOFPROHIBITIONONOVERTAKING;
constexpr TrafficSign_SignType TrafficSign::ENDOFHIGHWAY;
constexpr TrafficSign_SignType TrafficSign::STARTOFHIGHWAY;
constexpr TrafficSign_SignType TrafficSign::LEFTCURVE;
constexpr TrafficSign_SignType TrafficSign::RIGHTCURVE;
constexpr TrafficSign_SignType TrafficSign::SERIESCURVES;
constexpr TrafficSign_SignType TrafficSign::SignType_MIN;
constexpr TrafficSign_SignType TrafficSign::SignType_MAX;
constexpr int TrafficSign::SignType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_Shape_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2ftraffic_2eproto);
  return file_level_enum_descriptors_traffic_2ftraffic_2eproto[6];
}
bool TrafficSign_Shape_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 99:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSign_Shape TrafficSign::UNKNOWN_SHAPE;
constexpr TrafficSign_Shape TrafficSign::RECTANGLE;
constexpr TrafficSign_Shape TrafficSign::TRIANGLE;
constexpr TrafficSign_Shape TrafficSign::CIRCLE;
constexpr TrafficSign_Shape TrafficSign::DIAMOND;
constexpr TrafficSign_Shape TrafficSign::HEXAGON;
constexpr TrafficSign_Shape TrafficSign::OCTAGON;
constexpr TrafficSign_Shape TrafficSign::FURCATION;
constexpr TrafficSign_Shape TrafficSign::COMBINATION;
constexpr TrafficSign_Shape TrafficSign::OTHER_SHAPE;
constexpr TrafficSign_Shape TrafficSign::Shape_MIN;
constexpr TrafficSign_Shape TrafficSign::Shape_MAX;
constexpr int TrafficSign::Shape_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_LightType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2ftraffic_2eproto);
  return file_level_enum_descriptors_traffic_2ftraffic_2eproto[7];
}
bool TrafficLight_LightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficLight_LightType TrafficLight::NONE;
constexpr TrafficLight_LightType TrafficLight::ROUND;
constexpr TrafficLight_LightType TrafficLight::CROSS;
constexpr TrafficLight_LightType TrafficLight::PEDESTRIAN;
constexpr TrafficLight_LightType TrafficLight::BICYCLE;
constexpr TrafficLight_LightType TrafficLight::ARROW;
constexpr TrafficLight_LightType TrafficLight::TIME;
constexpr TrafficLight_LightType TrafficLight::LightType_MIN;
constexpr TrafficLight_LightType TrafficLight::LightType_MAX;
constexpr int TrafficLight::LightType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneMarking_MarkingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2ftraffic_2eproto);
  return file_level_enum_descriptors_traffic_2ftraffic_2eproto[8];
}
bool LaneMarking_MarkingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 27:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LaneMarking_MarkingType LaneMarking::ARROW_UNKNOWN;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_LEFT;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_FORWARD;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_RIGHT;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_LEFT_AND_FORWARD;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_RIGHT_AND_FORWARD;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_LEFT_AND_RIGHT;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_U_TURN;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_U_TURN_AND_FORWARD;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_U_TURN_AND_LEFT;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_MERGE_LEFT;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_MERGE_RIGHT;
constexpr LaneMarking_MarkingType LaneMarking::CROSSWALK_NOTICE;
constexpr LaneMarking_MarkingType LaneMarking::SPEED_LIMIT_LOW;
constexpr LaneMarking_MarkingType LaneMarking::SPEED_LIMIT_HIGH;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_NO_LEFT_TURN;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_NO_RIGHT_TURN;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_NO_U_TURN;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_FORWARD_AND_LEFT_AND_RIGHT;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_FORWARD_AND_U_TURN_AND_LEFT;
constexpr LaneMarking_MarkingType LaneMarking::ARROW_RIGHT_AND_U_TURN;
constexpr LaneMarking_MarkingType LaneMarking::MARKING_TEXT;
constexpr LaneMarking_MarkingType LaneMarking::MARKING_TIME;
constexpr LaneMarking_MarkingType LaneMarking::CHECK_FOLLOWING_DISTANCE;
constexpr LaneMarking_MarkingType LaneMarking::STOPTO_GIVE_WAY;
constexpr LaneMarking_MarkingType LaneMarking::SLOWDOWN_TO_GIVE_WAY;
constexpr LaneMarking_MarkingType LaneMarking::MARKING_NETS;
constexpr LaneMarking_MarkingType LaneMarking::MarkingType_MIN;
constexpr LaneMarking_MarkingType LaneMarking::MarkingType_MAX;
constexpr int LaneMarking::MarkingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficInfo_InfoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2ftraffic_2eproto);
  return file_level_enum_descriptors_traffic_2ftraffic_2eproto[9];
}
bool TrafficInfo_InfoType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficInfo_InfoType TrafficInfo::SIGN;
constexpr TrafficInfo_InfoType TrafficInfo::LIGHT;
constexpr TrafficInfo_InfoType TrafficInfo::LANE_MARK;
constexpr TrafficInfo_InfoType TrafficInfo::SPEED_BUMP;
constexpr TrafficInfo_InfoType TrafficInfo::InfoType_MIN;
constexpr TrafficInfo_InfoType TrafficInfo::InfoType_MAX;
constexpr int TrafficInfo::InfoType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TrafficCondition::InitAsDefaultInstance() {
}
class TrafficCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficCondition>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vehicle_type_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_load_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_start_minues(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_end_minues(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_weather(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fuzzy_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

TrafficCondition::TrafficCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadPB.TrafficCondition)
}
TrafficCondition::TrafficCondition(const TrafficCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&type_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.TrafficCondition)
}

void TrafficCondition::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&type_)) + sizeof(direction_));
}

TrafficCondition::~TrafficCondition() {
  // @@protoc_insertion_point(destructor:RoadPB.TrafficCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrafficCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrafficCondition::ArenaDtor(void* object) {
  TrafficCondition* _this = reinterpret_cast< TrafficCondition* >(object);
  (void)_this;
}
void TrafficCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficCondition& TrafficCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficCondition_traffic_2ftraffic_2eproto.base);
  return *internal_default_instance();
}


void TrafficCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.TrafficCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fuzzy_time_) -
        reinterpret_cast<char*>(&type_)) + sizeof(fuzzy_time_));
  }
  direction_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vehicle_type_mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vehicle_type_mask(&has_bits);
          vehicle_type_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 load_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_load_type(&has_bits);
          load_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 start_minues = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_start_minues(&has_bits);
          start_minues_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 end_minues = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_end_minues(&has_bits);
          end_minues_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 weather = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_weather(&has_bits);
          weather_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fuzzy_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fuzzy_time(&has_bits);
          fuzzy_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 direction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_direction(&has_bits);
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.TrafficCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  // optional int32 vehicle_type_mask = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vehicle_type_mask(), target);
  }

  // optional int32 load_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_load_type(), target);
  }

  // optional int32 start_minues = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_start_minues(), target);
  }

  // optional int32 end_minues = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_end_minues(), target);
  }

  // optional int32 weather = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_weather(), target);
  }

  // optional int32 fuzzy_time = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_fuzzy_time(), target);
  }

  // optional int32 direction = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.TrafficCondition)
  return target;
}

size_t TrafficCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.TrafficCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_value());
    }

    // optional int32 vehicle_type_mask = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vehicle_type_mask());
    }

    // optional int32 load_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_load_type());
    }

    // optional int32 start_minues = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_start_minues());
    }

    // optional int32 end_minues = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_end_minues());
    }

    // optional int32 weather = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_weather());
    }

    // optional int32 fuzzy_time = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fuzzy_time());
    }

  }
  // optional int32 direction = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadPB.TrafficCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadPB.TrafficCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadPB.TrafficCondition)
    MergeFrom(*source);
  }
}

void TrafficCondition::MergeFrom(const TrafficCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.TrafficCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      vehicle_type_mask_ = from.vehicle_type_mask_;
    }
    if (cached_has_bits & 0x00000008u) {
      load_type_ = from.load_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_minues_ = from.start_minues_;
    }
    if (cached_has_bits & 0x00000020u) {
      end_minues_ = from.end_minues_;
    }
    if (cached_has_bits & 0x00000040u) {
      weather_ = from.weather_;
    }
    if (cached_has_bits & 0x00000080u) {
      fuzzy_time_ = from.fuzzy_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_direction(from._internal_direction());
  }
}

void TrafficCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadPB.TrafficCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficCondition::CopyFrom(const TrafficCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.TrafficCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficCondition::IsInitialized() const {
  return true;
}

void TrafficCondition::InternalSwap(TrafficCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficCondition, direction_)
      + sizeof(TrafficCondition::direction_)
      - PROTOBUF_FIELD_OFFSET(TrafficCondition, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSign::InitAsDefaultInstance() {
}
class TrafficSign::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_variable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TrafficSign::TrafficSign(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  panels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadPB.TrafficSign)
}
TrafficSign::TrafficSign(const TrafficSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      panels_(from.panels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&variable_) -
    reinterpret_cast<char*>(&type_)) + sizeof(variable_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.TrafficSign)
}

void TrafficSign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSign_traffic_2ftraffic_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&variable_) -
      reinterpret_cast<char*>(&type_)) + sizeof(variable_));
}

TrafficSign::~TrafficSign() {
  // @@protoc_insertion_point(destructor:RoadPB.TrafficSign)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrafficSign::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficSign::ArenaDtor(void* object) {
  TrafficSign* _this = reinterpret_cast< TrafficSign* >(object);
  (void)_this;
}
void TrafficSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSign& TrafficSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSign_traffic_2ftraffic_2eproto.base);
  return *internal_default_instance();
}


void TrafficSign::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.TrafficSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  panels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    content_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&variable_) -
        reinterpret_cast<char*>(&type_)) + sizeof(variable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_shape(&has_bits);
          shape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string content = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.TrafficSign.content");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool variable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_variable(&has_bits);
          variable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RoadPB.TrafficCondition panels = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_panels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.TrafficSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // optional int32 shape = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_shape(), target);
  }

  // optional float value = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_value(), target);
  }

  // optional string content = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.TrafficSign.content");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_content(), target);
  }

  // optional bool variable = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_variable(), target);
  }

  // repeated .RoadPB.TrafficCondition panels = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_panels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_panels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.TrafficSign)
  return target;
}

size_t TrafficSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.TrafficSign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoadPB.TrafficCondition panels = 9;
  total_size += 1UL * this->_internal_panels_size();
  for (const auto& msg : this->panels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string content = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional int32 type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 shape = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_shape());
    }

    // optional float value = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool variable = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadPB.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadPB.TrafficSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadPB.TrafficSign)
    MergeFrom(*source);
  }
}

void TrafficSign::MergeFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  panels_.MergeFrom(from.panels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      shape_ = from.shape_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000010u) {
      variable_ = from.variable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadPB.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign::CopyFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign::IsInitialized() const {
  return true;
}

void TrafficSign::InternalSwap(TrafficSign* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  panels_.InternalSwap(&other->panels_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign, variable_)
      + sizeof(TrafficSign::variable_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLight::InitAsDefaultInstance() {
}
class TrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLight>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_arrange(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bulbs_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrafficLight::TrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadPB.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&bulbs_num_) -
    reinterpret_cast<char*>(&type_)) + sizeof(bulbs_num_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.TrafficLight)
}

void TrafficLight::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bulbs_num_) -
      reinterpret_cast<char*>(&type_)) + sizeof(bulbs_num_));
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:RoadPB.TrafficLight)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrafficLight::ArenaDtor(void* object) {
  TrafficLight* _this = reinterpret_cast< TrafficLight* >(object);
  (void)_this;
}
void TrafficLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLight& TrafficLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLight_traffic_2ftraffic_2eproto.base);
  return *internal_default_instance();
}


void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bulbs_num_) -
        reinterpret_cast<char*>(&type_)) + sizeof(bulbs_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 arrange = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_arrange(&has_bits);
          arrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bulbs_num = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_bulbs_num(&has_bits);
          bulbs_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional int32 arrange = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_arrange(), target);
  }

  // optional int32 bulbs_num = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_bulbs_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.TrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 arrange = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_arrange());
    }

    // optional int32 bulbs_num = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bulbs_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadPB.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadPB.TrafficLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadPB.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      arrange_ = from.arrange_;
    }
    if (cached_has_bits & 0x00000004u) {
      bulbs_num_ = from.bulbs_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadPB.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLight, bulbs_num_)
      + sizeof(TrafficLight::bulbs_num_)
      - PROTOBUF_FIELD_OFFSET(TrafficLight, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneMarking::InitAsDefaultInstance() {
}
class LaneMarking::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneMarking>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LaneMarking::LaneMarking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadPB.LaneMarking)
}
LaneMarking::LaneMarking(const LaneMarking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:RoadPB.LaneMarking)
}

void LaneMarking::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneMarking_traffic_2ftraffic_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
}

LaneMarking::~LaneMarking() {
  // @@protoc_insertion_point(destructor:RoadPB.LaneMarking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneMarking::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LaneMarking::ArenaDtor(void* object) {
  LaneMarking* _this = reinterpret_cast< LaneMarking* >(object);
  (void)_this;
}
void LaneMarking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneMarking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneMarking& LaneMarking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneMarking_traffic_2ftraffic_2eproto.base);
  return *internal_default_instance();
}


void LaneMarking::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.LaneMarking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    content_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&type_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneMarking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string content = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoadPB.LaneMarking.content");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneMarking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.LaneMarking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional float value = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_value(), target);
  }

  // optional string content = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RoadPB.LaneMarking.content");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.LaneMarking)
  return target;
}

size_t LaneMarking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.LaneMarking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string content = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional float value = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneMarking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadPB.LaneMarking)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneMarking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadPB.LaneMarking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadPB.LaneMarking)
    MergeFrom(*source);
  }
}

void LaneMarking::MergeFrom(const LaneMarking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.LaneMarking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneMarking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadPB.LaneMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarking::CopyFrom(const LaneMarking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.LaneMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarking::IsInitialized() const {
  return true;
}

void LaneMarking::InternalSwap(LaneMarking* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneMarking, value_)
      + sizeof(LaneMarking::value_)
      - PROTOBUF_FIELD_OFFSET(LaneMarking, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneMarking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeedBump::InitAsDefaultInstance() {
}
class SpeedBump::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedBump>()._has_bits_);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SpeedBump::SpeedBump(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadPB.SpeedBump)
}
SpeedBump::SpeedBump(const SpeedBump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:RoadPB.SpeedBump)
}

void SpeedBump::SharedCtor() {
  height_ = 0;
}

SpeedBump::~SpeedBump() {
  // @@protoc_insertion_point(destructor:RoadPB.SpeedBump)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeedBump::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpeedBump::ArenaDtor(void* object) {
  SpeedBump* _this = reinterpret_cast< SpeedBump* >(object);
  (void)_this;
}
void SpeedBump::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedBump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedBump& SpeedBump::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedBump_traffic_2ftraffic_2eproto.base);
  return *internal_default_instance();
}


void SpeedBump::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.SpeedBump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedBump::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedBump::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.SpeedBump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.SpeedBump)
  return target;
}

size_t SpeedBump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.SpeedBump)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float height = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedBump::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadPB.SpeedBump)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedBump* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedBump>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadPB.SpeedBump)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadPB.SpeedBump)
    MergeFrom(*source);
  }
}

void SpeedBump::MergeFrom(const SpeedBump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.SpeedBump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_height()) {
    _internal_set_height(from._internal_height());
  }
}

void SpeedBump::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadPB.SpeedBump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedBump::CopyFrom(const SpeedBump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.SpeedBump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedBump::IsInitialized() const {
  return true;
}

void SpeedBump::InternalSwap(SpeedBump* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedBump::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficInfo::InitAsDefaultInstance() {
  ::RoadPB::_TrafficInfo_default_instance_._instance.get_mutable()->id_ = const_cast< ::RoadPB::FeatureID*>(
      ::RoadPB::FeatureID::internal_default_instance());
  ::RoadPB::_TrafficInfo_default_instance_._instance.get_mutable()->lanes_ = const_cast< ::RoadPB::FeatureID*>(
      ::RoadPB::FeatureID::internal_default_instance());
  ::RoadPB::_TrafficInfo_default_instance_._instance.get_mutable()->lanegroups_ = const_cast< ::RoadPB::FeatureID*>(
      ::RoadPB::FeatureID::internal_default_instance());
  ::RoadPB::_TrafficInfo_default_instance_._instance.get_mutable()->sign_ = const_cast< ::RoadPB::TrafficSign*>(
      ::RoadPB::TrafficSign::internal_default_instance());
  ::RoadPB::_TrafficInfo_default_instance_._instance.get_mutable()->light_ = const_cast< ::RoadPB::TrafficLight*>(
      ::RoadPB::TrafficLight::internal_default_instance());
  ::RoadPB::_TrafficInfo_default_instance_._instance.get_mutable()->marking_ = const_cast< ::RoadPB::LaneMarking*>(
      ::RoadPB::LaneMarking::internal_default_instance());
  ::RoadPB::_TrafficInfo_default_instance_._instance.get_mutable()->bump_ = const_cast< ::RoadPB::SpeedBump*>(
      ::RoadPB::SpeedBump::internal_default_instance());
}
class TrafficInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficInfo>()._has_bits_);
  static const ::RoadPB::FeatureID& id(const TrafficInfo* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::RoadPB::FeatureID& lanes(const TrafficInfo* msg);
  static void set_has_lanes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::RoadPB::FeatureID& lanegroups(const TrafficInfo* msg);
  static void set_has_lanegroups(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::RoadPB::TrafficSign& sign(const TrafficInfo* msg);
  static void set_has_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::RoadPB::TrafficLight& light(const TrafficInfo* msg);
  static void set_has_light(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::RoadPB::LaneMarking& marking(const TrafficInfo* msg);
  static void set_has_marking(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::RoadPB::SpeedBump& bump(const TrafficInfo* msg);
  static void set_has_bump(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::RoadPB::FeatureID&
TrafficInfo::_Internal::id(const TrafficInfo* msg) {
  return *msg->id_;
}
const ::RoadPB::FeatureID&
TrafficInfo::_Internal::lanes(const TrafficInfo* msg) {
  return *msg->lanes_;
}
const ::RoadPB::FeatureID&
TrafficInfo::_Internal::lanegroups(const TrafficInfo* msg) {
  return *msg->lanegroups_;
}
const ::RoadPB::TrafficSign&
TrafficInfo::_Internal::sign(const TrafficInfo* msg) {
  return *msg->sign_;
}
const ::RoadPB::TrafficLight&
TrafficInfo::_Internal::light(const TrafficInfo* msg) {
  return *msg->light_;
}
const ::RoadPB::LaneMarking&
TrafficInfo::_Internal::marking(const TrafficInfo* msg) {
  return *msg->marking_;
}
const ::RoadPB::SpeedBump&
TrafficInfo::_Internal::bump(const TrafficInfo* msg) {
  return *msg->bump_;
}
void TrafficInfo::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficInfo::clear_objs() {
  objs_.Clear();
}
void TrafficInfo::clear_lanes() {
  if (lanes_ != nullptr) lanes_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficInfo::clear_lanegroups() {
  if (lanegroups_ != nullptr) lanegroups_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TrafficInfo::TrafficInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadPB.TrafficInfo)
}
TrafficInfo::TrafficInfo(const TrafficInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      objs_(from.objs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::RoadPB::FeatureID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_lanes()) {
    lanes_ = new ::RoadPB::FeatureID(*from.lanes_);
  } else {
    lanes_ = nullptr;
  }
  if (from._internal_has_lanegroups()) {
    lanegroups_ = new ::RoadPB::FeatureID(*from.lanegroups_);
  } else {
    lanegroups_ = nullptr;
  }
  if (from._internal_has_sign()) {
    sign_ = new ::RoadPB::TrafficSign(*from.sign_);
  } else {
    sign_ = nullptr;
  }
  if (from._internal_has_light()) {
    light_ = new ::RoadPB::TrafficLight(*from.light_);
  } else {
    light_ = nullptr;
  }
  if (from._internal_has_marking()) {
    marking_ = new ::RoadPB::LaneMarking(*from.marking_);
  } else {
    marking_ = nullptr;
  }
  if (from._internal_has_bump()) {
    bump_ = new ::RoadPB::SpeedBump(*from.bump_);
  } else {
    bump_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:RoadPB.TrafficInfo)
}

void TrafficInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficInfo_traffic_2ftraffic_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

TrafficInfo::~TrafficInfo() {
  // @@protoc_insertion_point(destructor:RoadPB.TrafficInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrafficInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete lanes_;
  if (this != internal_default_instance()) delete lanegroups_;
  if (this != internal_default_instance()) delete sign_;
  if (this != internal_default_instance()) delete light_;
  if (this != internal_default_instance()) delete marking_;
  if (this != internal_default_instance()) delete bump_;
}

void TrafficInfo::ArenaDtor(void* object) {
  TrafficInfo* _this = reinterpret_cast< TrafficInfo* >(object);
  (void)_this;
}
void TrafficInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficInfo& TrafficInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficInfo_traffic_2ftraffic_2eproto.base);
  return *internal_default_instance();
}


void TrafficInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadPB.TrafficInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lanes_ != nullptr);
      lanes_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lanegroups_ != nullptr);
      lanegroups_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sign_ != nullptr);
      sign_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(light_ != nullptr);
      light_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(marking_ != nullptr);
      marking_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(bump_ != nullptr);
      bump_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .RoadPB.FeatureID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RoadPB.FeatureID objs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.FeatureID lanes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lanes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.FeatureID lanegroups = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lanegroups(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.TrafficSign sign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.TrafficLight light = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_light(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.LaneMarking marking = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_marking(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoadPB.SpeedBump bump = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_bump(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadPB.TrafficInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RoadPB.FeatureID id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // repeated .RoadPB.FeatureID objs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_objs(i), target, stream);
  }

  // optional int32 type = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // optional .RoadPB.FeatureID lanes = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lanes(this), target, stream);
  }

  // optional .RoadPB.FeatureID lanegroups = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lanegroups(this), target, stream);
  }

  // optional .RoadPB.TrafficSign sign = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sign(this), target, stream);
  }

  // optional .RoadPB.TrafficLight light = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::light(this), target, stream);
  }

  // optional .RoadPB.LaneMarking marking = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::marking(this), target, stream);
  }

  // optional .RoadPB.SpeedBump bump = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::bump(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadPB.TrafficInfo)
  return target;
}

size_t TrafficInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadPB.TrafficInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoadPB.FeatureID objs = 2;
  total_size += 1UL * this->_internal_objs_size();
  for (const auto& msg : this->objs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .RoadPB.FeatureID id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .RoadPB.FeatureID lanes = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lanes_);
    }

    // optional .RoadPB.FeatureID lanegroups = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lanegroups_);
    }

    // optional .RoadPB.TrafficSign sign = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sign_);
    }

    // optional .RoadPB.TrafficLight light = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *light_);
    }

    // optional .RoadPB.LaneMarking marking = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *marking_);
    }

    // optional .RoadPB.SpeedBump bump = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bump_);
    }

    // optional int32 type = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadPB.TrafficInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadPB.TrafficInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadPB.TrafficInfo)
    MergeFrom(*source);
  }
}

void TrafficInfo::MergeFrom(const TrafficInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadPB.TrafficInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objs_.MergeFrom(from.objs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::RoadPB::FeatureID::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lanes()->::RoadPB::FeatureID::MergeFrom(from._internal_lanes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lanegroups()->::RoadPB::FeatureID::MergeFrom(from._internal_lanegroups());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_sign()->::RoadPB::TrafficSign::MergeFrom(from._internal_sign());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_light()->::RoadPB::TrafficLight::MergeFrom(from._internal_light());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_marking()->::RoadPB::LaneMarking::MergeFrom(from._internal_marking());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_bump()->::RoadPB::SpeedBump::MergeFrom(from._internal_bump());
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadPB.TrafficInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficInfo::CopyFrom(const TrafficInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadPB.TrafficInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficInfo::IsInitialized() const {
  return true;
}

void TrafficInfo::InternalSwap(TrafficInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objs_.InternalSwap(&other->objs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficInfo, type_)
      + sizeof(TrafficInfo::type_)
      - PROTOBUF_FIELD_OFFSET(TrafficInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RoadPB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RoadPB::TrafficCondition* Arena::CreateMaybeMessage< ::RoadPB::TrafficCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::TrafficCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::TrafficSign* Arena::CreateMaybeMessage< ::RoadPB::TrafficSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::TrafficSign >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::TrafficLight* Arena::CreateMaybeMessage< ::RoadPB::TrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::TrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::LaneMarking* Arena::CreateMaybeMessage< ::RoadPB::LaneMarking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::LaneMarking >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::SpeedBump* Arena::CreateMaybeMessage< ::RoadPB::SpeedBump >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::SpeedBump >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadPB::TrafficInfo* Arena::CreateMaybeMessage< ::RoadPB::TrafficInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadPB::TrafficInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
