// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fcommon_2eproto;
namespace RoadPB {
class AttributeValue;
class AttributeValueDefaultTypeInternal;
extern AttributeValueDefaultTypeInternal _AttributeValue_default_instance_;
class BoundingBox;
class BoundingBoxDefaultTypeInternal;
extern BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
class Circle;
class CircleDefaultTypeInternal;
extern CircleDefaultTypeInternal _Circle_default_instance_;
class CondSpeedLimit;
class CondSpeedLimitDefaultTypeInternal;
extern CondSpeedLimitDefaultTypeInternal _CondSpeedLimit_default_instance_;
class Cylinder;
class CylinderDefaultTypeInternal;
extern CylinderDefaultTypeInternal _Cylinder_default_instance_;
class FixedSpeedLimit;
class FixedSpeedLimitDefaultTypeInternal;
extern FixedSpeedLimitDefaultTypeInternal _FixedSpeedLimit_default_instance_;
class LangName;
class LangNameDefaultTypeInternal;
extern LangNameDefaultTypeInternal _LangName_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Polyline;
class PolylineDefaultTypeInternal;
extern PolylineDefaultTypeInternal _Polyline_default_instance_;
class RangeAttribute;
class RangeAttributeDefaultTypeInternal;
extern RangeAttributeDefaultTypeInternal _RangeAttribute_default_instance_;
}  // namespace RoadPB
PROTOBUF_NAMESPACE_OPEN
template<> ::RoadPB::AttributeValue* Arena::CreateMaybeMessage<::RoadPB::AttributeValue>(Arena*);
template<> ::RoadPB::BoundingBox* Arena::CreateMaybeMessage<::RoadPB::BoundingBox>(Arena*);
template<> ::RoadPB::Circle* Arena::CreateMaybeMessage<::RoadPB::Circle>(Arena*);
template<> ::RoadPB::CondSpeedLimit* Arena::CreateMaybeMessage<::RoadPB::CondSpeedLimit>(Arena*);
template<> ::RoadPB::Cylinder* Arena::CreateMaybeMessage<::RoadPB::Cylinder>(Arena*);
template<> ::RoadPB::FixedSpeedLimit* Arena::CreateMaybeMessage<::RoadPB::FixedSpeedLimit>(Arena*);
template<> ::RoadPB::LangName* Arena::CreateMaybeMessage<::RoadPB::LangName>(Arena*);
template<> ::RoadPB::Point* Arena::CreateMaybeMessage<::RoadPB::Point>(Arena*);
template<> ::RoadPB::Polygon* Arena::CreateMaybeMessage<::RoadPB::Polygon>(Arena*);
template<> ::RoadPB::Polyline* Arena::CreateMaybeMessage<::RoadPB::Polyline>(Arena*);
template<> ::RoadPB::RangeAttribute* Arena::CreateMaybeMessage<::RoadPB::RangeAttribute>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RoadPB {

enum ProvinceCode : int {
  BEI_JING = 0,
  SHANG_HAI = 1,
  GUANG_ZHOU = 2,
  SHEN_ZHEN = 3,
  HE_BEI = 4,
  SHAN_DONG = 5
};
bool ProvinceCode_IsValid(int value);
constexpr ProvinceCode ProvinceCode_MIN = BEI_JING;
constexpr ProvinceCode ProvinceCode_MAX = SHAN_DONG;
constexpr int ProvinceCode_ARRAYSIZE = ProvinceCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProvinceCode_descriptor();
template<typename T>
inline const std::string& ProvinceCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProvinceCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProvinceCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProvinceCode_descriptor(), enum_t_value);
}
inline bool ProvinceCode_Parse(
    const std::string& name, ProvinceCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProvinceCode>(
    ProvinceCode_descriptor(), name, value);
}
enum AttributeType : int {
  UNKNOWN = 0,
  VRU = 1,
  OPPO = 2,
  reserved1 = 3,
  VARI_SPEED_LIMIT = 4,
  OVERHEAD_OBSTRUCT = 5,
  INFRA_SEP_L = 6,
  INFRA_SEP_R = 7,
  MEDIAN_LEFT = 8,
  MEDIAN_WIDTH_L = 9,
  MEDIAN_RIGHT = 10,
  MEDIAN_WIDTH_R = 11,
  MEDIAN_SURFACE_L = 12,
  MEDIAN_SURFACE_R = 13,
  reserved2 = 14,
  reserved3 = 15,
  PAVEMENT = 16,
  LANE_TYPE = 17,
  LANE_KIND = 18,
  LANE_WIDTH = 19,
  LANE_HEIGHT_LIMIT = 20,
  LANE_WEIGHT_LIMIT = 21,
  LANE_WIDTH_LIMIT = 22,
  reserved4 = 23,
  reserved5 = 24,
  LANE_BOUND_KIND = 25,
  LANE_BOUND_COLOR = 26,
  LANE_BOUND_MATERIAL = 27,
  ROAD_BOUND_KIND = 30
};
bool AttributeType_IsValid(int value);
constexpr AttributeType AttributeType_MIN = UNKNOWN;
constexpr AttributeType AttributeType_MAX = ROAD_BOUND_KIND;
constexpr int AttributeType_ARRAYSIZE = AttributeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttributeType_descriptor();
template<typename T>
inline const std::string& AttributeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AttributeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AttributeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AttributeType_descriptor(), enum_t_value);
}
inline bool AttributeType_Parse(
    const std::string& name, AttributeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AttributeType>(
    AttributeType_descriptor(), name, value);
}
// ===================================================================

class LangName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.LangName) */ {
 public:
  inline LangName() : LangName(nullptr) {};
  virtual ~LangName();

  LangName(const LangName& from);
  LangName(LangName&& from) noexcept
    : LangName() {
    *this = ::std::move(from);
  }

  inline LangName& operator=(const LangName& from) {
    CopyFrom(from);
    return *this;
  }
  inline LangName& operator=(LangName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LangName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LangName* internal_default_instance() {
    return reinterpret_cast<const LangName*>(
               &_LangName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LangName& a, LangName& b) {
    a.Swap(&b);
  }
  inline void Swap(LangName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LangName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LangName* New() const final {
    return CreateMaybeMessage<LangName>(nullptr);
  }

  LangName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LangName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LangName& from);
  void MergeFrom(const LangName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LangName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.LangName";
  }
  protected:
  explicit LangName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fcommon_2eproto);
    return ::descriptor_table_common_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameTypeFieldNumber = 1,
    kLangCodeFieldNumber = 2,
    kNameFieldNumber = 3,
  };
  // optional string name_type = 1;
  bool has_name_type() const;
  private:
  bool _internal_has_name_type() const;
  public:
  void clear_name_type();
  const std::string& name_type() const;
  void set_name_type(const std::string& value);
  void set_name_type(std::string&& value);
  void set_name_type(const char* value);
  void set_name_type(const char* value, size_t size);
  std::string* mutable_name_type();
  std::string* release_name_type();
  void set_allocated_name_type(std::string* name_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name_type(
      std::string* name_type);
  private:
  const std::string& _internal_name_type() const;
  void _internal_set_name_type(const std::string& value);
  std::string* _internal_mutable_name_type();
  public:

  // optional string lang_code = 2;
  bool has_lang_code() const;
  private:
  bool _internal_has_lang_code() const;
  public:
  void clear_lang_code();
  const std::string& lang_code() const;
  void set_lang_code(const std::string& value);
  void set_lang_code(std::string&& value);
  void set_lang_code(const char* value);
  void set_lang_code(const char* value, size_t size);
  std::string* mutable_lang_code();
  std::string* release_lang_code();
  void set_allocated_lang_code(std::string* lang_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lang_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lang_code(
      std::string* lang_code);
  private:
  const std::string& _internal_lang_code() const;
  void _internal_set_lang_code(const std::string& value);
  std::string* _internal_mutable_lang_code();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.LangName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.Point) */ {
 public:
  inline Point() : Point(nullptr) {};
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fcommon_2eproto);
    return ::descriptor_table_common_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Polyline PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.Polyline) */ {
 public:
  inline Polyline() : Polyline(nullptr) {};
  virtual ~Polyline();

  Polyline(const Polyline& from);
  Polyline(Polyline&& from) noexcept
    : Polyline() {
    *this = ::std::move(from);
  }

  inline Polyline& operator=(const Polyline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polyline& operator=(Polyline&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polyline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polyline* internal_default_instance() {
    return reinterpret_cast<const Polyline*>(
               &_Polyline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Polyline& a, Polyline& b) {
    a.Swap(&b);
  }
  inline void Swap(Polyline* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polyline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polyline* New() const final {
    return CreateMaybeMessage<Polyline>(nullptr);
  }

  Polyline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polyline>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polyline& from);
  void MergeFrom(const Polyline& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polyline* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.Polyline";
  }
  protected:
  explicit Polyline(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fcommon_2eproto);
    return ::descriptor_table_common_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated .RoadPB.Point pts = 1;
  int pts_size() const;
  private:
  int _internal_pts_size() const;
  public:
  void clear_pts();
  ::RoadPB::Point* mutable_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point >*
      mutable_pts();
  private:
  const ::RoadPB::Point& _internal_pts(int index) const;
  ::RoadPB::Point* _internal_add_pts();
  public:
  const ::RoadPB::Point& pts(int index) const;
  ::RoadPB::Point* add_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point >&
      pts() const;

  // optional float width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // optional float height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.Polyline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point > pts_;
  float width_;
  float height_;
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Polygon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {};
  virtual ~Polygon();

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(nullptr);
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fcommon_2eproto);
    return ::descriptor_table_common_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsFieldNumber = 1,
    kNormalFieldNumber = 2,
    kOrientationFieldNumber = 4,
    kEdgeWidthFieldNumber = 3,
  };
  // repeated .RoadPB.Point pts = 1;
  int pts_size() const;
  private:
  int _internal_pts_size() const;
  public:
  void clear_pts();
  ::RoadPB::Point* mutable_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point >*
      mutable_pts();
  private:
  const ::RoadPB::Point& _internal_pts(int index) const;
  ::RoadPB::Point* _internal_add_pts();
  public:
  const ::RoadPB::Point& pts(int index) const;
  ::RoadPB::Point* add_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point >&
      pts() const;

  // optional .RoadPB.Point normal = 2;
  bool has_normal() const;
  private:
  bool _internal_has_normal() const;
  public:
  void clear_normal();
  const ::RoadPB::Point& normal() const;
  ::RoadPB::Point* release_normal();
  ::RoadPB::Point* mutable_normal();
  void set_allocated_normal(::RoadPB::Point* normal);
  private:
  const ::RoadPB::Point& _internal_normal() const;
  ::RoadPB::Point* _internal_mutable_normal();
  public:
  void unsafe_arena_set_allocated_normal(
      ::RoadPB::Point* normal);
  ::RoadPB::Point* unsafe_arena_release_normal();

  // optional .RoadPB.Point orientation = 4;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::RoadPB::Point& orientation() const;
  ::RoadPB::Point* release_orientation();
  ::RoadPB::Point* mutable_orientation();
  void set_allocated_orientation(::RoadPB::Point* orientation);
  private:
  const ::RoadPB::Point& _internal_orientation() const;
  ::RoadPB::Point* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::RoadPB::Point* orientation);
  ::RoadPB::Point* unsafe_arena_release_orientation();

  // optional float edge_width = 3;
  bool has_edge_width() const;
  private:
  bool _internal_has_edge_width() const;
  public:
  void clear_edge_width();
  float edge_width() const;
  void set_edge_width(float value);
  private:
  float _internal_edge_width() const;
  void _internal_set_edge_width(float value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point > pts_;
  ::RoadPB::Point* normal_;
  ::RoadPB::Point* orientation_;
  float edge_width_;
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Circle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.Circle) */ {
 public:
  inline Circle() : Circle(nullptr) {};
  virtual ~Circle();

  Circle(const Circle& from);
  Circle(Circle&& from) noexcept
    : Circle() {
    *this = ::std::move(from);
  }

  inline Circle& operator=(const Circle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Circle& operator=(Circle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Circle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Circle* internal_default_instance() {
    return reinterpret_cast<const Circle*>(
               &_Circle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Circle& a, Circle& b) {
    a.Swap(&b);
  }
  inline void Swap(Circle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Circle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Circle* New() const final {
    return CreateMaybeMessage<Circle>(nullptr);
  }

  Circle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Circle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Circle& from);
  void MergeFrom(const Circle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Circle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.Circle";
  }
  protected:
  explicit Circle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fcommon_2eproto);
    return ::descriptor_table_common_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kNormalFieldNumber = 2,
    kRadiusFieldNumber = 3,
    kEdgeWidthFieldNumber = 4,
  };
  // optional .RoadPB.Point center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::RoadPB::Point& center() const;
  ::RoadPB::Point* release_center();
  ::RoadPB::Point* mutable_center();
  void set_allocated_center(::RoadPB::Point* center);
  private:
  const ::RoadPB::Point& _internal_center() const;
  ::RoadPB::Point* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::RoadPB::Point* center);
  ::RoadPB::Point* unsafe_arena_release_center();

  // optional .RoadPB.Point normal = 2;
  bool has_normal() const;
  private:
  bool _internal_has_normal() const;
  public:
  void clear_normal();
  const ::RoadPB::Point& normal() const;
  ::RoadPB::Point* release_normal();
  ::RoadPB::Point* mutable_normal();
  void set_allocated_normal(::RoadPB::Point* normal);
  private:
  const ::RoadPB::Point& _internal_normal() const;
  ::RoadPB::Point* _internal_mutable_normal();
  public:
  void unsafe_arena_set_allocated_normal(
      ::RoadPB::Point* normal);
  ::RoadPB::Point* unsafe_arena_release_normal();

  // optional float radius = 3;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // optional float edge_width = 4;
  bool has_edge_width() const;
  private:
  bool _internal_has_edge_width() const;
  public:
  void clear_edge_width();
  float edge_width() const;
  void set_edge_width(float value);
  private:
  float _internal_edge_width() const;
  void _internal_set_edge_width(float value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.Circle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::RoadPB::Point* center_;
  ::RoadPB::Point* normal_;
  float radius_;
  float edge_width_;
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Cylinder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.Cylinder) */ {
 public:
  inline Cylinder() : Cylinder(nullptr) {};
  virtual ~Cylinder();

  Cylinder(const Cylinder& from);
  Cylinder(Cylinder&& from) noexcept
    : Cylinder() {
    *this = ::std::move(from);
  }

  inline Cylinder& operator=(const Cylinder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cylinder& operator=(Cylinder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cylinder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cylinder* internal_default_instance() {
    return reinterpret_cast<const Cylinder*>(
               &_Cylinder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Cylinder& a, Cylinder& b) {
    a.Swap(&b);
  }
  inline void Swap(Cylinder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cylinder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cylinder* New() const final {
    return CreateMaybeMessage<Cylinder>(nullptr);
  }

  Cylinder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cylinder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cylinder& from);
  void MergeFrom(const Cylinder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cylinder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.Cylinder";
  }
  protected:
  explicit Cylinder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fcommon_2eproto);
    return ::descriptor_table_common_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // repeated .RoadPB.Point points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::RoadPB::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point >*
      mutable_points();
  private:
  const ::RoadPB::Point& _internal_points(int index) const;
  ::RoadPB::Point* _internal_add_points();
  public:
  const ::RoadPB::Point& points(int index) const;
  ::RoadPB::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point >&
      points() const;

  // optional float radius = 2;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.Cylinder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point > points_;
  float radius_;
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.BoundingBox) */ {
 public:
  inline BoundingBox() : BoundingBox(nullptr) {};
  virtual ~BoundingBox();

  BoundingBox(const BoundingBox& from);
  BoundingBox(BoundingBox&& from) noexcept
    : BoundingBox() {
    *this = ::std::move(from);
  }

  inline BoundingBox& operator=(const BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox& operator=(BoundingBox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundingBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundingBox* internal_default_instance() {
    return reinterpret_cast<const BoundingBox*>(
               &_BoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BoundingBox& a, BoundingBox& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox* New() const final {
    return CreateMaybeMessage<BoundingBox>(nullptr);
  }

  BoundingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundingBox& from);
  void MergeFrom(const BoundingBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.BoundingBox";
  }
  protected:
  explicit BoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fcommon_2eproto);
    return ::descriptor_table_common_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinPtFieldNumber = 1,
    kMaxPtFieldNumber = 2,
  };
  // optional .RoadPB.Point min_pt = 1;
  bool has_min_pt() const;
  private:
  bool _internal_has_min_pt() const;
  public:
  void clear_min_pt();
  const ::RoadPB::Point& min_pt() const;
  ::RoadPB::Point* release_min_pt();
  ::RoadPB::Point* mutable_min_pt();
  void set_allocated_min_pt(::RoadPB::Point* min_pt);
  private:
  const ::RoadPB::Point& _internal_min_pt() const;
  ::RoadPB::Point* _internal_mutable_min_pt();
  public:
  void unsafe_arena_set_allocated_min_pt(
      ::RoadPB::Point* min_pt);
  ::RoadPB::Point* unsafe_arena_release_min_pt();

  // optional .RoadPB.Point max_pt = 2;
  bool has_max_pt() const;
  private:
  bool _internal_has_max_pt() const;
  public:
  void clear_max_pt();
  const ::RoadPB::Point& max_pt() const;
  ::RoadPB::Point* release_max_pt();
  ::RoadPB::Point* mutable_max_pt();
  void set_allocated_max_pt(::RoadPB::Point* max_pt);
  private:
  const ::RoadPB::Point& _internal_max_pt() const;
  ::RoadPB::Point* _internal_mutable_max_pt();
  public:
  void unsafe_arena_set_allocated_max_pt(
      ::RoadPB::Point* max_pt);
  ::RoadPB::Point* unsafe_arena_release_max_pt();

  // @@protoc_insertion_point(class_scope:RoadPB.BoundingBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::RoadPB::Point* min_pt_;
  ::RoadPB::Point* max_pt_;
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class AttributeValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.AttributeValue) */ {
 public:
  inline AttributeValue() : AttributeValue(nullptr) {};
  virtual ~AttributeValue();

  AttributeValue(const AttributeValue& from);
  AttributeValue(AttributeValue&& from) noexcept
    : AttributeValue() {
    *this = ::std::move(from);
  }

  inline AttributeValue& operator=(const AttributeValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeValue& operator=(AttributeValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttributeValue* internal_default_instance() {
    return reinterpret_cast<const AttributeValue*>(
               &_AttributeValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AttributeValue& a, AttributeValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeValue* New() const final {
    return CreateMaybeMessage<AttributeValue>(nullptr);
  }

  AttributeValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeValue& from);
  void MergeFrom(const AttributeValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.AttributeValue";
  }
  protected:
  explicit AttributeValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fcommon_2eproto);
    return ::descriptor_table_common_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVRUVALFieldNumber = 1,
    kOPPOVALFieldNumber = 2,
    kMULTIDIGITIZEDVALFieldNumber = 3,
    kVARISPEEDLIMITVALFieldNumber = 4,
    kOVERHEADOBSTRUCTVALFieldNumber = 5,
    kINFRASEPLVALFieldNumber = 6,
    kINFRASEPRVALFieldNumber = 7,
    kMEDIANLEFTVALFieldNumber = 8,
    kMEDIANWIDTHLVALFieldNumber = 9,
    kMEDIANWIDTHRVALFieldNumber = 11,
    kMEDIANRIGHTVALFieldNumber = 10,
    kMEDIANSURFACELVALFieldNumber = 12,
    kMEDIANSURFACERVALFieldNumber = 13,
    kLINKTYPEVALFieldNumber = 14,
    kLINKKINDVALFieldNumber = 15,
    kPAVEMENTVALFieldNumber = 16,
    kLANETYPEVALFieldNumber = 17,
    kLANEKINDVALFieldNumber = 18,
    kLANEWIDTHVALFieldNumber = 19,
    kLANEHEIGHTLIMITVALFieldNumber = 20,
    kLANEWEIGHTLIMITVALFieldNumber = 21,
    kLANEWIDTHLIMITVALFieldNumber = 22,
    kLANEBOUNDKINDVALFieldNumber = 25,
    kLANEBOUNDCOLORVALFieldNumber = 26,
    kLANEBOUNDMATERIALVALFieldNumber = 27,
    kROADBOUNDKINDVALFieldNumber = 30,
  };
  // optional int32 VRU_VAL = 1;
  bool has_vru_val() const;
  private:
  bool _internal_has_vru_val() const;
  public:
  void clear_vru_val();
  ::PROTOBUF_NAMESPACE_ID::int32 vru_val() const;
  void set_vru_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vru_val() const;
  void _internal_set_vru_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 OPPO_VAL = 2;
  bool has_oppo_val() const;
  private:
  bool _internal_has_oppo_val() const;
  public:
  void clear_oppo_val();
  ::PROTOBUF_NAMESPACE_ID::int32 oppo_val() const;
  void set_oppo_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oppo_val() const;
  void _internal_set_oppo_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 MULTI_DIGITIZED_VAL = 3;
  bool has_multi_digitized_val() const;
  private:
  bool _internal_has_multi_digitized_val() const;
  public:
  void clear_multi_digitized_val();
  ::PROTOBUF_NAMESPACE_ID::int32 multi_digitized_val() const;
  void set_multi_digitized_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multi_digitized_val() const;
  void _internal_set_multi_digitized_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 VARI_SPEED_LIMIT_VAL = 4;
  bool has_vari_speed_limit_val() const;
  private:
  bool _internal_has_vari_speed_limit_val() const;
  public:
  void clear_vari_speed_limit_val();
  ::PROTOBUF_NAMESPACE_ID::int32 vari_speed_limit_val() const;
  void set_vari_speed_limit_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vari_speed_limit_val() const;
  void _internal_set_vari_speed_limit_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 OVERHEAD_OBSTRUCT_VAL = 5;
  bool has_overhead_obstruct_val() const;
  private:
  bool _internal_has_overhead_obstruct_val() const;
  public:
  void clear_overhead_obstruct_val();
  ::PROTOBUF_NAMESPACE_ID::int32 overhead_obstruct_val() const;
  void set_overhead_obstruct_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_overhead_obstruct_val() const;
  void _internal_set_overhead_obstruct_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 INFRA_SEP_L_VAL = 6;
  bool has_infra_sep_l_val() const;
  private:
  bool _internal_has_infra_sep_l_val() const;
  public:
  void clear_infra_sep_l_val();
  ::PROTOBUF_NAMESPACE_ID::int32 infra_sep_l_val() const;
  void set_infra_sep_l_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_infra_sep_l_val() const;
  void _internal_set_infra_sep_l_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 INFRA_SEP_R_VAL = 7;
  bool has_infra_sep_r_val() const;
  private:
  bool _internal_has_infra_sep_r_val() const;
  public:
  void clear_infra_sep_r_val();
  ::PROTOBUF_NAMESPACE_ID::int32 infra_sep_r_val() const;
  void set_infra_sep_r_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_infra_sep_r_val() const;
  void _internal_set_infra_sep_r_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 MEDIAN_LEFT_VAL = 8;
  bool has_median_left_val() const;
  private:
  bool _internal_has_median_left_val() const;
  public:
  void clear_median_left_val();
  ::PROTOBUF_NAMESPACE_ID::int32 median_left_val() const;
  void set_median_left_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_median_left_val() const;
  void _internal_set_median_left_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double MEDIAN_WIDTH_L_VAL = 9;
  bool has_median_width_l_val() const;
  private:
  bool _internal_has_median_width_l_val() const;
  public:
  void clear_median_width_l_val();
  double median_width_l_val() const;
  void set_median_width_l_val(double value);
  private:
  double _internal_median_width_l_val() const;
  void _internal_set_median_width_l_val(double value);
  public:

  // optional double MEDIAN_WIDTH_R_VAL = 11;
  bool has_median_width_r_val() const;
  private:
  bool _internal_has_median_width_r_val() const;
  public:
  void clear_median_width_r_val();
  double median_width_r_val() const;
  void set_median_width_r_val(double value);
  private:
  double _internal_median_width_r_val() const;
  void _internal_set_median_width_r_val(double value);
  public:

  // optional int32 MEDIAN_RIGHT_VAL = 10;
  bool has_median_right_val() const;
  private:
  bool _internal_has_median_right_val() const;
  public:
  void clear_median_right_val();
  ::PROTOBUF_NAMESPACE_ID::int32 median_right_val() const;
  void set_median_right_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_median_right_val() const;
  void _internal_set_median_right_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 MEDIAN_SURFACE_L_VAL = 12;
  bool has_median_surface_l_val() const;
  private:
  bool _internal_has_median_surface_l_val() const;
  public:
  void clear_median_surface_l_val();
  ::PROTOBUF_NAMESPACE_ID::int32 median_surface_l_val() const;
  void set_median_surface_l_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_median_surface_l_val() const;
  void _internal_set_median_surface_l_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 MEDIAN_SURFACE_R_VAL = 13;
  bool has_median_surface_r_val() const;
  private:
  bool _internal_has_median_surface_r_val() const;
  public:
  void clear_median_surface_r_val();
  ::PROTOBUF_NAMESPACE_ID::int32 median_surface_r_val() const;
  void set_median_surface_r_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_median_surface_r_val() const;
  void _internal_set_median_surface_r_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 LINK_TYPE_VAL = 14;
  bool has_link_type_val() const;
  private:
  bool _internal_has_link_type_val() const;
  public:
  void clear_link_type_val();
  ::PROTOBUF_NAMESPACE_ID::int32 link_type_val() const;
  void set_link_type_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_link_type_val() const;
  void _internal_set_link_type_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 LINK_KIND_VAL = 15;
  bool has_link_kind_val() const;
  private:
  bool _internal_has_link_kind_val() const;
  public:
  void clear_link_kind_val();
  ::PROTOBUF_NAMESPACE_ID::int32 link_kind_val() const;
  void set_link_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_link_kind_val() const;
  void _internal_set_link_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 PAVEMENT_VAL = 16;
  bool has_pavement_val() const;
  private:
  bool _internal_has_pavement_val() const;
  public:
  void clear_pavement_val();
  ::PROTOBUF_NAMESPACE_ID::int32 pavement_val() const;
  void set_pavement_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pavement_val() const;
  void _internal_set_pavement_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 LANE_TYPE_VAL = 17;
  bool has_lane_type_val() const;
  private:
  bool _internal_has_lane_type_val() const;
  public:
  void clear_lane_type_val();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_type_val() const;
  void set_lane_type_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_type_val() const;
  void _internal_set_lane_type_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 LANE_KIND_VAL = 18;
  bool has_lane_kind_val() const;
  private:
  bool _internal_has_lane_kind_val() const;
  public:
  void clear_lane_kind_val();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_kind_val() const;
  void set_lane_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_kind_val() const;
  void _internal_set_lane_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double LANE_WIDTH_VAL = 19;
  bool has_lane_width_val() const;
  private:
  bool _internal_has_lane_width_val() const;
  public:
  void clear_lane_width_val();
  double lane_width_val() const;
  void set_lane_width_val(double value);
  private:
  double _internal_lane_width_val() const;
  void _internal_set_lane_width_val(double value);
  public:

  // optional double LANE_HEIGHT_LIMIT_VAL = 20;
  bool has_lane_height_limit_val() const;
  private:
  bool _internal_has_lane_height_limit_val() const;
  public:
  void clear_lane_height_limit_val();
  double lane_height_limit_val() const;
  void set_lane_height_limit_val(double value);
  private:
  double _internal_lane_height_limit_val() const;
  void _internal_set_lane_height_limit_val(double value);
  public:

  // optional double LANE_WEIGHT_LIMIT_VAL = 21;
  bool has_lane_weight_limit_val() const;
  private:
  bool _internal_has_lane_weight_limit_val() const;
  public:
  void clear_lane_weight_limit_val();
  double lane_weight_limit_val() const;
  void set_lane_weight_limit_val(double value);
  private:
  double _internal_lane_weight_limit_val() const;
  void _internal_set_lane_weight_limit_val(double value);
  public:

  // optional double LANE_WIDTH_LIMIT_VAL = 22;
  bool has_lane_width_limit_val() const;
  private:
  bool _internal_has_lane_width_limit_val() const;
  public:
  void clear_lane_width_limit_val();
  double lane_width_limit_val() const;
  void set_lane_width_limit_val(double value);
  private:
  double _internal_lane_width_limit_val() const;
  void _internal_set_lane_width_limit_val(double value);
  public:

  // optional int32 LANE_BOUND_KIND_VAL = 25;
  bool has_lane_bound_kind_val() const;
  private:
  bool _internal_has_lane_bound_kind_val() const;
  public:
  void clear_lane_bound_kind_val();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_bound_kind_val() const;
  void set_lane_bound_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_bound_kind_val() const;
  void _internal_set_lane_bound_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 LANE_BOUND_COLOR_VAL = 26;
  bool has_lane_bound_color_val() const;
  private:
  bool _internal_has_lane_bound_color_val() const;
  public:
  void clear_lane_bound_color_val();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_bound_color_val() const;
  void set_lane_bound_color_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_bound_color_val() const;
  void _internal_set_lane_bound_color_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 LANE_BOUND_MATERIAL_VAL = 27;
  bool has_lane_bound_material_val() const;
  private:
  bool _internal_has_lane_bound_material_val() const;
  public:
  void clear_lane_bound_material_val();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_bound_material_val() const;
  void set_lane_bound_material_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_bound_material_val() const;
  void _internal_set_lane_bound_material_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ROAD_BOUND_KIND_VAL = 30;
  bool has_road_bound_kind_val() const;
  private:
  bool _internal_has_road_bound_kind_val() const;
  public:
  void clear_road_bound_kind_val();
  ::PROTOBUF_NAMESPACE_ID::int32 road_bound_kind_val() const;
  void set_road_bound_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_road_bound_kind_val() const;
  void _internal_set_road_bound_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.AttributeValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 vru_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 oppo_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 multi_digitized_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 vari_speed_limit_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 overhead_obstruct_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 infra_sep_l_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 infra_sep_r_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 median_left_val_;
  double median_width_l_val_;
  double median_width_r_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 median_right_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 median_surface_l_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 median_surface_r_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 link_type_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 link_kind_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 pavement_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_type_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_kind_val_;
  double lane_width_val_;
  double lane_height_limit_val_;
  double lane_weight_limit_val_;
  double lane_width_limit_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_bound_kind_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_bound_color_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_bound_material_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 road_bound_kind_val_;
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class RangeAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.RangeAttribute) */ {
 public:
  inline RangeAttribute() : RangeAttribute(nullptr) {};
  virtual ~RangeAttribute();

  RangeAttribute(const RangeAttribute& from);
  RangeAttribute(RangeAttribute&& from) noexcept
    : RangeAttribute() {
    *this = ::std::move(from);
  }

  inline RangeAttribute& operator=(const RangeAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeAttribute& operator=(RangeAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RangeAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeAttribute* internal_default_instance() {
    return reinterpret_cast<const RangeAttribute*>(
               &_RangeAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RangeAttribute& a, RangeAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeAttribute* New() const final {
    return CreateMaybeMessage<RangeAttribute>(nullptr);
  }

  RangeAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeAttribute& from);
  void MergeFrom(const RangeAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.RangeAttribute";
  }
  protected:
  explicit RangeAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fcommon_2eproto);
    return ::descriptor_table_common_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeomFieldNumber = 1,
    kStartValFieldNumber = 3,
    kEndValFieldNumber = 4,
    kAttributeLenFieldNumber = 5,
    kTypeFieldNumber = 2,
  };
  // optional .RoadPB.Polyline geom = 1;
  bool has_geom() const;
  private:
  bool _internal_has_geom() const;
  public:
  void clear_geom();
  const ::RoadPB::Polyline& geom() const;
  ::RoadPB::Polyline* release_geom();
  ::RoadPB::Polyline* mutable_geom();
  void set_allocated_geom(::RoadPB::Polyline* geom);
  private:
  const ::RoadPB::Polyline& _internal_geom() const;
  ::RoadPB::Polyline* _internal_mutable_geom();
  public:
  void unsafe_arena_set_allocated_geom(
      ::RoadPB::Polyline* geom);
  ::RoadPB::Polyline* unsafe_arena_release_geom();

  // optional .RoadPB.AttributeValue start_val = 3;
  bool has_start_val() const;
  private:
  bool _internal_has_start_val() const;
  public:
  void clear_start_val();
  const ::RoadPB::AttributeValue& start_val() const;
  ::RoadPB::AttributeValue* release_start_val();
  ::RoadPB::AttributeValue* mutable_start_val();
  void set_allocated_start_val(::RoadPB::AttributeValue* start_val);
  private:
  const ::RoadPB::AttributeValue& _internal_start_val() const;
  ::RoadPB::AttributeValue* _internal_mutable_start_val();
  public:
  void unsafe_arena_set_allocated_start_val(
      ::RoadPB::AttributeValue* start_val);
  ::RoadPB::AttributeValue* unsafe_arena_release_start_val();

  // optional .RoadPB.AttributeValue end_val = 4;
  bool has_end_val() const;
  private:
  bool _internal_has_end_val() const;
  public:
  void clear_end_val();
  const ::RoadPB::AttributeValue& end_val() const;
  ::RoadPB::AttributeValue* release_end_val();
  ::RoadPB::AttributeValue* mutable_end_val();
  void set_allocated_end_val(::RoadPB::AttributeValue* end_val);
  private:
  const ::RoadPB::AttributeValue& _internal_end_val() const;
  ::RoadPB::AttributeValue* _internal_mutable_end_val();
  public:
  void unsafe_arena_set_allocated_end_val(
      ::RoadPB::AttributeValue* end_val);
  ::RoadPB::AttributeValue* unsafe_arena_release_end_val();

  // optional double attribute_len = 5;
  bool has_attribute_len() const;
  private:
  bool _internal_has_attribute_len() const;
  public:
  void clear_attribute_len();
  double attribute_len() const;
  void set_attribute_len(double value);
  private:
  double _internal_attribute_len() const;
  void _internal_set_attribute_len(double value);
  public:

  // optional .RoadPB.AttributeType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::RoadPB::AttributeType type() const;
  void set_type(::RoadPB::AttributeType value);
  private:
  ::RoadPB::AttributeType _internal_type() const;
  void _internal_set_type(::RoadPB::AttributeType value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.RangeAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::RoadPB::Polyline* geom_;
  ::RoadPB::AttributeValue* start_val_;
  ::RoadPB::AttributeValue* end_val_;
  double attribute_len_;
  int type_;
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class FixedSpeedLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.FixedSpeedLimit) */ {
 public:
  inline FixedSpeedLimit() : FixedSpeedLimit(nullptr) {};
  virtual ~FixedSpeedLimit();

  FixedSpeedLimit(const FixedSpeedLimit& from);
  FixedSpeedLimit(FixedSpeedLimit&& from) noexcept
    : FixedSpeedLimit() {
    *this = ::std::move(from);
  }

  inline FixedSpeedLimit& operator=(const FixedSpeedLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedSpeedLimit& operator=(FixedSpeedLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FixedSpeedLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FixedSpeedLimit* internal_default_instance() {
    return reinterpret_cast<const FixedSpeedLimit*>(
               &_FixedSpeedLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FixedSpeedLimit& a, FixedSpeedLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedSpeedLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedSpeedLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FixedSpeedLimit* New() const final {
    return CreateMaybeMessage<FixedSpeedLimit>(nullptr);
  }

  FixedSpeedLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FixedSpeedLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FixedSpeedLimit& from);
  void MergeFrom(const FixedSpeedLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedSpeedLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.FixedSpeedLimit";
  }
  protected:
  explicit FixedSpeedLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fcommon_2eproto);
    return ::descriptor_table_common_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidPeriodFieldNumber = 7,
    kVehicleTypeFieldNumber = 8,
    kGeomFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kMaxSpeedFieldNumber = 3,
    kMaxSourceFieldNumber = 4,
    kMinSpeedFieldNumber = 5,
    kMinSourceFieldNumber = 6,
  };
  // optional string valid_period = 7;
  bool has_valid_period() const;
  private:
  bool _internal_has_valid_period() const;
  public:
  void clear_valid_period();
  const std::string& valid_period() const;
  void set_valid_period(const std::string& value);
  void set_valid_period(std::string&& value);
  void set_valid_period(const char* value);
  void set_valid_period(const char* value, size_t size);
  std::string* mutable_valid_period();
  std::string* release_valid_period();
  void set_allocated_valid_period(std::string* valid_period);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_valid_period();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_valid_period(
      std::string* valid_period);
  private:
  const std::string& _internal_valid_period() const;
  void _internal_set_valid_period(const std::string& value);
  std::string* _internal_mutable_valid_period();
  public:

  // optional string vehicle_type = 8;
  bool has_vehicle_type() const;
  private:
  bool _internal_has_vehicle_type() const;
  public:
  void clear_vehicle_type();
  const std::string& vehicle_type() const;
  void set_vehicle_type(const std::string& value);
  void set_vehicle_type(std::string&& value);
  void set_vehicle_type(const char* value);
  void set_vehicle_type(const char* value, size_t size);
  std::string* mutable_vehicle_type();
  std::string* release_vehicle_type();
  void set_allocated_vehicle_type(std::string* vehicle_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vehicle_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vehicle_type(
      std::string* vehicle_type);
  private:
  const std::string& _internal_vehicle_type() const;
  void _internal_set_vehicle_type(const std::string& value);
  std::string* _internal_mutable_vehicle_type();
  public:

  // optional .RoadPB.Polyline geom = 1;
  bool has_geom() const;
  private:
  bool _internal_has_geom() const;
  public:
  void clear_geom();
  const ::RoadPB::Polyline& geom() const;
  ::RoadPB::Polyline* release_geom();
  ::RoadPB::Polyline* mutable_geom();
  void set_allocated_geom(::RoadPB::Polyline* geom);
  private:
  const ::RoadPB::Polyline& _internal_geom() const;
  ::RoadPB::Polyline* _internal_mutable_geom();
  public:
  void unsafe_arena_set_allocated_geom(
      ::RoadPB::Polyline* geom);
  ::RoadPB::Polyline* unsafe_arena_release_geom();

  // optional int32 direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float max_speed = 3;
  bool has_max_speed() const;
  private:
  bool _internal_has_max_speed() const;
  public:
  void clear_max_speed();
  float max_speed() const;
  void set_max_speed(float value);
  private:
  float _internal_max_speed() const;
  void _internal_set_max_speed(float value);
  public:

  // optional int32 max_source = 4;
  bool has_max_source() const;
  private:
  bool _internal_has_max_source() const;
  public:
  void clear_max_source();
  ::PROTOBUF_NAMESPACE_ID::int32 max_source() const;
  void set_max_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_source() const;
  void _internal_set_max_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float min_speed = 5;
  bool has_min_speed() const;
  private:
  bool _internal_has_min_speed() const;
  public:
  void clear_min_speed();
  float min_speed() const;
  void set_min_speed(float value);
  private:
  float _internal_min_speed() const;
  void _internal_set_min_speed(float value);
  public:

  // optional int32 min_source = 6;
  bool has_min_source() const;
  private:
  bool _internal_has_min_source() const;
  public:
  void clear_min_source();
  ::PROTOBUF_NAMESPACE_ID::int32 min_source() const;
  void set_min_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_source() const;
  void _internal_set_min_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.FixedSpeedLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_period_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_type_;
  ::RoadPB::Polyline* geom_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  float max_speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_source_;
  float min_speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_source_;
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class CondSpeedLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.CondSpeedLimit) */ {
 public:
  inline CondSpeedLimit() : CondSpeedLimit(nullptr) {};
  virtual ~CondSpeedLimit();

  CondSpeedLimit(const CondSpeedLimit& from);
  CondSpeedLimit(CondSpeedLimit&& from) noexcept
    : CondSpeedLimit() {
    *this = ::std::move(from);
  }

  inline CondSpeedLimit& operator=(const CondSpeedLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CondSpeedLimit& operator=(CondSpeedLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CondSpeedLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CondSpeedLimit* internal_default_instance() {
    return reinterpret_cast<const CondSpeedLimit*>(
               &_CondSpeedLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CondSpeedLimit& a, CondSpeedLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(CondSpeedLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CondSpeedLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CondSpeedLimit* New() const final {
    return CreateMaybeMessage<CondSpeedLimit>(nullptr);
  }

  CondSpeedLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CondSpeedLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CondSpeedLimit& from);
  void MergeFrom(const CondSpeedLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CondSpeedLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.CondSpeedLimit";
  }
  protected:
  explicit CondSpeedLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fcommon_2eproto);
    return ::descriptor_table_common_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidPeriodFieldNumber = 5,
    kVehicleTypeFieldNumber = 6,
    kGeomFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kCondTypeFieldNumber = 3,
    kAttributeLenFieldNumber = 7,
    kCondSpeedLimitFieldNumber = 4,
  };
  // optional string valid_period = 5;
  bool has_valid_period() const;
  private:
  bool _internal_has_valid_period() const;
  public:
  void clear_valid_period();
  const std::string& valid_period() const;
  void set_valid_period(const std::string& value);
  void set_valid_period(std::string&& value);
  void set_valid_period(const char* value);
  void set_valid_period(const char* value, size_t size);
  std::string* mutable_valid_period();
  std::string* release_valid_period();
  void set_allocated_valid_period(std::string* valid_period);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_valid_period();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_valid_period(
      std::string* valid_period);
  private:
  const std::string& _internal_valid_period() const;
  void _internal_set_valid_period(const std::string& value);
  std::string* _internal_mutable_valid_period();
  public:

  // optional string vehicle_type = 6;
  bool has_vehicle_type() const;
  private:
  bool _internal_has_vehicle_type() const;
  public:
  void clear_vehicle_type();
  const std::string& vehicle_type() const;
  void set_vehicle_type(const std::string& value);
  void set_vehicle_type(std::string&& value);
  void set_vehicle_type(const char* value);
  void set_vehicle_type(const char* value, size_t size);
  std::string* mutable_vehicle_type();
  std::string* release_vehicle_type();
  void set_allocated_vehicle_type(std::string* vehicle_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vehicle_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vehicle_type(
      std::string* vehicle_type);
  private:
  const std::string& _internal_vehicle_type() const;
  void _internal_set_vehicle_type(const std::string& value);
  std::string* _internal_mutable_vehicle_type();
  public:

  // optional .RoadPB.Polyline geom = 1;
  bool has_geom() const;
  private:
  bool _internal_has_geom() const;
  public:
  void clear_geom();
  const ::RoadPB::Polyline& geom() const;
  ::RoadPB::Polyline* release_geom();
  ::RoadPB::Polyline* mutable_geom();
  void set_allocated_geom(::RoadPB::Polyline* geom);
  private:
  const ::RoadPB::Polyline& _internal_geom() const;
  ::RoadPB::Polyline* _internal_mutable_geom();
  public:
  void unsafe_arena_set_allocated_geom(
      ::RoadPB::Polyline* geom);
  ::RoadPB::Polyline* unsafe_arena_release_geom();

  // optional int32 direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 cond_type = 3;
  bool has_cond_type() const;
  private:
  bool _internal_has_cond_type() const;
  public:
  void clear_cond_type();
  ::PROTOBUF_NAMESPACE_ID::int32 cond_type() const;
  void set_cond_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cond_type() const;
  void _internal_set_cond_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double attribute_len = 7;
  bool has_attribute_len() const;
  private:
  bool _internal_has_attribute_len() const;
  public:
  void clear_attribute_len();
  double attribute_len() const;
  void set_attribute_len(double value);
  private:
  double _internal_attribute_len() const;
  void _internal_set_attribute_len(double value);
  public:

  // optional int32 cond_speed_limit = 4;
  bool has_cond_speed_limit() const;
  private:
  bool _internal_has_cond_speed_limit() const;
  public:
  void clear_cond_speed_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 cond_speed_limit() const;
  void set_cond_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cond_speed_limit() const;
  void _internal_set_cond_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.CondSpeedLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_period_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_type_;
  ::RoadPB::Polyline* geom_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 cond_type_;
  double attribute_len_;
  ::PROTOBUF_NAMESPACE_ID::int32 cond_speed_limit_;
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LangName

// optional string name_type = 1;
inline bool LangName::_internal_has_name_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LangName::has_name_type() const {
  return _internal_has_name_type();
}
inline void LangName::clear_name_type() {
  name_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LangName::name_type() const {
  // @@protoc_insertion_point(field_get:RoadPB.LangName.name_type)
  return _internal_name_type();
}
inline void LangName::set_name_type(const std::string& value) {
  _internal_set_name_type(value);
  // @@protoc_insertion_point(field_set:RoadPB.LangName.name_type)
}
inline std::string* LangName::mutable_name_type() {
  // @@protoc_insertion_point(field_mutable:RoadPB.LangName.name_type)
  return _internal_mutable_name_type();
}
inline const std::string& LangName::_internal_name_type() const {
  return name_type_.Get();
}
inline void LangName::_internal_set_name_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LangName::set_name_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoadPB.LangName.name_type)
}
inline void LangName::set_name_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoadPB.LangName.name_type)
}
inline void LangName::set_name_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoadPB.LangName.name_type)
}
inline std::string* LangName::_internal_mutable_name_type() {
  _has_bits_[0] |= 0x00000001u;
  return name_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LangName::release_name_type() {
  // @@protoc_insertion_point(field_release:RoadPB.LangName.name_type)
  if (!_internal_has_name_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LangName::set_allocated_name_type(std::string* name_type) {
  if (name_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.LangName.name_type)
}
inline std::string* LangName::unsafe_arena_release_name_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoadPB.LangName.name_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LangName::unsafe_arena_set_allocated_name_type(
    std::string* name_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.LangName.name_type)
}

// optional string lang_code = 2;
inline bool LangName::_internal_has_lang_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LangName::has_lang_code() const {
  return _internal_has_lang_code();
}
inline void LangName::clear_lang_code() {
  lang_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LangName::lang_code() const {
  // @@protoc_insertion_point(field_get:RoadPB.LangName.lang_code)
  return _internal_lang_code();
}
inline void LangName::set_lang_code(const std::string& value) {
  _internal_set_lang_code(value);
  // @@protoc_insertion_point(field_set:RoadPB.LangName.lang_code)
}
inline std::string* LangName::mutable_lang_code() {
  // @@protoc_insertion_point(field_mutable:RoadPB.LangName.lang_code)
  return _internal_mutable_lang_code();
}
inline const std::string& LangName::_internal_lang_code() const {
  return lang_code_.Get();
}
inline void LangName::_internal_set_lang_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  lang_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LangName::set_lang_code(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  lang_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoadPB.LangName.lang_code)
}
inline void LangName::set_lang_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  lang_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoadPB.LangName.lang_code)
}
inline void LangName::set_lang_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  lang_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoadPB.LangName.lang_code)
}
inline std::string* LangName::_internal_mutable_lang_code() {
  _has_bits_[0] |= 0x00000002u;
  return lang_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LangName::release_lang_code() {
  // @@protoc_insertion_point(field_release:RoadPB.LangName.lang_code)
  if (!_internal_has_lang_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return lang_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LangName::set_allocated_lang_code(std::string* lang_code) {
  if (lang_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lang_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.LangName.lang_code)
}
inline std::string* LangName::unsafe_arena_release_lang_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoadPB.LangName.lang_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return lang_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LangName::unsafe_arena_set_allocated_lang_code(
    std::string* lang_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (lang_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lang_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lang_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.LangName.lang_code)
}

// optional string name = 3;
inline bool LangName::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LangName::has_name() const {
  return _internal_has_name();
}
inline void LangName::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LangName::name() const {
  // @@protoc_insertion_point(field_get:RoadPB.LangName.name)
  return _internal_name();
}
inline void LangName::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:RoadPB.LangName.name)
}
inline std::string* LangName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:RoadPB.LangName.name)
  return _internal_mutable_name();
}
inline const std::string& LangName::_internal_name() const {
  return name_.Get();
}
inline void LangName::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LangName::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoadPB.LangName.name)
}
inline void LangName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoadPB.LangName.name)
}
inline void LangName::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoadPB.LangName.name)
}
inline std::string* LangName::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000004u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LangName::release_name() {
  // @@protoc_insertion_point(field_release:RoadPB.LangName.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LangName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.LangName.name)
}
inline std::string* LangName::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoadPB.LangName.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LangName::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.LangName.name)
}

// -------------------------------------------------------------------

// Point

// optional double x = 1;
inline bool Point::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point::has_x() const {
  return _internal_has_x();
}
inline void Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Point::_internal_x() const {
  return x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:RoadPB.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:RoadPB.Point.x)
}

// optional double y = 2;
inline bool Point::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point::has_y() const {
  return _internal_has_y();
}
inline void Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Point::_internal_y() const {
  return y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:RoadPB.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:RoadPB.Point.y)
}

// optional double z = 3;
inline bool Point::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Point::has_z() const {
  return _internal_has_z();
}
inline void Point::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Point::_internal_z() const {
  return z_;
}
inline double Point::z() const {
  // @@protoc_insertion_point(field_get:RoadPB.Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Point::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:RoadPB.Point.z)
}

// -------------------------------------------------------------------

// Polyline

// repeated .RoadPB.Point pts = 1;
inline int Polyline::_internal_pts_size() const {
  return pts_.size();
}
inline int Polyline::pts_size() const {
  return _internal_pts_size();
}
inline void Polyline::clear_pts() {
  pts_.Clear();
}
inline ::RoadPB::Point* Polyline::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:RoadPB.Polyline.pts)
  return pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point >*
Polyline::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:RoadPB.Polyline.pts)
  return &pts_;
}
inline const ::RoadPB::Point& Polyline::_internal_pts(int index) const {
  return pts_.Get(index);
}
inline const ::RoadPB::Point& Polyline::pts(int index) const {
  // @@protoc_insertion_point(field_get:RoadPB.Polyline.pts)
  return _internal_pts(index);
}
inline ::RoadPB::Point* Polyline::_internal_add_pts() {
  return pts_.Add();
}
inline ::RoadPB::Point* Polyline::add_pts() {
  // @@protoc_insertion_point(field_add:RoadPB.Polyline.pts)
  return _internal_add_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point >&
Polyline::pts() const {
  // @@protoc_insertion_point(field_list:RoadPB.Polyline.pts)
  return pts_;
}

// optional float width = 2;
inline bool Polyline::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Polyline::has_width() const {
  return _internal_has_width();
}
inline void Polyline::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Polyline::_internal_width() const {
  return width_;
}
inline float Polyline::width() const {
  // @@protoc_insertion_point(field_get:RoadPB.Polyline.width)
  return _internal_width();
}
inline void Polyline::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void Polyline::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:RoadPB.Polyline.width)
}

// optional float height = 3;
inline bool Polyline::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Polyline::has_height() const {
  return _internal_has_height();
}
inline void Polyline::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Polyline::_internal_height() const {
  return height_;
}
inline float Polyline::height() const {
  // @@protoc_insertion_point(field_get:RoadPB.Polyline.height)
  return _internal_height();
}
inline void Polyline::_internal_set_height(float value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void Polyline::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:RoadPB.Polyline.height)
}

// -------------------------------------------------------------------

// Polygon

// repeated .RoadPB.Point pts = 1;
inline int Polygon::_internal_pts_size() const {
  return pts_.size();
}
inline int Polygon::pts_size() const {
  return _internal_pts_size();
}
inline void Polygon::clear_pts() {
  pts_.Clear();
}
inline ::RoadPB::Point* Polygon::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:RoadPB.Polygon.pts)
  return pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point >*
Polygon::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:RoadPB.Polygon.pts)
  return &pts_;
}
inline const ::RoadPB::Point& Polygon::_internal_pts(int index) const {
  return pts_.Get(index);
}
inline const ::RoadPB::Point& Polygon::pts(int index) const {
  // @@protoc_insertion_point(field_get:RoadPB.Polygon.pts)
  return _internal_pts(index);
}
inline ::RoadPB::Point* Polygon::_internal_add_pts() {
  return pts_.Add();
}
inline ::RoadPB::Point* Polygon::add_pts() {
  // @@protoc_insertion_point(field_add:RoadPB.Polygon.pts)
  return _internal_add_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point >&
Polygon::pts() const {
  // @@protoc_insertion_point(field_list:RoadPB.Polygon.pts)
  return pts_;
}

// optional .RoadPB.Point normal = 2;
inline bool Polygon::_internal_has_normal() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || normal_ != nullptr);
  return value;
}
inline bool Polygon::has_normal() const {
  return _internal_has_normal();
}
inline void Polygon::clear_normal() {
  if (normal_ != nullptr) normal_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::RoadPB::Point& Polygon::_internal_normal() const {
  const ::RoadPB::Point* p = normal_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Point*>(
      &::RoadPB::_Point_default_instance_);
}
inline const ::RoadPB::Point& Polygon::normal() const {
  // @@protoc_insertion_point(field_get:RoadPB.Polygon.normal)
  return _internal_normal();
}
inline void Polygon::unsafe_arena_set_allocated_normal(
    ::RoadPB::Point* normal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normal_);
  }
  normal_ = normal;
  if (normal) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Polygon.normal)
}
inline ::RoadPB::Point* Polygon::release_normal() {
  auto temp = unsafe_arena_release_normal();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Point* Polygon::unsafe_arena_release_normal() {
  // @@protoc_insertion_point(field_release:RoadPB.Polygon.normal)
  _has_bits_[0] &= ~0x00000001u;
  ::RoadPB::Point* temp = normal_;
  normal_ = nullptr;
  return temp;
}
inline ::RoadPB::Point* Polygon::_internal_mutable_normal() {
  _has_bits_[0] |= 0x00000001u;
  if (normal_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Point>(GetArena());
    normal_ = p;
  }
  return normal_;
}
inline ::RoadPB::Point* Polygon::mutable_normal() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Polygon.normal)
  return _internal_mutable_normal();
}
inline void Polygon::set_allocated_normal(::RoadPB::Point* normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete normal_;
  }
  if (normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(normal);
    if (message_arena != submessage_arena) {
      normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  normal_ = normal;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Polygon.normal)
}

// optional float edge_width = 3;
inline bool Polygon::_internal_has_edge_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Polygon::has_edge_width() const {
  return _internal_has_edge_width();
}
inline void Polygon::clear_edge_width() {
  edge_width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Polygon::_internal_edge_width() const {
  return edge_width_;
}
inline float Polygon::edge_width() const {
  // @@protoc_insertion_point(field_get:RoadPB.Polygon.edge_width)
  return _internal_edge_width();
}
inline void Polygon::_internal_set_edge_width(float value) {
  _has_bits_[0] |= 0x00000004u;
  edge_width_ = value;
}
inline void Polygon::set_edge_width(float value) {
  _internal_set_edge_width(value);
  // @@protoc_insertion_point(field_set:RoadPB.Polygon.edge_width)
}

// optional .RoadPB.Point orientation = 4;
inline bool Polygon::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || orientation_ != nullptr);
  return value;
}
inline bool Polygon::has_orientation() const {
  return _internal_has_orientation();
}
inline void Polygon::clear_orientation() {
  if (orientation_ != nullptr) orientation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::RoadPB::Point& Polygon::_internal_orientation() const {
  const ::RoadPB::Point* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Point*>(
      &::RoadPB::_Point_default_instance_);
}
inline const ::RoadPB::Point& Polygon::orientation() const {
  // @@protoc_insertion_point(field_get:RoadPB.Polygon.orientation)
  return _internal_orientation();
}
inline void Polygon::unsafe_arena_set_allocated_orientation(
    ::RoadPB::Point* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Polygon.orientation)
}
inline ::RoadPB::Point* Polygon::release_orientation() {
  auto temp = unsafe_arena_release_orientation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Point* Polygon::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:RoadPB.Polygon.orientation)
  _has_bits_[0] &= ~0x00000002u;
  ::RoadPB::Point* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::RoadPB::Point* Polygon::_internal_mutable_orientation() {
  _has_bits_[0] |= 0x00000002u;
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Point>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::RoadPB::Point* Polygon::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Polygon.orientation)
  return _internal_mutable_orientation();
}
inline void Polygon::set_allocated_orientation(::RoadPB::Point* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Polygon.orientation)
}

// -------------------------------------------------------------------

// Circle

// optional .RoadPB.Point center = 1;
inline bool Circle::_internal_has_center() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || center_ != nullptr);
  return value;
}
inline bool Circle::has_center() const {
  return _internal_has_center();
}
inline void Circle::clear_center() {
  if (center_ != nullptr) center_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::RoadPB::Point& Circle::_internal_center() const {
  const ::RoadPB::Point* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Point*>(
      &::RoadPB::_Point_default_instance_);
}
inline const ::RoadPB::Point& Circle::center() const {
  // @@protoc_insertion_point(field_get:RoadPB.Circle.center)
  return _internal_center();
}
inline void Circle::unsafe_arena_set_allocated_center(
    ::RoadPB::Point* center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Circle.center)
}
inline ::RoadPB::Point* Circle::release_center() {
  auto temp = unsafe_arena_release_center();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Point* Circle::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:RoadPB.Circle.center)
  _has_bits_[0] &= ~0x00000001u;
  ::RoadPB::Point* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::RoadPB::Point* Circle::_internal_mutable_center() {
  _has_bits_[0] |= 0x00000001u;
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Point>(GetArena());
    center_ = p;
  }
  return center_;
}
inline ::RoadPB::Point* Circle::mutable_center() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Circle.center)
  return _internal_mutable_center();
}
inline void Circle::set_allocated_center(::RoadPB::Point* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Circle.center)
}

// optional .RoadPB.Point normal = 2;
inline bool Circle::_internal_has_normal() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || normal_ != nullptr);
  return value;
}
inline bool Circle::has_normal() const {
  return _internal_has_normal();
}
inline void Circle::clear_normal() {
  if (normal_ != nullptr) normal_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::RoadPB::Point& Circle::_internal_normal() const {
  const ::RoadPB::Point* p = normal_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Point*>(
      &::RoadPB::_Point_default_instance_);
}
inline const ::RoadPB::Point& Circle::normal() const {
  // @@protoc_insertion_point(field_get:RoadPB.Circle.normal)
  return _internal_normal();
}
inline void Circle::unsafe_arena_set_allocated_normal(
    ::RoadPB::Point* normal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normal_);
  }
  normal_ = normal;
  if (normal) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Circle.normal)
}
inline ::RoadPB::Point* Circle::release_normal() {
  auto temp = unsafe_arena_release_normal();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Point* Circle::unsafe_arena_release_normal() {
  // @@protoc_insertion_point(field_release:RoadPB.Circle.normal)
  _has_bits_[0] &= ~0x00000002u;
  ::RoadPB::Point* temp = normal_;
  normal_ = nullptr;
  return temp;
}
inline ::RoadPB::Point* Circle::_internal_mutable_normal() {
  _has_bits_[0] |= 0x00000002u;
  if (normal_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Point>(GetArena());
    normal_ = p;
  }
  return normal_;
}
inline ::RoadPB::Point* Circle::mutable_normal() {
  // @@protoc_insertion_point(field_mutable:RoadPB.Circle.normal)
  return _internal_mutable_normal();
}
inline void Circle::set_allocated_normal(::RoadPB::Point* normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete normal_;
  }
  if (normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(normal);
    if (message_arena != submessage_arena) {
      normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  normal_ = normal;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Circle.normal)
}

// optional float radius = 3;
inline bool Circle::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Circle::has_radius() const {
  return _internal_has_radius();
}
inline void Circle::clear_radius() {
  radius_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Circle::_internal_radius() const {
  return radius_;
}
inline float Circle::radius() const {
  // @@protoc_insertion_point(field_get:RoadPB.Circle.radius)
  return _internal_radius();
}
inline void Circle::_internal_set_radius(float value) {
  _has_bits_[0] |= 0x00000004u;
  radius_ = value;
}
inline void Circle::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:RoadPB.Circle.radius)
}

// optional float edge_width = 4;
inline bool Circle::_internal_has_edge_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Circle::has_edge_width() const {
  return _internal_has_edge_width();
}
inline void Circle::clear_edge_width() {
  edge_width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Circle::_internal_edge_width() const {
  return edge_width_;
}
inline float Circle::edge_width() const {
  // @@protoc_insertion_point(field_get:RoadPB.Circle.edge_width)
  return _internal_edge_width();
}
inline void Circle::_internal_set_edge_width(float value) {
  _has_bits_[0] |= 0x00000008u;
  edge_width_ = value;
}
inline void Circle::set_edge_width(float value) {
  _internal_set_edge_width(value);
  // @@protoc_insertion_point(field_set:RoadPB.Circle.edge_width)
}

// -------------------------------------------------------------------

// Cylinder

// repeated .RoadPB.Point points = 1;
inline int Cylinder::_internal_points_size() const {
  return points_.size();
}
inline int Cylinder::points_size() const {
  return _internal_points_size();
}
inline void Cylinder::clear_points() {
  points_.Clear();
}
inline ::RoadPB::Point* Cylinder::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:RoadPB.Cylinder.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point >*
Cylinder::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:RoadPB.Cylinder.points)
  return &points_;
}
inline const ::RoadPB::Point& Cylinder::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::RoadPB::Point& Cylinder::points(int index) const {
  // @@protoc_insertion_point(field_get:RoadPB.Cylinder.points)
  return _internal_points(index);
}
inline ::RoadPB::Point* Cylinder::_internal_add_points() {
  return points_.Add();
}
inline ::RoadPB::Point* Cylinder::add_points() {
  // @@protoc_insertion_point(field_add:RoadPB.Cylinder.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::Point >&
Cylinder::points() const {
  // @@protoc_insertion_point(field_list:RoadPB.Cylinder.points)
  return points_;
}

// optional float radius = 2;
inline bool Cylinder::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Cylinder::has_radius() const {
  return _internal_has_radius();
}
inline void Cylinder::clear_radius() {
  radius_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Cylinder::_internal_radius() const {
  return radius_;
}
inline float Cylinder::radius() const {
  // @@protoc_insertion_point(field_get:RoadPB.Cylinder.radius)
  return _internal_radius();
}
inline void Cylinder::_internal_set_radius(float value) {
  _has_bits_[0] |= 0x00000001u;
  radius_ = value;
}
inline void Cylinder::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:RoadPB.Cylinder.radius)
}

// -------------------------------------------------------------------

// BoundingBox

// optional .RoadPB.Point min_pt = 1;
inline bool BoundingBox::_internal_has_min_pt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || min_pt_ != nullptr);
  return value;
}
inline bool BoundingBox::has_min_pt() const {
  return _internal_has_min_pt();
}
inline void BoundingBox::clear_min_pt() {
  if (min_pt_ != nullptr) min_pt_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::RoadPB::Point& BoundingBox::_internal_min_pt() const {
  const ::RoadPB::Point* p = min_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Point*>(
      &::RoadPB::_Point_default_instance_);
}
inline const ::RoadPB::Point& BoundingBox::min_pt() const {
  // @@protoc_insertion_point(field_get:RoadPB.BoundingBox.min_pt)
  return _internal_min_pt();
}
inline void BoundingBox::unsafe_arena_set_allocated_min_pt(
    ::RoadPB::Point* min_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_pt_);
  }
  min_pt_ = min_pt;
  if (min_pt) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.BoundingBox.min_pt)
}
inline ::RoadPB::Point* BoundingBox::release_min_pt() {
  auto temp = unsafe_arena_release_min_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Point* BoundingBox::unsafe_arena_release_min_pt() {
  // @@protoc_insertion_point(field_release:RoadPB.BoundingBox.min_pt)
  _has_bits_[0] &= ~0x00000001u;
  ::RoadPB::Point* temp = min_pt_;
  min_pt_ = nullptr;
  return temp;
}
inline ::RoadPB::Point* BoundingBox::_internal_mutable_min_pt() {
  _has_bits_[0] |= 0x00000001u;
  if (min_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Point>(GetArena());
    min_pt_ = p;
  }
  return min_pt_;
}
inline ::RoadPB::Point* BoundingBox::mutable_min_pt() {
  // @@protoc_insertion_point(field_mutable:RoadPB.BoundingBox.min_pt)
  return _internal_mutable_min_pt();
}
inline void BoundingBox::set_allocated_min_pt(::RoadPB::Point* min_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete min_pt_;
  }
  if (min_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(min_pt);
    if (message_arena != submessage_arena) {
      min_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_pt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  min_pt_ = min_pt;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.BoundingBox.min_pt)
}

// optional .RoadPB.Point max_pt = 2;
inline bool BoundingBox::_internal_has_max_pt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || max_pt_ != nullptr);
  return value;
}
inline bool BoundingBox::has_max_pt() const {
  return _internal_has_max_pt();
}
inline void BoundingBox::clear_max_pt() {
  if (max_pt_ != nullptr) max_pt_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::RoadPB::Point& BoundingBox::_internal_max_pt() const {
  const ::RoadPB::Point* p = max_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Point*>(
      &::RoadPB::_Point_default_instance_);
}
inline const ::RoadPB::Point& BoundingBox::max_pt() const {
  // @@protoc_insertion_point(field_get:RoadPB.BoundingBox.max_pt)
  return _internal_max_pt();
}
inline void BoundingBox::unsafe_arena_set_allocated_max_pt(
    ::RoadPB::Point* max_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_pt_);
  }
  max_pt_ = max_pt;
  if (max_pt) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.BoundingBox.max_pt)
}
inline ::RoadPB::Point* BoundingBox::release_max_pt() {
  auto temp = unsafe_arena_release_max_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Point* BoundingBox::unsafe_arena_release_max_pt() {
  // @@protoc_insertion_point(field_release:RoadPB.BoundingBox.max_pt)
  _has_bits_[0] &= ~0x00000002u;
  ::RoadPB::Point* temp = max_pt_;
  max_pt_ = nullptr;
  return temp;
}
inline ::RoadPB::Point* BoundingBox::_internal_mutable_max_pt() {
  _has_bits_[0] |= 0x00000002u;
  if (max_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Point>(GetArena());
    max_pt_ = p;
  }
  return max_pt_;
}
inline ::RoadPB::Point* BoundingBox::mutable_max_pt() {
  // @@protoc_insertion_point(field_mutable:RoadPB.BoundingBox.max_pt)
  return _internal_mutable_max_pt();
}
inline void BoundingBox::set_allocated_max_pt(::RoadPB::Point* max_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete max_pt_;
  }
  if (max_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(max_pt);
    if (message_arena != submessage_arena) {
      max_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_pt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  max_pt_ = max_pt;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.BoundingBox.max_pt)
}

// -------------------------------------------------------------------

// AttributeValue

// optional int32 VRU_VAL = 1;
inline bool AttributeValue::_internal_has_vru_val() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AttributeValue::has_vru_val() const {
  return _internal_has_vru_val();
}
inline void AttributeValue::clear_vru_val() {
  vru_val_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_vru_val() const {
  return vru_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::vru_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.VRU_VAL)
  return _internal_vru_val();
}
inline void AttributeValue::_internal_set_vru_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  vru_val_ = value;
}
inline void AttributeValue::set_vru_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vru_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.VRU_VAL)
}

// optional int32 OPPO_VAL = 2;
inline bool AttributeValue::_internal_has_oppo_val() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AttributeValue::has_oppo_val() const {
  return _internal_has_oppo_val();
}
inline void AttributeValue::clear_oppo_val() {
  oppo_val_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_oppo_val() const {
  return oppo_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::oppo_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.OPPO_VAL)
  return _internal_oppo_val();
}
inline void AttributeValue::_internal_set_oppo_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  oppo_val_ = value;
}
inline void AttributeValue::set_oppo_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oppo_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.OPPO_VAL)
}

// optional int32 MULTI_DIGITIZED_VAL = 3;
inline bool AttributeValue::_internal_has_multi_digitized_val() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AttributeValue::has_multi_digitized_val() const {
  return _internal_has_multi_digitized_val();
}
inline void AttributeValue::clear_multi_digitized_val() {
  multi_digitized_val_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_multi_digitized_val() const {
  return multi_digitized_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::multi_digitized_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.MULTI_DIGITIZED_VAL)
  return _internal_multi_digitized_val();
}
inline void AttributeValue::_internal_set_multi_digitized_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  multi_digitized_val_ = value;
}
inline void AttributeValue::set_multi_digitized_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multi_digitized_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.MULTI_DIGITIZED_VAL)
}

// optional int32 VARI_SPEED_LIMIT_VAL = 4;
inline bool AttributeValue::_internal_has_vari_speed_limit_val() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AttributeValue::has_vari_speed_limit_val() const {
  return _internal_has_vari_speed_limit_val();
}
inline void AttributeValue::clear_vari_speed_limit_val() {
  vari_speed_limit_val_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_vari_speed_limit_val() const {
  return vari_speed_limit_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::vari_speed_limit_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.VARI_SPEED_LIMIT_VAL)
  return _internal_vari_speed_limit_val();
}
inline void AttributeValue::_internal_set_vari_speed_limit_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  vari_speed_limit_val_ = value;
}
inline void AttributeValue::set_vari_speed_limit_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vari_speed_limit_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.VARI_SPEED_LIMIT_VAL)
}

// optional int32 OVERHEAD_OBSTRUCT_VAL = 5;
inline bool AttributeValue::_internal_has_overhead_obstruct_val() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AttributeValue::has_overhead_obstruct_val() const {
  return _internal_has_overhead_obstruct_val();
}
inline void AttributeValue::clear_overhead_obstruct_val() {
  overhead_obstruct_val_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_overhead_obstruct_val() const {
  return overhead_obstruct_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::overhead_obstruct_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.OVERHEAD_OBSTRUCT_VAL)
  return _internal_overhead_obstruct_val();
}
inline void AttributeValue::_internal_set_overhead_obstruct_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  overhead_obstruct_val_ = value;
}
inline void AttributeValue::set_overhead_obstruct_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_overhead_obstruct_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.OVERHEAD_OBSTRUCT_VAL)
}

// optional int32 INFRA_SEP_L_VAL = 6;
inline bool AttributeValue::_internal_has_infra_sep_l_val() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AttributeValue::has_infra_sep_l_val() const {
  return _internal_has_infra_sep_l_val();
}
inline void AttributeValue::clear_infra_sep_l_val() {
  infra_sep_l_val_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_infra_sep_l_val() const {
  return infra_sep_l_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::infra_sep_l_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.INFRA_SEP_L_VAL)
  return _internal_infra_sep_l_val();
}
inline void AttributeValue::_internal_set_infra_sep_l_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  infra_sep_l_val_ = value;
}
inline void AttributeValue::set_infra_sep_l_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_infra_sep_l_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.INFRA_SEP_L_VAL)
}

// optional int32 INFRA_SEP_R_VAL = 7;
inline bool AttributeValue::_internal_has_infra_sep_r_val() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AttributeValue::has_infra_sep_r_val() const {
  return _internal_has_infra_sep_r_val();
}
inline void AttributeValue::clear_infra_sep_r_val() {
  infra_sep_r_val_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_infra_sep_r_val() const {
  return infra_sep_r_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::infra_sep_r_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.INFRA_SEP_R_VAL)
  return _internal_infra_sep_r_val();
}
inline void AttributeValue::_internal_set_infra_sep_r_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  infra_sep_r_val_ = value;
}
inline void AttributeValue::set_infra_sep_r_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_infra_sep_r_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.INFRA_SEP_R_VAL)
}

// optional int32 MEDIAN_LEFT_VAL = 8;
inline bool AttributeValue::_internal_has_median_left_val() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AttributeValue::has_median_left_val() const {
  return _internal_has_median_left_val();
}
inline void AttributeValue::clear_median_left_val() {
  median_left_val_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_median_left_val() const {
  return median_left_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::median_left_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.MEDIAN_LEFT_VAL)
  return _internal_median_left_val();
}
inline void AttributeValue::_internal_set_median_left_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  median_left_val_ = value;
}
inline void AttributeValue::set_median_left_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_median_left_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.MEDIAN_LEFT_VAL)
}

// optional double MEDIAN_WIDTH_L_VAL = 9;
inline bool AttributeValue::_internal_has_median_width_l_val() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AttributeValue::has_median_width_l_val() const {
  return _internal_has_median_width_l_val();
}
inline void AttributeValue::clear_median_width_l_val() {
  median_width_l_val_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double AttributeValue::_internal_median_width_l_val() const {
  return median_width_l_val_;
}
inline double AttributeValue::median_width_l_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.MEDIAN_WIDTH_L_VAL)
  return _internal_median_width_l_val();
}
inline void AttributeValue::_internal_set_median_width_l_val(double value) {
  _has_bits_[0] |= 0x00000100u;
  median_width_l_val_ = value;
}
inline void AttributeValue::set_median_width_l_val(double value) {
  _internal_set_median_width_l_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.MEDIAN_WIDTH_L_VAL)
}

// optional int32 MEDIAN_RIGHT_VAL = 10;
inline bool AttributeValue::_internal_has_median_right_val() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AttributeValue::has_median_right_val() const {
  return _internal_has_median_right_val();
}
inline void AttributeValue::clear_median_right_val() {
  median_right_val_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_median_right_val() const {
  return median_right_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::median_right_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.MEDIAN_RIGHT_VAL)
  return _internal_median_right_val();
}
inline void AttributeValue::_internal_set_median_right_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  median_right_val_ = value;
}
inline void AttributeValue::set_median_right_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_median_right_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.MEDIAN_RIGHT_VAL)
}

// optional double MEDIAN_WIDTH_R_VAL = 11;
inline bool AttributeValue::_internal_has_median_width_r_val() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AttributeValue::has_median_width_r_val() const {
  return _internal_has_median_width_r_val();
}
inline void AttributeValue::clear_median_width_r_val() {
  median_width_r_val_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double AttributeValue::_internal_median_width_r_val() const {
  return median_width_r_val_;
}
inline double AttributeValue::median_width_r_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.MEDIAN_WIDTH_R_VAL)
  return _internal_median_width_r_val();
}
inline void AttributeValue::_internal_set_median_width_r_val(double value) {
  _has_bits_[0] |= 0x00000200u;
  median_width_r_val_ = value;
}
inline void AttributeValue::set_median_width_r_val(double value) {
  _internal_set_median_width_r_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.MEDIAN_WIDTH_R_VAL)
}

// optional int32 MEDIAN_SURFACE_L_VAL = 12;
inline bool AttributeValue::_internal_has_median_surface_l_val() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AttributeValue::has_median_surface_l_val() const {
  return _internal_has_median_surface_l_val();
}
inline void AttributeValue::clear_median_surface_l_val() {
  median_surface_l_val_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_median_surface_l_val() const {
  return median_surface_l_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::median_surface_l_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.MEDIAN_SURFACE_L_VAL)
  return _internal_median_surface_l_val();
}
inline void AttributeValue::_internal_set_median_surface_l_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  median_surface_l_val_ = value;
}
inline void AttributeValue::set_median_surface_l_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_median_surface_l_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.MEDIAN_SURFACE_L_VAL)
}

// optional int32 MEDIAN_SURFACE_R_VAL = 13;
inline bool AttributeValue::_internal_has_median_surface_r_val() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AttributeValue::has_median_surface_r_val() const {
  return _internal_has_median_surface_r_val();
}
inline void AttributeValue::clear_median_surface_r_val() {
  median_surface_r_val_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_median_surface_r_val() const {
  return median_surface_r_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::median_surface_r_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.MEDIAN_SURFACE_R_VAL)
  return _internal_median_surface_r_val();
}
inline void AttributeValue::_internal_set_median_surface_r_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  median_surface_r_val_ = value;
}
inline void AttributeValue::set_median_surface_r_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_median_surface_r_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.MEDIAN_SURFACE_R_VAL)
}

// optional int32 LINK_TYPE_VAL = 14;
inline bool AttributeValue::_internal_has_link_type_val() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool AttributeValue::has_link_type_val() const {
  return _internal_has_link_type_val();
}
inline void AttributeValue::clear_link_type_val() {
  link_type_val_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_link_type_val() const {
  return link_type_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::link_type_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.LINK_TYPE_VAL)
  return _internal_link_type_val();
}
inline void AttributeValue::_internal_set_link_type_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  link_type_val_ = value;
}
inline void AttributeValue::set_link_type_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_link_type_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.LINK_TYPE_VAL)
}

// optional int32 LINK_KIND_VAL = 15;
inline bool AttributeValue::_internal_has_link_kind_val() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool AttributeValue::has_link_kind_val() const {
  return _internal_has_link_kind_val();
}
inline void AttributeValue::clear_link_kind_val() {
  link_kind_val_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_link_kind_val() const {
  return link_kind_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::link_kind_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.LINK_KIND_VAL)
  return _internal_link_kind_val();
}
inline void AttributeValue::_internal_set_link_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  link_kind_val_ = value;
}
inline void AttributeValue::set_link_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_link_kind_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.LINK_KIND_VAL)
}

// optional int32 PAVEMENT_VAL = 16;
inline bool AttributeValue::_internal_has_pavement_val() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool AttributeValue::has_pavement_val() const {
  return _internal_has_pavement_val();
}
inline void AttributeValue::clear_pavement_val() {
  pavement_val_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_pavement_val() const {
  return pavement_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::pavement_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.PAVEMENT_VAL)
  return _internal_pavement_val();
}
inline void AttributeValue::_internal_set_pavement_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  pavement_val_ = value;
}
inline void AttributeValue::set_pavement_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pavement_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.PAVEMENT_VAL)
}

// optional int32 LANE_TYPE_VAL = 17;
inline bool AttributeValue::_internal_has_lane_type_val() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool AttributeValue::has_lane_type_val() const {
  return _internal_has_lane_type_val();
}
inline void AttributeValue::clear_lane_type_val() {
  lane_type_val_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_lane_type_val() const {
  return lane_type_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::lane_type_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.LANE_TYPE_VAL)
  return _internal_lane_type_val();
}
inline void AttributeValue::_internal_set_lane_type_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  lane_type_val_ = value;
}
inline void AttributeValue::set_lane_type_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_type_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.LANE_TYPE_VAL)
}

// optional int32 LANE_KIND_VAL = 18;
inline bool AttributeValue::_internal_has_lane_kind_val() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool AttributeValue::has_lane_kind_val() const {
  return _internal_has_lane_kind_val();
}
inline void AttributeValue::clear_lane_kind_val() {
  lane_kind_val_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_lane_kind_val() const {
  return lane_kind_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::lane_kind_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.LANE_KIND_VAL)
  return _internal_lane_kind_val();
}
inline void AttributeValue::_internal_set_lane_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  lane_kind_val_ = value;
}
inline void AttributeValue::set_lane_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_kind_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.LANE_KIND_VAL)
}

// optional double LANE_WIDTH_VAL = 19;
inline bool AttributeValue::_internal_has_lane_width_val() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool AttributeValue::has_lane_width_val() const {
  return _internal_has_lane_width_val();
}
inline void AttributeValue::clear_lane_width_val() {
  lane_width_val_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double AttributeValue::_internal_lane_width_val() const {
  return lane_width_val_;
}
inline double AttributeValue::lane_width_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.LANE_WIDTH_VAL)
  return _internal_lane_width_val();
}
inline void AttributeValue::_internal_set_lane_width_val(double value) {
  _has_bits_[0] |= 0x00040000u;
  lane_width_val_ = value;
}
inline void AttributeValue::set_lane_width_val(double value) {
  _internal_set_lane_width_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.LANE_WIDTH_VAL)
}

// optional double LANE_HEIGHT_LIMIT_VAL = 20;
inline bool AttributeValue::_internal_has_lane_height_limit_val() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool AttributeValue::has_lane_height_limit_val() const {
  return _internal_has_lane_height_limit_val();
}
inline void AttributeValue::clear_lane_height_limit_val() {
  lane_height_limit_val_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double AttributeValue::_internal_lane_height_limit_val() const {
  return lane_height_limit_val_;
}
inline double AttributeValue::lane_height_limit_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.LANE_HEIGHT_LIMIT_VAL)
  return _internal_lane_height_limit_val();
}
inline void AttributeValue::_internal_set_lane_height_limit_val(double value) {
  _has_bits_[0] |= 0x00080000u;
  lane_height_limit_val_ = value;
}
inline void AttributeValue::set_lane_height_limit_val(double value) {
  _internal_set_lane_height_limit_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.LANE_HEIGHT_LIMIT_VAL)
}

// optional double LANE_WEIGHT_LIMIT_VAL = 21;
inline bool AttributeValue::_internal_has_lane_weight_limit_val() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool AttributeValue::has_lane_weight_limit_val() const {
  return _internal_has_lane_weight_limit_val();
}
inline void AttributeValue::clear_lane_weight_limit_val() {
  lane_weight_limit_val_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double AttributeValue::_internal_lane_weight_limit_val() const {
  return lane_weight_limit_val_;
}
inline double AttributeValue::lane_weight_limit_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.LANE_WEIGHT_LIMIT_VAL)
  return _internal_lane_weight_limit_val();
}
inline void AttributeValue::_internal_set_lane_weight_limit_val(double value) {
  _has_bits_[0] |= 0x00100000u;
  lane_weight_limit_val_ = value;
}
inline void AttributeValue::set_lane_weight_limit_val(double value) {
  _internal_set_lane_weight_limit_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.LANE_WEIGHT_LIMIT_VAL)
}

// optional double LANE_WIDTH_LIMIT_VAL = 22;
inline bool AttributeValue::_internal_has_lane_width_limit_val() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool AttributeValue::has_lane_width_limit_val() const {
  return _internal_has_lane_width_limit_val();
}
inline void AttributeValue::clear_lane_width_limit_val() {
  lane_width_limit_val_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double AttributeValue::_internal_lane_width_limit_val() const {
  return lane_width_limit_val_;
}
inline double AttributeValue::lane_width_limit_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.LANE_WIDTH_LIMIT_VAL)
  return _internal_lane_width_limit_val();
}
inline void AttributeValue::_internal_set_lane_width_limit_val(double value) {
  _has_bits_[0] |= 0x00200000u;
  lane_width_limit_val_ = value;
}
inline void AttributeValue::set_lane_width_limit_val(double value) {
  _internal_set_lane_width_limit_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.LANE_WIDTH_LIMIT_VAL)
}

// optional int32 LANE_BOUND_KIND_VAL = 25;
inline bool AttributeValue::_internal_has_lane_bound_kind_val() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool AttributeValue::has_lane_bound_kind_val() const {
  return _internal_has_lane_bound_kind_val();
}
inline void AttributeValue::clear_lane_bound_kind_val() {
  lane_bound_kind_val_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_lane_bound_kind_val() const {
  return lane_bound_kind_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::lane_bound_kind_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.LANE_BOUND_KIND_VAL)
  return _internal_lane_bound_kind_val();
}
inline void AttributeValue::_internal_set_lane_bound_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  lane_bound_kind_val_ = value;
}
inline void AttributeValue::set_lane_bound_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_bound_kind_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.LANE_BOUND_KIND_VAL)
}

// optional int32 LANE_BOUND_COLOR_VAL = 26;
inline bool AttributeValue::_internal_has_lane_bound_color_val() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool AttributeValue::has_lane_bound_color_val() const {
  return _internal_has_lane_bound_color_val();
}
inline void AttributeValue::clear_lane_bound_color_val() {
  lane_bound_color_val_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_lane_bound_color_val() const {
  return lane_bound_color_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::lane_bound_color_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.LANE_BOUND_COLOR_VAL)
  return _internal_lane_bound_color_val();
}
inline void AttributeValue::_internal_set_lane_bound_color_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  lane_bound_color_val_ = value;
}
inline void AttributeValue::set_lane_bound_color_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_bound_color_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.LANE_BOUND_COLOR_VAL)
}

// optional int32 LANE_BOUND_MATERIAL_VAL = 27;
inline bool AttributeValue::_internal_has_lane_bound_material_val() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool AttributeValue::has_lane_bound_material_val() const {
  return _internal_has_lane_bound_material_val();
}
inline void AttributeValue::clear_lane_bound_material_val() {
  lane_bound_material_val_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_lane_bound_material_val() const {
  return lane_bound_material_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::lane_bound_material_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.LANE_BOUND_MATERIAL_VAL)
  return _internal_lane_bound_material_val();
}
inline void AttributeValue::_internal_set_lane_bound_material_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  lane_bound_material_val_ = value;
}
inline void AttributeValue::set_lane_bound_material_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_bound_material_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.LANE_BOUND_MATERIAL_VAL)
}

// optional int32 ROAD_BOUND_KIND_VAL = 30;
inline bool AttributeValue::_internal_has_road_bound_kind_val() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool AttributeValue::has_road_bound_kind_val() const {
  return _internal_has_road_bound_kind_val();
}
inline void AttributeValue::clear_road_bound_kind_val() {
  road_bound_kind_val_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::_internal_road_bound_kind_val() const {
  return road_bound_kind_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttributeValue::road_bound_kind_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.AttributeValue.ROAD_BOUND_KIND_VAL)
  return _internal_road_bound_kind_val();
}
inline void AttributeValue::_internal_set_road_bound_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  road_bound_kind_val_ = value;
}
inline void AttributeValue::set_road_bound_kind_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_road_bound_kind_val(value);
  // @@protoc_insertion_point(field_set:RoadPB.AttributeValue.ROAD_BOUND_KIND_VAL)
}

// -------------------------------------------------------------------

// RangeAttribute

// optional .RoadPB.Polyline geom = 1;
inline bool RangeAttribute::_internal_has_geom() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || geom_ != nullptr);
  return value;
}
inline bool RangeAttribute::has_geom() const {
  return _internal_has_geom();
}
inline void RangeAttribute::clear_geom() {
  if (geom_ != nullptr) geom_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::RoadPB::Polyline& RangeAttribute::_internal_geom() const {
  const ::RoadPB::Polyline* p = geom_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Polyline*>(
      &::RoadPB::_Polyline_default_instance_);
}
inline const ::RoadPB::Polyline& RangeAttribute::geom() const {
  // @@protoc_insertion_point(field_get:RoadPB.RangeAttribute.geom)
  return _internal_geom();
}
inline void RangeAttribute::unsafe_arena_set_allocated_geom(
    ::RoadPB::Polyline* geom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geom_);
  }
  geom_ = geom;
  if (geom) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.RangeAttribute.geom)
}
inline ::RoadPB::Polyline* RangeAttribute::release_geom() {
  auto temp = unsafe_arena_release_geom();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Polyline* RangeAttribute::unsafe_arena_release_geom() {
  // @@protoc_insertion_point(field_release:RoadPB.RangeAttribute.geom)
  _has_bits_[0] &= ~0x00000001u;
  ::RoadPB::Polyline* temp = geom_;
  geom_ = nullptr;
  return temp;
}
inline ::RoadPB::Polyline* RangeAttribute::_internal_mutable_geom() {
  _has_bits_[0] |= 0x00000001u;
  if (geom_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Polyline>(GetArena());
    geom_ = p;
  }
  return geom_;
}
inline ::RoadPB::Polyline* RangeAttribute::mutable_geom() {
  // @@protoc_insertion_point(field_mutable:RoadPB.RangeAttribute.geom)
  return _internal_mutable_geom();
}
inline void RangeAttribute::set_allocated_geom(::RoadPB::Polyline* geom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete geom_;
  }
  if (geom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geom);
    if (message_arena != submessage_arena) {
      geom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geom, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  geom_ = geom;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.RangeAttribute.geom)
}

// optional .RoadPB.AttributeType type = 2;
inline bool RangeAttribute::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RangeAttribute::has_type() const {
  return _internal_has_type();
}
inline void RangeAttribute::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::RoadPB::AttributeType RangeAttribute::_internal_type() const {
  return static_cast< ::RoadPB::AttributeType >(type_);
}
inline ::RoadPB::AttributeType RangeAttribute::type() const {
  // @@protoc_insertion_point(field_get:RoadPB.RangeAttribute.type)
  return _internal_type();
}
inline void RangeAttribute::_internal_set_type(::RoadPB::AttributeType value) {
  assert(::RoadPB::AttributeType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void RangeAttribute::set_type(::RoadPB::AttributeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RoadPB.RangeAttribute.type)
}

// optional .RoadPB.AttributeValue start_val = 3;
inline bool RangeAttribute::_internal_has_start_val() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || start_val_ != nullptr);
  return value;
}
inline bool RangeAttribute::has_start_val() const {
  return _internal_has_start_val();
}
inline void RangeAttribute::clear_start_val() {
  if (start_val_ != nullptr) start_val_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::RoadPB::AttributeValue& RangeAttribute::_internal_start_val() const {
  const ::RoadPB::AttributeValue* p = start_val_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::AttributeValue*>(
      &::RoadPB::_AttributeValue_default_instance_);
}
inline const ::RoadPB::AttributeValue& RangeAttribute::start_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.RangeAttribute.start_val)
  return _internal_start_val();
}
inline void RangeAttribute::unsafe_arena_set_allocated_start_val(
    ::RoadPB::AttributeValue* start_val) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_val_);
  }
  start_val_ = start_val;
  if (start_val) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.RangeAttribute.start_val)
}
inline ::RoadPB::AttributeValue* RangeAttribute::release_start_val() {
  auto temp = unsafe_arena_release_start_val();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::AttributeValue* RangeAttribute::unsafe_arena_release_start_val() {
  // @@protoc_insertion_point(field_release:RoadPB.RangeAttribute.start_val)
  _has_bits_[0] &= ~0x00000002u;
  ::RoadPB::AttributeValue* temp = start_val_;
  start_val_ = nullptr;
  return temp;
}
inline ::RoadPB::AttributeValue* RangeAttribute::_internal_mutable_start_val() {
  _has_bits_[0] |= 0x00000002u;
  if (start_val_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::AttributeValue>(GetArena());
    start_val_ = p;
  }
  return start_val_;
}
inline ::RoadPB::AttributeValue* RangeAttribute::mutable_start_val() {
  // @@protoc_insertion_point(field_mutable:RoadPB.RangeAttribute.start_val)
  return _internal_mutable_start_val();
}
inline void RangeAttribute::set_allocated_start_val(::RoadPB::AttributeValue* start_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_val_;
  }
  if (start_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_val);
    if (message_arena != submessage_arena) {
      start_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_val, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_val_ = start_val;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.RangeAttribute.start_val)
}

// optional .RoadPB.AttributeValue end_val = 4;
inline bool RangeAttribute::_internal_has_end_val() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || end_val_ != nullptr);
  return value;
}
inline bool RangeAttribute::has_end_val() const {
  return _internal_has_end_val();
}
inline void RangeAttribute::clear_end_val() {
  if (end_val_ != nullptr) end_val_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::RoadPB::AttributeValue& RangeAttribute::_internal_end_val() const {
  const ::RoadPB::AttributeValue* p = end_val_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::AttributeValue*>(
      &::RoadPB::_AttributeValue_default_instance_);
}
inline const ::RoadPB::AttributeValue& RangeAttribute::end_val() const {
  // @@protoc_insertion_point(field_get:RoadPB.RangeAttribute.end_val)
  return _internal_end_val();
}
inline void RangeAttribute::unsafe_arena_set_allocated_end_val(
    ::RoadPB::AttributeValue* end_val) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_val_);
  }
  end_val_ = end_val;
  if (end_val) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.RangeAttribute.end_val)
}
inline ::RoadPB::AttributeValue* RangeAttribute::release_end_val() {
  auto temp = unsafe_arena_release_end_val();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::AttributeValue* RangeAttribute::unsafe_arena_release_end_val() {
  // @@protoc_insertion_point(field_release:RoadPB.RangeAttribute.end_val)
  _has_bits_[0] &= ~0x00000004u;
  ::RoadPB::AttributeValue* temp = end_val_;
  end_val_ = nullptr;
  return temp;
}
inline ::RoadPB::AttributeValue* RangeAttribute::_internal_mutable_end_val() {
  _has_bits_[0] |= 0x00000004u;
  if (end_val_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::AttributeValue>(GetArena());
    end_val_ = p;
  }
  return end_val_;
}
inline ::RoadPB::AttributeValue* RangeAttribute::mutable_end_val() {
  // @@protoc_insertion_point(field_mutable:RoadPB.RangeAttribute.end_val)
  return _internal_mutable_end_val();
}
inline void RangeAttribute::set_allocated_end_val(::RoadPB::AttributeValue* end_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_val_;
  }
  if (end_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end_val);
    if (message_arena != submessage_arena) {
      end_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_val, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  end_val_ = end_val;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.RangeAttribute.end_val)
}

// optional double attribute_len = 5;
inline bool RangeAttribute::_internal_has_attribute_len() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RangeAttribute::has_attribute_len() const {
  return _internal_has_attribute_len();
}
inline void RangeAttribute::clear_attribute_len() {
  attribute_len_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double RangeAttribute::_internal_attribute_len() const {
  return attribute_len_;
}
inline double RangeAttribute::attribute_len() const {
  // @@protoc_insertion_point(field_get:RoadPB.RangeAttribute.attribute_len)
  return _internal_attribute_len();
}
inline void RangeAttribute::_internal_set_attribute_len(double value) {
  _has_bits_[0] |= 0x00000008u;
  attribute_len_ = value;
}
inline void RangeAttribute::set_attribute_len(double value) {
  _internal_set_attribute_len(value);
  // @@protoc_insertion_point(field_set:RoadPB.RangeAttribute.attribute_len)
}

// -------------------------------------------------------------------

// FixedSpeedLimit

// optional .RoadPB.Polyline geom = 1;
inline bool FixedSpeedLimit::_internal_has_geom() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || geom_ != nullptr);
  return value;
}
inline bool FixedSpeedLimit::has_geom() const {
  return _internal_has_geom();
}
inline void FixedSpeedLimit::clear_geom() {
  if (geom_ != nullptr) geom_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::RoadPB::Polyline& FixedSpeedLimit::_internal_geom() const {
  const ::RoadPB::Polyline* p = geom_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Polyline*>(
      &::RoadPB::_Polyline_default_instance_);
}
inline const ::RoadPB::Polyline& FixedSpeedLimit::geom() const {
  // @@protoc_insertion_point(field_get:RoadPB.FixedSpeedLimit.geom)
  return _internal_geom();
}
inline void FixedSpeedLimit::unsafe_arena_set_allocated_geom(
    ::RoadPB::Polyline* geom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geom_);
  }
  geom_ = geom;
  if (geom) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.FixedSpeedLimit.geom)
}
inline ::RoadPB::Polyline* FixedSpeedLimit::release_geom() {
  auto temp = unsafe_arena_release_geom();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Polyline* FixedSpeedLimit::unsafe_arena_release_geom() {
  // @@protoc_insertion_point(field_release:RoadPB.FixedSpeedLimit.geom)
  _has_bits_[0] &= ~0x00000004u;
  ::RoadPB::Polyline* temp = geom_;
  geom_ = nullptr;
  return temp;
}
inline ::RoadPB::Polyline* FixedSpeedLimit::_internal_mutable_geom() {
  _has_bits_[0] |= 0x00000004u;
  if (geom_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Polyline>(GetArena());
    geom_ = p;
  }
  return geom_;
}
inline ::RoadPB::Polyline* FixedSpeedLimit::mutable_geom() {
  // @@protoc_insertion_point(field_mutable:RoadPB.FixedSpeedLimit.geom)
  return _internal_mutable_geom();
}
inline void FixedSpeedLimit::set_allocated_geom(::RoadPB::Polyline* geom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete geom_;
  }
  if (geom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geom);
    if (message_arena != submessage_arena) {
      geom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geom, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  geom_ = geom;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.FixedSpeedLimit.geom)
}

// optional int32 direction = 2;
inline bool FixedSpeedLimit::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FixedSpeedLimit::has_direction() const {
  return _internal_has_direction();
}
inline void FixedSpeedLimit::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedSpeedLimit::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedSpeedLimit::direction() const {
  // @@protoc_insertion_point(field_get:RoadPB.FixedSpeedLimit.direction)
  return _internal_direction();
}
inline void FixedSpeedLimit::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  direction_ = value;
}
inline void FixedSpeedLimit::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:RoadPB.FixedSpeedLimit.direction)
}

// optional float max_speed = 3;
inline bool FixedSpeedLimit::_internal_has_max_speed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FixedSpeedLimit::has_max_speed() const {
  return _internal_has_max_speed();
}
inline void FixedSpeedLimit::clear_max_speed() {
  max_speed_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float FixedSpeedLimit::_internal_max_speed() const {
  return max_speed_;
}
inline float FixedSpeedLimit::max_speed() const {
  // @@protoc_insertion_point(field_get:RoadPB.FixedSpeedLimit.max_speed)
  return _internal_max_speed();
}
inline void FixedSpeedLimit::_internal_set_max_speed(float value) {
  _has_bits_[0] |= 0x00000010u;
  max_speed_ = value;
}
inline void FixedSpeedLimit::set_max_speed(float value) {
  _internal_set_max_speed(value);
  // @@protoc_insertion_point(field_set:RoadPB.FixedSpeedLimit.max_speed)
}

// optional int32 max_source = 4;
inline bool FixedSpeedLimit::_internal_has_max_source() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FixedSpeedLimit::has_max_source() const {
  return _internal_has_max_source();
}
inline void FixedSpeedLimit::clear_max_source() {
  max_source_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedSpeedLimit::_internal_max_source() const {
  return max_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedSpeedLimit::max_source() const {
  // @@protoc_insertion_point(field_get:RoadPB.FixedSpeedLimit.max_source)
  return _internal_max_source();
}
inline void FixedSpeedLimit::_internal_set_max_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_source_ = value;
}
inline void FixedSpeedLimit::set_max_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_source(value);
  // @@protoc_insertion_point(field_set:RoadPB.FixedSpeedLimit.max_source)
}

// optional float min_speed = 5;
inline bool FixedSpeedLimit::_internal_has_min_speed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FixedSpeedLimit::has_min_speed() const {
  return _internal_has_min_speed();
}
inline void FixedSpeedLimit::clear_min_speed() {
  min_speed_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float FixedSpeedLimit::_internal_min_speed() const {
  return min_speed_;
}
inline float FixedSpeedLimit::min_speed() const {
  // @@protoc_insertion_point(field_get:RoadPB.FixedSpeedLimit.min_speed)
  return _internal_min_speed();
}
inline void FixedSpeedLimit::_internal_set_min_speed(float value) {
  _has_bits_[0] |= 0x00000040u;
  min_speed_ = value;
}
inline void FixedSpeedLimit::set_min_speed(float value) {
  _internal_set_min_speed(value);
  // @@protoc_insertion_point(field_set:RoadPB.FixedSpeedLimit.min_speed)
}

// optional int32 min_source = 6;
inline bool FixedSpeedLimit::_internal_has_min_source() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FixedSpeedLimit::has_min_source() const {
  return _internal_has_min_source();
}
inline void FixedSpeedLimit::clear_min_source() {
  min_source_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedSpeedLimit::_internal_min_source() const {
  return min_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedSpeedLimit::min_source() const {
  // @@protoc_insertion_point(field_get:RoadPB.FixedSpeedLimit.min_source)
  return _internal_min_source();
}
inline void FixedSpeedLimit::_internal_set_min_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  min_source_ = value;
}
inline void FixedSpeedLimit::set_min_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_source(value);
  // @@protoc_insertion_point(field_set:RoadPB.FixedSpeedLimit.min_source)
}

// optional string valid_period = 7;
inline bool FixedSpeedLimit::_internal_has_valid_period() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FixedSpeedLimit::has_valid_period() const {
  return _internal_has_valid_period();
}
inline void FixedSpeedLimit::clear_valid_period() {
  valid_period_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FixedSpeedLimit::valid_period() const {
  // @@protoc_insertion_point(field_get:RoadPB.FixedSpeedLimit.valid_period)
  return _internal_valid_period();
}
inline void FixedSpeedLimit::set_valid_period(const std::string& value) {
  _internal_set_valid_period(value);
  // @@protoc_insertion_point(field_set:RoadPB.FixedSpeedLimit.valid_period)
}
inline std::string* FixedSpeedLimit::mutable_valid_period() {
  // @@protoc_insertion_point(field_mutable:RoadPB.FixedSpeedLimit.valid_period)
  return _internal_mutable_valid_period();
}
inline const std::string& FixedSpeedLimit::_internal_valid_period() const {
  return valid_period_.Get();
}
inline void FixedSpeedLimit::_internal_set_valid_period(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  valid_period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FixedSpeedLimit::set_valid_period(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  valid_period_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoadPB.FixedSpeedLimit.valid_period)
}
inline void FixedSpeedLimit::set_valid_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  valid_period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoadPB.FixedSpeedLimit.valid_period)
}
inline void FixedSpeedLimit::set_valid_period(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  valid_period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoadPB.FixedSpeedLimit.valid_period)
}
inline std::string* FixedSpeedLimit::_internal_mutable_valid_period() {
  _has_bits_[0] |= 0x00000001u;
  return valid_period_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FixedSpeedLimit::release_valid_period() {
  // @@protoc_insertion_point(field_release:RoadPB.FixedSpeedLimit.valid_period)
  if (!_internal_has_valid_period()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return valid_period_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FixedSpeedLimit::set_allocated_valid_period(std::string* valid_period) {
  if (valid_period != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  valid_period_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), valid_period,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.FixedSpeedLimit.valid_period)
}
inline std::string* FixedSpeedLimit::unsafe_arena_release_valid_period() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoadPB.FixedSpeedLimit.valid_period)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return valid_period_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FixedSpeedLimit::unsafe_arena_set_allocated_valid_period(
    std::string* valid_period) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (valid_period != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  valid_period_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      valid_period, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.FixedSpeedLimit.valid_period)
}

// optional string vehicle_type = 8;
inline bool FixedSpeedLimit::_internal_has_vehicle_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FixedSpeedLimit::has_vehicle_type() const {
  return _internal_has_vehicle_type();
}
inline void FixedSpeedLimit::clear_vehicle_type() {
  vehicle_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FixedSpeedLimit::vehicle_type() const {
  // @@protoc_insertion_point(field_get:RoadPB.FixedSpeedLimit.vehicle_type)
  return _internal_vehicle_type();
}
inline void FixedSpeedLimit::set_vehicle_type(const std::string& value) {
  _internal_set_vehicle_type(value);
  // @@protoc_insertion_point(field_set:RoadPB.FixedSpeedLimit.vehicle_type)
}
inline std::string* FixedSpeedLimit::mutable_vehicle_type() {
  // @@protoc_insertion_point(field_mutable:RoadPB.FixedSpeedLimit.vehicle_type)
  return _internal_mutable_vehicle_type();
}
inline const std::string& FixedSpeedLimit::_internal_vehicle_type() const {
  return vehicle_type_.Get();
}
inline void FixedSpeedLimit::_internal_set_vehicle_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  vehicle_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FixedSpeedLimit::set_vehicle_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  vehicle_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoadPB.FixedSpeedLimit.vehicle_type)
}
inline void FixedSpeedLimit::set_vehicle_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  vehicle_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoadPB.FixedSpeedLimit.vehicle_type)
}
inline void FixedSpeedLimit::set_vehicle_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  vehicle_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoadPB.FixedSpeedLimit.vehicle_type)
}
inline std::string* FixedSpeedLimit::_internal_mutable_vehicle_type() {
  _has_bits_[0] |= 0x00000002u;
  return vehicle_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FixedSpeedLimit::release_vehicle_type() {
  // @@protoc_insertion_point(field_release:RoadPB.FixedSpeedLimit.vehicle_type)
  if (!_internal_has_vehicle_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return vehicle_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FixedSpeedLimit::set_allocated_vehicle_type(std::string* vehicle_type) {
  if (vehicle_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vehicle_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.FixedSpeedLimit.vehicle_type)
}
inline std::string* FixedSpeedLimit::unsafe_arena_release_vehicle_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoadPB.FixedSpeedLimit.vehicle_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return vehicle_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FixedSpeedLimit::unsafe_arena_set_allocated_vehicle_type(
    std::string* vehicle_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vehicle_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vehicle_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vehicle_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.FixedSpeedLimit.vehicle_type)
}

// -------------------------------------------------------------------

// CondSpeedLimit

// optional .RoadPB.Polyline geom = 1;
inline bool CondSpeedLimit::_internal_has_geom() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || geom_ != nullptr);
  return value;
}
inline bool CondSpeedLimit::has_geom() const {
  return _internal_has_geom();
}
inline void CondSpeedLimit::clear_geom() {
  if (geom_ != nullptr) geom_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::RoadPB::Polyline& CondSpeedLimit::_internal_geom() const {
  const ::RoadPB::Polyline* p = geom_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::Polyline*>(
      &::RoadPB::_Polyline_default_instance_);
}
inline const ::RoadPB::Polyline& CondSpeedLimit::geom() const {
  // @@protoc_insertion_point(field_get:RoadPB.CondSpeedLimit.geom)
  return _internal_geom();
}
inline void CondSpeedLimit::unsafe_arena_set_allocated_geom(
    ::RoadPB::Polyline* geom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geom_);
  }
  geom_ = geom;
  if (geom) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.CondSpeedLimit.geom)
}
inline ::RoadPB::Polyline* CondSpeedLimit::release_geom() {
  auto temp = unsafe_arena_release_geom();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::Polyline* CondSpeedLimit::unsafe_arena_release_geom() {
  // @@protoc_insertion_point(field_release:RoadPB.CondSpeedLimit.geom)
  _has_bits_[0] &= ~0x00000004u;
  ::RoadPB::Polyline* temp = geom_;
  geom_ = nullptr;
  return temp;
}
inline ::RoadPB::Polyline* CondSpeedLimit::_internal_mutable_geom() {
  _has_bits_[0] |= 0x00000004u;
  if (geom_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Polyline>(GetArena());
    geom_ = p;
  }
  return geom_;
}
inline ::RoadPB::Polyline* CondSpeedLimit::mutable_geom() {
  // @@protoc_insertion_point(field_mutable:RoadPB.CondSpeedLimit.geom)
  return _internal_mutable_geom();
}
inline void CondSpeedLimit::set_allocated_geom(::RoadPB::Polyline* geom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete geom_;
  }
  if (geom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geom);
    if (message_arena != submessage_arena) {
      geom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geom, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  geom_ = geom;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.CondSpeedLimit.geom)
}

// optional int32 direction = 2;
inline bool CondSpeedLimit::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CondSpeedLimit::has_direction() const {
  return _internal_has_direction();
}
inline void CondSpeedLimit::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CondSpeedLimit::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CondSpeedLimit::direction() const {
  // @@protoc_insertion_point(field_get:RoadPB.CondSpeedLimit.direction)
  return _internal_direction();
}
inline void CondSpeedLimit::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  direction_ = value;
}
inline void CondSpeedLimit::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:RoadPB.CondSpeedLimit.direction)
}

// optional int32 cond_type = 3;
inline bool CondSpeedLimit::_internal_has_cond_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CondSpeedLimit::has_cond_type() const {
  return _internal_has_cond_type();
}
inline void CondSpeedLimit::clear_cond_type() {
  cond_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CondSpeedLimit::_internal_cond_type() const {
  return cond_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CondSpeedLimit::cond_type() const {
  // @@protoc_insertion_point(field_get:RoadPB.CondSpeedLimit.cond_type)
  return _internal_cond_type();
}
inline void CondSpeedLimit::_internal_set_cond_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  cond_type_ = value;
}
inline void CondSpeedLimit::set_cond_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cond_type(value);
  // @@protoc_insertion_point(field_set:RoadPB.CondSpeedLimit.cond_type)
}

// optional int32 cond_speed_limit = 4;
inline bool CondSpeedLimit::_internal_has_cond_speed_limit() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CondSpeedLimit::has_cond_speed_limit() const {
  return _internal_has_cond_speed_limit();
}
inline void CondSpeedLimit::clear_cond_speed_limit() {
  cond_speed_limit_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CondSpeedLimit::_internal_cond_speed_limit() const {
  return cond_speed_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CondSpeedLimit::cond_speed_limit() const {
  // @@protoc_insertion_point(field_get:RoadPB.CondSpeedLimit.cond_speed_limit)
  return _internal_cond_speed_limit();
}
inline void CondSpeedLimit::_internal_set_cond_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  cond_speed_limit_ = value;
}
inline void CondSpeedLimit::set_cond_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cond_speed_limit(value);
  // @@protoc_insertion_point(field_set:RoadPB.CondSpeedLimit.cond_speed_limit)
}

// optional string valid_period = 5;
inline bool CondSpeedLimit::_internal_has_valid_period() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CondSpeedLimit::has_valid_period() const {
  return _internal_has_valid_period();
}
inline void CondSpeedLimit::clear_valid_period() {
  valid_period_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CondSpeedLimit::valid_period() const {
  // @@protoc_insertion_point(field_get:RoadPB.CondSpeedLimit.valid_period)
  return _internal_valid_period();
}
inline void CondSpeedLimit::set_valid_period(const std::string& value) {
  _internal_set_valid_period(value);
  // @@protoc_insertion_point(field_set:RoadPB.CondSpeedLimit.valid_period)
}
inline std::string* CondSpeedLimit::mutable_valid_period() {
  // @@protoc_insertion_point(field_mutable:RoadPB.CondSpeedLimit.valid_period)
  return _internal_mutable_valid_period();
}
inline const std::string& CondSpeedLimit::_internal_valid_period() const {
  return valid_period_.Get();
}
inline void CondSpeedLimit::_internal_set_valid_period(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  valid_period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CondSpeedLimit::set_valid_period(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  valid_period_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoadPB.CondSpeedLimit.valid_period)
}
inline void CondSpeedLimit::set_valid_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  valid_period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoadPB.CondSpeedLimit.valid_period)
}
inline void CondSpeedLimit::set_valid_period(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  valid_period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoadPB.CondSpeedLimit.valid_period)
}
inline std::string* CondSpeedLimit::_internal_mutable_valid_period() {
  _has_bits_[0] |= 0x00000001u;
  return valid_period_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CondSpeedLimit::release_valid_period() {
  // @@protoc_insertion_point(field_release:RoadPB.CondSpeedLimit.valid_period)
  if (!_internal_has_valid_period()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return valid_period_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CondSpeedLimit::set_allocated_valid_period(std::string* valid_period) {
  if (valid_period != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  valid_period_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), valid_period,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.CondSpeedLimit.valid_period)
}
inline std::string* CondSpeedLimit::unsafe_arena_release_valid_period() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoadPB.CondSpeedLimit.valid_period)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return valid_period_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CondSpeedLimit::unsafe_arena_set_allocated_valid_period(
    std::string* valid_period) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (valid_period != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  valid_period_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      valid_period, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.CondSpeedLimit.valid_period)
}

// optional string vehicle_type = 6;
inline bool CondSpeedLimit::_internal_has_vehicle_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CondSpeedLimit::has_vehicle_type() const {
  return _internal_has_vehicle_type();
}
inline void CondSpeedLimit::clear_vehicle_type() {
  vehicle_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CondSpeedLimit::vehicle_type() const {
  // @@protoc_insertion_point(field_get:RoadPB.CondSpeedLimit.vehicle_type)
  return _internal_vehicle_type();
}
inline void CondSpeedLimit::set_vehicle_type(const std::string& value) {
  _internal_set_vehicle_type(value);
  // @@protoc_insertion_point(field_set:RoadPB.CondSpeedLimit.vehicle_type)
}
inline std::string* CondSpeedLimit::mutable_vehicle_type() {
  // @@protoc_insertion_point(field_mutable:RoadPB.CondSpeedLimit.vehicle_type)
  return _internal_mutable_vehicle_type();
}
inline const std::string& CondSpeedLimit::_internal_vehicle_type() const {
  return vehicle_type_.Get();
}
inline void CondSpeedLimit::_internal_set_vehicle_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  vehicle_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CondSpeedLimit::set_vehicle_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  vehicle_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RoadPB.CondSpeedLimit.vehicle_type)
}
inline void CondSpeedLimit::set_vehicle_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  vehicle_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RoadPB.CondSpeedLimit.vehicle_type)
}
inline void CondSpeedLimit::set_vehicle_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  vehicle_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RoadPB.CondSpeedLimit.vehicle_type)
}
inline std::string* CondSpeedLimit::_internal_mutable_vehicle_type() {
  _has_bits_[0] |= 0x00000002u;
  return vehicle_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CondSpeedLimit::release_vehicle_type() {
  // @@protoc_insertion_point(field_release:RoadPB.CondSpeedLimit.vehicle_type)
  if (!_internal_has_vehicle_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return vehicle_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CondSpeedLimit::set_allocated_vehicle_type(std::string* vehicle_type) {
  if (vehicle_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vehicle_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.CondSpeedLimit.vehicle_type)
}
inline std::string* CondSpeedLimit::unsafe_arena_release_vehicle_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RoadPB.CondSpeedLimit.vehicle_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return vehicle_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CondSpeedLimit::unsafe_arena_set_allocated_vehicle_type(
    std::string* vehicle_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vehicle_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vehicle_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vehicle_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.CondSpeedLimit.vehicle_type)
}

// optional double attribute_len = 7;
inline bool CondSpeedLimit::_internal_has_attribute_len() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CondSpeedLimit::has_attribute_len() const {
  return _internal_has_attribute_len();
}
inline void CondSpeedLimit::clear_attribute_len() {
  attribute_len_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double CondSpeedLimit::_internal_attribute_len() const {
  return attribute_len_;
}
inline double CondSpeedLimit::attribute_len() const {
  // @@protoc_insertion_point(field_get:RoadPB.CondSpeedLimit.attribute_len)
  return _internal_attribute_len();
}
inline void CondSpeedLimit::_internal_set_attribute_len(double value) {
  _has_bits_[0] |= 0x00000020u;
  attribute_len_ = value;
}
inline void CondSpeedLimit::set_attribute_len(double value) {
  _internal_set_attribute_len(value);
  // @@protoc_insertion_point(field_set:RoadPB.CondSpeedLimit.attribute_len)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RoadPB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RoadPB::ProvinceCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoadPB::ProvinceCode>() {
  return ::RoadPB::ProvinceCode_descriptor();
}
template <> struct is_proto_enum< ::RoadPB::AttributeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoadPB::AttributeType>() {
  return ::RoadPB::AttributeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fcommon_2eproto
