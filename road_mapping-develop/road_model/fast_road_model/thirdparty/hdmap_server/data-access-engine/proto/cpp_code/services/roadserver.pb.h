// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/roadserver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2froadserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2froadserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "metadata/metadata.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2froadserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2froadserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2froadserver_2eproto;
namespace services {
class RoadFeature;
class RoadFeatureDefaultTypeInternal;
extern RoadFeatureDefaultTypeInternal _RoadFeature_default_instance_;
class RoadServiceResponse;
class RoadServiceResponseDefaultTypeInternal;
extern RoadServiceResponseDefaultTypeInternal _RoadServiceResponse_default_instance_;
class TileDownloadRequest;
class TileDownloadRequestDefaultTypeInternal;
extern TileDownloadRequestDefaultTypeInternal _TileDownloadRequest_default_instance_;
class TileDownloadResponse;
class TileDownloadResponseDefaultTypeInternal;
extern TileDownloadResponseDefaultTypeInternal _TileDownloadResponse_default_instance_;
class TileFeatureList;
class TileFeatureListDefaultTypeInternal;
extern TileFeatureListDefaultTypeInternal _TileFeatureList_default_instance_;
class TileInfo;
class TileInfoDefaultTypeInternal;
extern TileInfoDefaultTypeInternal _TileInfo_default_instance_;
class TileMergeRequest;
class TileMergeRequestDefaultTypeInternal;
extern TileMergeRequestDefaultTypeInternal _TileMergeRequest_default_instance_;
class TileMergeResponse;
class TileMergeResponseDefaultTypeInternal;
extern TileMergeResponseDefaultTypeInternal _TileMergeResponse_default_instance_;
class TileRevertRequest;
class TileRevertRequestDefaultTypeInternal;
extern TileRevertRequestDefaultTypeInternal _TileRevertRequest_default_instance_;
class TileRevertResponse;
class TileRevertResponseDefaultTypeInternal;
extern TileRevertResponseDefaultTypeInternal _TileRevertResponse_default_instance_;
class TileUploadRequest;
class TileUploadRequestDefaultTypeInternal;
extern TileUploadRequestDefaultTypeInternal _TileUploadRequest_default_instance_;
class TileUploadResponse;
class TileUploadResponseDefaultTypeInternal;
extern TileUploadResponseDefaultTypeInternal _TileUploadResponse_default_instance_;
}  // namespace services
PROTOBUF_NAMESPACE_OPEN
template<> ::services::RoadFeature* Arena::CreateMaybeMessage<::services::RoadFeature>(Arena*);
template<> ::services::RoadServiceResponse* Arena::CreateMaybeMessage<::services::RoadServiceResponse>(Arena*);
template<> ::services::TileDownloadRequest* Arena::CreateMaybeMessage<::services::TileDownloadRequest>(Arena*);
template<> ::services::TileDownloadResponse* Arena::CreateMaybeMessage<::services::TileDownloadResponse>(Arena*);
template<> ::services::TileFeatureList* Arena::CreateMaybeMessage<::services::TileFeatureList>(Arena*);
template<> ::services::TileInfo* Arena::CreateMaybeMessage<::services::TileInfo>(Arena*);
template<> ::services::TileMergeRequest* Arena::CreateMaybeMessage<::services::TileMergeRequest>(Arena*);
template<> ::services::TileMergeResponse* Arena::CreateMaybeMessage<::services::TileMergeResponse>(Arena*);
template<> ::services::TileRevertRequest* Arena::CreateMaybeMessage<::services::TileRevertRequest>(Arena*);
template<> ::services::TileRevertResponse* Arena::CreateMaybeMessage<::services::TileRevertResponse>(Arena*);
template<> ::services::TileUploadRequest* Arena::CreateMaybeMessage<::services::TileUploadRequest>(Arena*);
template<> ::services::TileUploadResponse* Arena::CreateMaybeMessage<::services::TileUploadResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace services {

// ===================================================================

class RoadServiceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:services.RoadServiceResponse) */ {
 public:
  inline RoadServiceResponse() : RoadServiceResponse(nullptr) {};
  virtual ~RoadServiceResponse();

  RoadServiceResponse(const RoadServiceResponse& from);
  RoadServiceResponse(RoadServiceResponse&& from) noexcept
    : RoadServiceResponse() {
    *this = ::std::move(from);
  }

  inline RoadServiceResponse& operator=(const RoadServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadServiceResponse& operator=(RoadServiceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoadServiceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadServiceResponse* internal_default_instance() {
    return reinterpret_cast<const RoadServiceResponse*>(
               &_RoadServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoadServiceResponse& a, RoadServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadServiceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadServiceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadServiceResponse* New() const final {
    return CreateMaybeMessage<RoadServiceResponse>(nullptr);
  }

  RoadServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadServiceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoadServiceResponse& from);
  void MergeFrom(const RoadServiceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadServiceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "services.RoadServiceResponse";
  }
  protected:
  explicit RoadServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_services_2froadserver_2eproto);
    return ::descriptor_table_services_2froadserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional int32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:services.RoadServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  friend struct ::TableStruct_services_2froadserver_2eproto;
};
// -------------------------------------------------------------------

class RoadFeature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:services.RoadFeature) */ {
 public:
  inline RoadFeature() : RoadFeature(nullptr) {};
  virtual ~RoadFeature();

  RoadFeature(const RoadFeature& from);
  RoadFeature(RoadFeature&& from) noexcept
    : RoadFeature() {
    *this = ::std::move(from);
  }

  inline RoadFeature& operator=(const RoadFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadFeature& operator=(RoadFeature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoadFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadFeature* internal_default_instance() {
    return reinterpret_cast<const RoadFeature*>(
               &_RoadFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoadFeature& a, RoadFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadFeature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadFeature* New() const final {
    return CreateMaybeMessage<RoadFeature>(nullptr);
  }

  RoadFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadFeature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoadFeature& from);
  void MergeFrom(const RoadFeature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadFeature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "services.RoadFeature";
  }
  protected:
  explicit RoadFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_services_2froadserver_2eproto);
    return ::descriptor_table_services_2froadserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .RoadPB.FeatureID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::RoadPB::FeatureID& id() const;
  ::RoadPB::FeatureID* release_id();
  ::RoadPB::FeatureID* mutable_id();
  void set_allocated_id(::RoadPB::FeatureID* id);
  private:
  const ::RoadPB::FeatureID& _internal_id() const;
  ::RoadPB::FeatureID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::RoadPB::FeatureID* id);
  ::RoadPB::FeatureID* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:services.RoadFeature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::RoadPB::FeatureID* id_;
  friend struct ::TableStruct_services_2froadserver_2eproto;
};
// -------------------------------------------------------------------

class TileFeatureList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:services.TileFeatureList) */ {
 public:
  inline TileFeatureList() : TileFeatureList(nullptr) {};
  virtual ~TileFeatureList();

  TileFeatureList(const TileFeatureList& from);
  TileFeatureList(TileFeatureList&& from) noexcept
    : TileFeatureList() {
    *this = ::std::move(from);
  }

  inline TileFeatureList& operator=(const TileFeatureList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileFeatureList& operator=(TileFeatureList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TileFeatureList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileFeatureList* internal_default_instance() {
    return reinterpret_cast<const TileFeatureList*>(
               &_TileFeatureList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TileFeatureList& a, TileFeatureList& b) {
    a.Swap(&b);
  }
  inline void Swap(TileFeatureList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileFeatureList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileFeatureList* New() const final {
    return CreateMaybeMessage<TileFeatureList>(nullptr);
  }

  TileFeatureList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileFeatureList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileFeatureList& from);
  void MergeFrom(const TileFeatureList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileFeatureList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "services.TileFeatureList";
  }
  protected:
  explicit TileFeatureList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_services_2froadserver_2eproto);
    return ::descriptor_table_services_2froadserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatsFieldNumber = 2,
    kRefsFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated .services.RoadFeature feats = 2;
  int feats_size() const;
  private:
  int _internal_feats_size() const;
  public:
  void clear_feats();
  ::services::RoadFeature* mutable_feats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::RoadFeature >*
      mutable_feats();
  private:
  const ::services::RoadFeature& _internal_feats(int index) const;
  ::services::RoadFeature* _internal_add_feats();
  public:
  const ::services::RoadFeature& feats(int index) const;
  ::services::RoadFeature* add_feats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::RoadFeature >&
      feats() const;

  // repeated .RoadPB.FeatureID refs = 3;
  int refs_size() const;
  private:
  int _internal_refs_size() const;
  public:
  void clear_refs();
  ::RoadPB::FeatureID* mutable_refs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >*
      mutable_refs();
  private:
  const ::RoadPB::FeatureID& _internal_refs(int index) const;
  ::RoadPB::FeatureID* _internal_add_refs();
  public:
  const ::RoadPB::FeatureID& refs(int index) const;
  ::RoadPB::FeatureID* add_refs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >&
      refs() const;

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:services.TileFeatureList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::RoadFeature > feats_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID > refs_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_services_2froadserver_2eproto;
};
// -------------------------------------------------------------------

class TileInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:services.TileInfo) */ {
 public:
  inline TileInfo() : TileInfo(nullptr) {};
  virtual ~TileInfo();

  TileInfo(const TileInfo& from);
  TileInfo(TileInfo&& from) noexcept
    : TileInfo() {
    *this = ::std::move(from);
  }

  inline TileInfo& operator=(const TileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileInfo& operator=(TileInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileInfo* internal_default_instance() {
    return reinterpret_cast<const TileInfo*>(
               &_TileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TileInfo& a, TileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TileInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileInfo* New() const final {
    return CreateMaybeMessage<TileInfo>(nullptr);
  }

  TileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileInfo& from);
  void MergeFrom(const TileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "services.TileInfo";
  }
  protected:
  explicit TileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_services_2froadserver_2eproto);
    return ::descriptor_table_services_2froadserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatListFieldNumber = 4,
    kLastEditorFieldNumber = 3,
    kVersionFieldNumber = 2,
    kTileIdFieldNumber = 1,
  };
  // repeated .services.TileFeatureList feat_list = 4;
  int feat_list_size() const;
  private:
  int _internal_feat_list_size() const;
  public:
  void clear_feat_list();
  ::services::TileFeatureList* mutable_feat_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileFeatureList >*
      mutable_feat_list();
  private:
  const ::services::TileFeatureList& _internal_feat_list(int index) const;
  ::services::TileFeatureList* _internal_add_feat_list();
  public:
  const ::services::TileFeatureList& feat_list(int index) const;
  ::services::TileFeatureList* add_feat_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileFeatureList >&
      feat_list() const;

  // optional string last_editor = 3;
  bool has_last_editor() const;
  private:
  bool _internal_has_last_editor() const;
  public:
  void clear_last_editor();
  const std::string& last_editor() const;
  void set_last_editor(const std::string& value);
  void set_last_editor(std::string&& value);
  void set_last_editor(const char* value);
  void set_last_editor(const char* value, size_t size);
  std::string* mutable_last_editor();
  std::string* release_last_editor();
  void set_allocated_last_editor(std::string* last_editor);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last_editor();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last_editor(
      std::string* last_editor);
  private:
  const std::string& _internal_last_editor() const;
  void _internal_set_last_editor(const std::string& value);
  std::string* _internal_mutable_last_editor();
  public:

  // optional int64 version = 2 [default = 0, jstype = JS_STRING];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 tile_id = 1;
  bool has_tile_id() const;
  private:
  bool _internal_has_tile_id() const;
  public:
  void clear_tile_id();
  ::PROTOBUF_NAMESPACE_ID::int32 tile_id() const;
  void set_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tile_id() const;
  void _internal_set_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:services.TileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileFeatureList > feat_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_editor_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 tile_id_;
  friend struct ::TableStruct_services_2froadserver_2eproto;
};
// -------------------------------------------------------------------

class TileUploadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:services.TileUploadRequest) */ {
 public:
  inline TileUploadRequest() : TileUploadRequest(nullptr) {};
  virtual ~TileUploadRequest();

  TileUploadRequest(const TileUploadRequest& from);
  TileUploadRequest(TileUploadRequest&& from) noexcept
    : TileUploadRequest() {
    *this = ::std::move(from);
  }

  inline TileUploadRequest& operator=(const TileUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileUploadRequest& operator=(TileUploadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TileUploadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileUploadRequest* internal_default_instance() {
    return reinterpret_cast<const TileUploadRequest*>(
               &_TileUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TileUploadRequest& a, TileUploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TileUploadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileUploadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileUploadRequest* New() const final {
    return CreateMaybeMessage<TileUploadRequest>(nullptr);
  }

  TileUploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileUploadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileUploadRequest& from);
  void MergeFrom(const TileUploadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileUploadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "services.TileUploadRequest";
  }
  protected:
  explicit TileUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_services_2froadserver_2eproto);
    return ::descriptor_table_services_2froadserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileFieldNumber = 2,
    kEditorFieldNumber = 1,
    kBranchFieldNumber = 3,
    kCommitterFieldNumber = 4,
    kAllowConflictFieldNumber = 7,
    kElemMergeFieldNumber = 8,
  };
  // repeated .services.TileInfo tile = 2;
  int tile_size() const;
  private:
  int _internal_tile_size() const;
  public:
  void clear_tile();
  ::services::TileInfo* mutable_tile(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >*
      mutable_tile();
  private:
  const ::services::TileInfo& _internal_tile(int index) const;
  ::services::TileInfo* _internal_add_tile();
  public:
  const ::services::TileInfo& tile(int index) const;
  ::services::TileInfo* add_tile();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >&
      tile() const;

  // optional string editor = 1;
  bool has_editor() const;
  private:
  bool _internal_has_editor() const;
  public:
  void clear_editor();
  const std::string& editor() const;
  void set_editor(const std::string& value);
  void set_editor(std::string&& value);
  void set_editor(const char* value);
  void set_editor(const char* value, size_t size);
  std::string* mutable_editor();
  std::string* release_editor();
  void set_allocated_editor(std::string* editor);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_editor();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_editor(
      std::string* editor);
  private:
  const std::string& _internal_editor() const;
  void _internal_set_editor(const std::string& value);
  std::string* _internal_mutable_editor();
  public:

  // optional string branch = 3;
  bool has_branch() const;
  private:
  bool _internal_has_branch() const;
  public:
  void clear_branch();
  const std::string& branch() const;
  void set_branch(const std::string& value);
  void set_branch(std::string&& value);
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  std::string* mutable_branch();
  std::string* release_branch();
  void set_allocated_branch(std::string* branch);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_branch();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_branch(
      std::string* branch);
  private:
  const std::string& _internal_branch() const;
  void _internal_set_branch(const std::string& value);
  std::string* _internal_mutable_branch();
  public:

  // optional string committer = 4;
  bool has_committer() const;
  private:
  bool _internal_has_committer() const;
  public:
  void clear_committer();
  const std::string& committer() const;
  void set_committer(const std::string& value);
  void set_committer(std::string&& value);
  void set_committer(const char* value);
  void set_committer(const char* value, size_t size);
  std::string* mutable_committer();
  std::string* release_committer();
  void set_allocated_committer(std::string* committer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_committer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_committer(
      std::string* committer);
  private:
  const std::string& _internal_committer() const;
  void _internal_set_committer(const std::string& value);
  std::string* _internal_mutable_committer();
  public:

  // optional bool allow_conflict = 7 [default = false];
  bool has_allow_conflict() const;
  private:
  bool _internal_has_allow_conflict() const;
  public:
  void clear_allow_conflict();
  bool allow_conflict() const;
  void set_allow_conflict(bool value);
  private:
  bool _internal_allow_conflict() const;
  void _internal_set_allow_conflict(bool value);
  public:

  // optional bool elem_merge = 8;
  bool has_elem_merge() const;
  private:
  bool _internal_has_elem_merge() const;
  public:
  void clear_elem_merge();
  bool elem_merge() const;
  void set_elem_merge(bool value);
  private:
  bool _internal_elem_merge() const;
  void _internal_set_elem_merge(bool value);
  public:

  // @@protoc_insertion_point(class_scope:services.TileUploadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo > tile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr editor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr committer_;
  bool allow_conflict_;
  bool elem_merge_;
  friend struct ::TableStruct_services_2froadserver_2eproto;
};
// -------------------------------------------------------------------

class TileUploadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:services.TileUploadResponse) */ {
 public:
  inline TileUploadResponse() : TileUploadResponse(nullptr) {};
  virtual ~TileUploadResponse();

  TileUploadResponse(const TileUploadResponse& from);
  TileUploadResponse(TileUploadResponse&& from) noexcept
    : TileUploadResponse() {
    *this = ::std::move(from);
  }

  inline TileUploadResponse& operator=(const TileUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileUploadResponse& operator=(TileUploadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TileUploadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileUploadResponse* internal_default_instance() {
    return reinterpret_cast<const TileUploadResponse*>(
               &_TileUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TileUploadResponse& a, TileUploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TileUploadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileUploadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileUploadResponse* New() const final {
    return CreateMaybeMessage<TileUploadResponse>(nullptr);
  }

  TileUploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileUploadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileUploadResponse& from);
  void MergeFrom(const TileUploadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileUploadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "services.TileUploadResponse";
  }
  protected:
  explicit TileUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_services_2froadserver_2eproto);
    return ::descriptor_table_services_2froadserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileFieldNumber = 1,
    kBranchFieldNumber = 5,
    kRetFieldNumber = 6,
    kReadVerFieldNumber = 4,
  };
  // repeated .services.TileInfo tile = 1;
  int tile_size() const;
  private:
  int _internal_tile_size() const;
  public:
  void clear_tile();
  ::services::TileInfo* mutable_tile(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >*
      mutable_tile();
  private:
  const ::services::TileInfo& _internal_tile(int index) const;
  ::services::TileInfo* _internal_add_tile();
  public:
  const ::services::TileInfo& tile(int index) const;
  ::services::TileInfo* add_tile();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >&
      tile() const;

  // optional string branch = 5;
  bool has_branch() const;
  private:
  bool _internal_has_branch() const;
  public:
  void clear_branch();
  const std::string& branch() const;
  void set_branch(const std::string& value);
  void set_branch(std::string&& value);
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  std::string* mutable_branch();
  std::string* release_branch();
  void set_allocated_branch(std::string* branch);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_branch();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_branch(
      std::string* branch);
  private:
  const std::string& _internal_branch() const;
  void _internal_set_branch(const std::string& value);
  std::string* _internal_mutable_branch();
  public:

  // optional .services.RoadServiceResponse ret = 6;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  const ::services::RoadServiceResponse& ret() const;
  ::services::RoadServiceResponse* release_ret();
  ::services::RoadServiceResponse* mutable_ret();
  void set_allocated_ret(::services::RoadServiceResponse* ret);
  private:
  const ::services::RoadServiceResponse& _internal_ret() const;
  ::services::RoadServiceResponse* _internal_mutable_ret();
  public:
  void unsafe_arena_set_allocated_ret(
      ::services::RoadServiceResponse* ret);
  ::services::RoadServiceResponse* unsafe_arena_release_ret();

  // optional int64 read_ver = 4 [jstype = JS_STRING];
  bool has_read_ver() const;
  private:
  bool _internal_has_read_ver() const;
  public:
  void clear_read_ver();
  ::PROTOBUF_NAMESPACE_ID::int64 read_ver() const;
  void set_read_ver(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_read_ver() const;
  void _internal_set_read_ver(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:services.TileUploadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo > tile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_;
  ::services::RoadServiceResponse* ret_;
  ::PROTOBUF_NAMESPACE_ID::int64 read_ver_;
  friend struct ::TableStruct_services_2froadserver_2eproto;
};
// -------------------------------------------------------------------

class TileDownloadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:services.TileDownloadRequest) */ {
 public:
  inline TileDownloadRequest() : TileDownloadRequest(nullptr) {};
  virtual ~TileDownloadRequest();

  TileDownloadRequest(const TileDownloadRequest& from);
  TileDownloadRequest(TileDownloadRequest&& from) noexcept
    : TileDownloadRequest() {
    *this = ::std::move(from);
  }

  inline TileDownloadRequest& operator=(const TileDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileDownloadRequest& operator=(TileDownloadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TileDownloadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const TileDownloadRequest*>(
               &_TileDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TileDownloadRequest& a, TileDownloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TileDownloadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileDownloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileDownloadRequest* New() const final {
    return CreateMaybeMessage<TileDownloadRequest>(nullptr);
  }

  TileDownloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileDownloadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileDownloadRequest& from);
  void MergeFrom(const TileDownloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileDownloadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "services.TileDownloadRequest";
  }
  protected:
  explicit TileDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_services_2froadserver_2eproto);
    return ::descriptor_table_services_2froadserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileIdFieldNumber = 1,
    kNeedTypeFieldNumber = 4,
    kEditorFieldNumber = 2,
    kBranchFieldNumber = 5,
    kRequestVersionFieldNumber = 3,
    kLoadRefFieldNumber = 6,
  };
  // repeated int32 tile_id = 1;
  int tile_id_size() const;
  private:
  int _internal_tile_id_size() const;
  public:
  void clear_tile_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tile_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_tile_id() const;
  void _internal_add_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_tile_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 tile_id(int index) const;
  void set_tile_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      tile_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_tile_id();

  // repeated int32 need_type = 4;
  int need_type_size() const;
  private:
  int _internal_need_type_size() const;
  public:
  void clear_need_type();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_need_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_need_type() const;
  void _internal_add_need_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_need_type();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 need_type(int index) const;
  void set_need_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_need_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      need_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_need_type();

  // optional string editor = 2;
  bool has_editor() const;
  private:
  bool _internal_has_editor() const;
  public:
  void clear_editor();
  const std::string& editor() const;
  void set_editor(const std::string& value);
  void set_editor(std::string&& value);
  void set_editor(const char* value);
  void set_editor(const char* value, size_t size);
  std::string* mutable_editor();
  std::string* release_editor();
  void set_allocated_editor(std::string* editor);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_editor();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_editor(
      std::string* editor);
  private:
  const std::string& _internal_editor() const;
  void _internal_set_editor(const std::string& value);
  std::string* _internal_mutable_editor();
  public:

  // optional string branch = 5;
  bool has_branch() const;
  private:
  bool _internal_has_branch() const;
  public:
  void clear_branch();
  const std::string& branch() const;
  void set_branch(const std::string& value);
  void set_branch(std::string&& value);
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  std::string* mutable_branch();
  std::string* release_branch();
  void set_allocated_branch(std::string* branch);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_branch();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_branch(
      std::string* branch);
  private:
  const std::string& _internal_branch() const;
  void _internal_set_branch(const std::string& value);
  std::string* _internal_mutable_branch();
  public:

  // optional int64 request_version = 3 [jstype = JS_STRING];
  bool has_request_version() const;
  private:
  bool _internal_has_request_version() const;
  public:
  void clear_request_version();
  ::PROTOBUF_NAMESPACE_ID::int64 request_version() const;
  void set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_request_version() const;
  void _internal_set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool load_ref = 6;
  bool has_load_ref() const;
  private:
  bool _internal_has_load_ref() const;
  public:
  void clear_load_ref();
  bool load_ref() const;
  void set_load_ref(bool value);
  private:
  bool _internal_load_ref() const;
  void _internal_set_load_ref(bool value);
  public:

  // @@protoc_insertion_point(class_scope:services.TileDownloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > tile_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > need_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr editor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_;
  ::PROTOBUF_NAMESPACE_ID::int64 request_version_;
  bool load_ref_;
  friend struct ::TableStruct_services_2froadserver_2eproto;
};
// -------------------------------------------------------------------

class TileDownloadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:services.TileDownloadResponse) */ {
 public:
  inline TileDownloadResponse() : TileDownloadResponse(nullptr) {};
  virtual ~TileDownloadResponse();

  TileDownloadResponse(const TileDownloadResponse& from);
  TileDownloadResponse(TileDownloadResponse&& from) noexcept
    : TileDownloadResponse() {
    *this = ::std::move(from);
  }

  inline TileDownloadResponse& operator=(const TileDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileDownloadResponse& operator=(TileDownloadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TileDownloadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const TileDownloadResponse*>(
               &_TileDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TileDownloadResponse& a, TileDownloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TileDownloadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileDownloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileDownloadResponse* New() const final {
    return CreateMaybeMessage<TileDownloadResponse>(nullptr);
  }

  TileDownloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileDownloadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileDownloadResponse& from);
  void MergeFrom(const TileDownloadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileDownloadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "services.TileDownloadResponse";
  }
  protected:
  explicit TileDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_services_2froadserver_2eproto);
    return ::descriptor_table_services_2froadserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileInfoFieldNumber = 3,
    kBranchFieldNumber = 6,
    kRetFieldNumber = 8,
    kEditorVersionFieldNumber = 5,
  };
  // repeated .services.TileInfo tile_info = 3;
  int tile_info_size() const;
  private:
  int _internal_tile_info_size() const;
  public:
  void clear_tile_info();
  ::services::TileInfo* mutable_tile_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >*
      mutable_tile_info();
  private:
  const ::services::TileInfo& _internal_tile_info(int index) const;
  ::services::TileInfo* _internal_add_tile_info();
  public:
  const ::services::TileInfo& tile_info(int index) const;
  ::services::TileInfo* add_tile_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >&
      tile_info() const;

  // optional string branch = 6;
  bool has_branch() const;
  private:
  bool _internal_has_branch() const;
  public:
  void clear_branch();
  const std::string& branch() const;
  void set_branch(const std::string& value);
  void set_branch(std::string&& value);
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  std::string* mutable_branch();
  std::string* release_branch();
  void set_allocated_branch(std::string* branch);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_branch();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_branch(
      std::string* branch);
  private:
  const std::string& _internal_branch() const;
  void _internal_set_branch(const std::string& value);
  std::string* _internal_mutable_branch();
  public:

  // optional .services.RoadServiceResponse ret = 8;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  const ::services::RoadServiceResponse& ret() const;
  ::services::RoadServiceResponse* release_ret();
  ::services::RoadServiceResponse* mutable_ret();
  void set_allocated_ret(::services::RoadServiceResponse* ret);
  private:
  const ::services::RoadServiceResponse& _internal_ret() const;
  ::services::RoadServiceResponse* _internal_mutable_ret();
  public:
  void unsafe_arena_set_allocated_ret(
      ::services::RoadServiceResponse* ret);
  ::services::RoadServiceResponse* unsafe_arena_release_ret();

  // optional int64 editor_version = 5 [jstype = JS_STRING];
  bool has_editor_version() const;
  private:
  bool _internal_has_editor_version() const;
  public:
  void clear_editor_version();
  ::PROTOBUF_NAMESPACE_ID::int64 editor_version() const;
  void set_editor_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_editor_version() const;
  void _internal_set_editor_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:services.TileDownloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo > tile_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_;
  ::services::RoadServiceResponse* ret_;
  ::PROTOBUF_NAMESPACE_ID::int64 editor_version_;
  friend struct ::TableStruct_services_2froadserver_2eproto;
};
// -------------------------------------------------------------------

class TileMergeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:services.TileMergeRequest) */ {
 public:
  inline TileMergeRequest() : TileMergeRequest(nullptr) {};
  virtual ~TileMergeRequest();

  TileMergeRequest(const TileMergeRequest& from);
  TileMergeRequest(TileMergeRequest&& from) noexcept
    : TileMergeRequest() {
    *this = ::std::move(from);
  }

  inline TileMergeRequest& operator=(const TileMergeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileMergeRequest& operator=(TileMergeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TileMergeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileMergeRequest* internal_default_instance() {
    return reinterpret_cast<const TileMergeRequest*>(
               &_TileMergeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TileMergeRequest& a, TileMergeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TileMergeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileMergeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileMergeRequest* New() const final {
    return CreateMaybeMessage<TileMergeRequest>(nullptr);
  }

  TileMergeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileMergeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileMergeRequest& from);
  void MergeFrom(const TileMergeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileMergeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "services.TileMergeRequest";
  }
  protected:
  explicit TileMergeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_services_2froadserver_2eproto);
    return ::descriptor_table_services_2froadserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileIdFieldNumber = 1,
    kNeedTypeFieldNumber = 4,
    kEditorFieldNumber = 2,
    kSrcBranchFieldNumber = 5,
    kDstBranchFieldNumber = 6,
    kRequestVersionFieldNumber = 3,
    kSrcVersionFieldNumber = 8,
    kEditableOnlyFieldNumber = 7,
    kAllowConflictFieldNumber = 9,
  };
  // repeated int32 tile_id = 1;
  int tile_id_size() const;
  private:
  int _internal_tile_id_size() const;
  public:
  void clear_tile_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tile_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_tile_id() const;
  void _internal_add_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_tile_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 tile_id(int index) const;
  void set_tile_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      tile_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_tile_id();

  // repeated int32 need_type = 4;
  int need_type_size() const;
  private:
  int _internal_need_type_size() const;
  public:
  void clear_need_type();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_need_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_need_type() const;
  void _internal_add_need_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_need_type();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 need_type(int index) const;
  void set_need_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_need_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      need_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_need_type();

  // optional string editor = 2;
  bool has_editor() const;
  private:
  bool _internal_has_editor() const;
  public:
  void clear_editor();
  const std::string& editor() const;
  void set_editor(const std::string& value);
  void set_editor(std::string&& value);
  void set_editor(const char* value);
  void set_editor(const char* value, size_t size);
  std::string* mutable_editor();
  std::string* release_editor();
  void set_allocated_editor(std::string* editor);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_editor();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_editor(
      std::string* editor);
  private:
  const std::string& _internal_editor() const;
  void _internal_set_editor(const std::string& value);
  std::string* _internal_mutable_editor();
  public:

  // optional string src_branch = 5;
  bool has_src_branch() const;
  private:
  bool _internal_has_src_branch() const;
  public:
  void clear_src_branch();
  const std::string& src_branch() const;
  void set_src_branch(const std::string& value);
  void set_src_branch(std::string&& value);
  void set_src_branch(const char* value);
  void set_src_branch(const char* value, size_t size);
  std::string* mutable_src_branch();
  std::string* release_src_branch();
  void set_allocated_src_branch(std::string* src_branch);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_src_branch();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_src_branch(
      std::string* src_branch);
  private:
  const std::string& _internal_src_branch() const;
  void _internal_set_src_branch(const std::string& value);
  std::string* _internal_mutable_src_branch();
  public:

  // optional string dst_branch = 6;
  bool has_dst_branch() const;
  private:
  bool _internal_has_dst_branch() const;
  public:
  void clear_dst_branch();
  const std::string& dst_branch() const;
  void set_dst_branch(const std::string& value);
  void set_dst_branch(std::string&& value);
  void set_dst_branch(const char* value);
  void set_dst_branch(const char* value, size_t size);
  std::string* mutable_dst_branch();
  std::string* release_dst_branch();
  void set_allocated_dst_branch(std::string* dst_branch);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dst_branch();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dst_branch(
      std::string* dst_branch);
  private:
  const std::string& _internal_dst_branch() const;
  void _internal_set_dst_branch(const std::string& value);
  std::string* _internal_mutable_dst_branch();
  public:

  // optional int64 request_version = 3 [jstype = JS_STRING];
  bool has_request_version() const;
  private:
  bool _internal_has_request_version() const;
  public:
  void clear_request_version();
  ::PROTOBUF_NAMESPACE_ID::int64 request_version() const;
  void set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_request_version() const;
  void _internal_set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 src_version = 8;
  bool has_src_version() const;
  private:
  bool _internal_has_src_version() const;
  public:
  void clear_src_version();
  ::PROTOBUF_NAMESPACE_ID::int64 src_version() const;
  void set_src_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_src_version() const;
  void _internal_set_src_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool editable_only = 7;
  bool has_editable_only() const;
  private:
  bool _internal_has_editable_only() const;
  public:
  void clear_editable_only();
  bool editable_only() const;
  void set_editable_only(bool value);
  private:
  bool _internal_editable_only() const;
  void _internal_set_editable_only(bool value);
  public:

  // optional bool allow_conflict = 9 [default = true];
  bool has_allow_conflict() const;
  private:
  bool _internal_has_allow_conflict() const;
  public:
  void clear_allow_conflict();
  bool allow_conflict() const;
  void set_allow_conflict(bool value);
  private:
  bool _internal_allow_conflict() const;
  void _internal_set_allow_conflict(bool value);
  public:

  // @@protoc_insertion_point(class_scope:services.TileMergeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > tile_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > need_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr editor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_branch_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_branch_;
  ::PROTOBUF_NAMESPACE_ID::int64 request_version_;
  ::PROTOBUF_NAMESPACE_ID::int64 src_version_;
  bool editable_only_;
  bool allow_conflict_;
  friend struct ::TableStruct_services_2froadserver_2eproto;
};
// -------------------------------------------------------------------

class TileMergeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:services.TileMergeResponse) */ {
 public:
  inline TileMergeResponse() : TileMergeResponse(nullptr) {};
  virtual ~TileMergeResponse();

  TileMergeResponse(const TileMergeResponse& from);
  TileMergeResponse(TileMergeResponse&& from) noexcept
    : TileMergeResponse() {
    *this = ::std::move(from);
  }

  inline TileMergeResponse& operator=(const TileMergeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileMergeResponse& operator=(TileMergeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TileMergeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileMergeResponse* internal_default_instance() {
    return reinterpret_cast<const TileMergeResponse*>(
               &_TileMergeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TileMergeResponse& a, TileMergeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TileMergeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileMergeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileMergeResponse* New() const final {
    return CreateMaybeMessage<TileMergeResponse>(nullptr);
  }

  TileMergeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileMergeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileMergeResponse& from);
  void MergeFrom(const TileMergeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileMergeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "services.TileMergeResponse";
  }
  protected:
  explicit TileMergeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_services_2froadserver_2eproto);
    return ::descriptor_table_services_2froadserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileInfoFieldNumber = 3,
    kDstBranchFieldNumber = 6,
    kRetFieldNumber = 8,
    kEditorVersionFieldNumber = 5,
  };
  // repeated .services.TileInfo tile_info = 3;
  int tile_info_size() const;
  private:
  int _internal_tile_info_size() const;
  public:
  void clear_tile_info();
  ::services::TileInfo* mutable_tile_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >*
      mutable_tile_info();
  private:
  const ::services::TileInfo& _internal_tile_info(int index) const;
  ::services::TileInfo* _internal_add_tile_info();
  public:
  const ::services::TileInfo& tile_info(int index) const;
  ::services::TileInfo* add_tile_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >&
      tile_info() const;

  // optional string dst_branch = 6;
  bool has_dst_branch() const;
  private:
  bool _internal_has_dst_branch() const;
  public:
  void clear_dst_branch();
  const std::string& dst_branch() const;
  void set_dst_branch(const std::string& value);
  void set_dst_branch(std::string&& value);
  void set_dst_branch(const char* value);
  void set_dst_branch(const char* value, size_t size);
  std::string* mutable_dst_branch();
  std::string* release_dst_branch();
  void set_allocated_dst_branch(std::string* dst_branch);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dst_branch();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dst_branch(
      std::string* dst_branch);
  private:
  const std::string& _internal_dst_branch() const;
  void _internal_set_dst_branch(const std::string& value);
  std::string* _internal_mutable_dst_branch();
  public:

  // optional .services.RoadServiceResponse ret = 8;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  const ::services::RoadServiceResponse& ret() const;
  ::services::RoadServiceResponse* release_ret();
  ::services::RoadServiceResponse* mutable_ret();
  void set_allocated_ret(::services::RoadServiceResponse* ret);
  private:
  const ::services::RoadServiceResponse& _internal_ret() const;
  ::services::RoadServiceResponse* _internal_mutable_ret();
  public:
  void unsafe_arena_set_allocated_ret(
      ::services::RoadServiceResponse* ret);
  ::services::RoadServiceResponse* unsafe_arena_release_ret();

  // optional int64 editor_version = 5 [jstype = JS_STRING];
  bool has_editor_version() const;
  private:
  bool _internal_has_editor_version() const;
  public:
  void clear_editor_version();
  ::PROTOBUF_NAMESPACE_ID::int64 editor_version() const;
  void set_editor_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_editor_version() const;
  void _internal_set_editor_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:services.TileMergeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo > tile_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_branch_;
  ::services::RoadServiceResponse* ret_;
  ::PROTOBUF_NAMESPACE_ID::int64 editor_version_;
  friend struct ::TableStruct_services_2froadserver_2eproto;
};
// -------------------------------------------------------------------

class TileRevertRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:services.TileRevertRequest) */ {
 public:
  inline TileRevertRequest() : TileRevertRequest(nullptr) {};
  virtual ~TileRevertRequest();

  TileRevertRequest(const TileRevertRequest& from);
  TileRevertRequest(TileRevertRequest&& from) noexcept
    : TileRevertRequest() {
    *this = ::std::move(from);
  }

  inline TileRevertRequest& operator=(const TileRevertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileRevertRequest& operator=(TileRevertRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TileRevertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileRevertRequest* internal_default_instance() {
    return reinterpret_cast<const TileRevertRequest*>(
               &_TileRevertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TileRevertRequest& a, TileRevertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TileRevertRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileRevertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileRevertRequest* New() const final {
    return CreateMaybeMessage<TileRevertRequest>(nullptr);
  }

  TileRevertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileRevertRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileRevertRequest& from);
  void MergeFrom(const TileRevertRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileRevertRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "services.TileRevertRequest";
  }
  protected:
  explicit TileRevertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_services_2froadserver_2eproto);
    return ::descriptor_table_services_2froadserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileIdFieldNumber = 1,
    kNeedTypeFieldNumber = 4,
    kEditorFieldNumber = 2,
    kBranchFieldNumber = 5,
    kRequestVersionFieldNumber = 3,
    kEditableOnlyFieldNumber = 6,
  };
  // repeated int32 tile_id = 1;
  int tile_id_size() const;
  private:
  int _internal_tile_id_size() const;
  public:
  void clear_tile_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tile_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_tile_id() const;
  void _internal_add_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_tile_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 tile_id(int index) const;
  void set_tile_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      tile_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_tile_id();

  // repeated int32 need_type = 4;
  int need_type_size() const;
  private:
  int _internal_need_type_size() const;
  public:
  void clear_need_type();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_need_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_need_type() const;
  void _internal_add_need_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_need_type();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 need_type(int index) const;
  void set_need_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_need_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      need_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_need_type();

  // optional string editor = 2;
  bool has_editor() const;
  private:
  bool _internal_has_editor() const;
  public:
  void clear_editor();
  const std::string& editor() const;
  void set_editor(const std::string& value);
  void set_editor(std::string&& value);
  void set_editor(const char* value);
  void set_editor(const char* value, size_t size);
  std::string* mutable_editor();
  std::string* release_editor();
  void set_allocated_editor(std::string* editor);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_editor();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_editor(
      std::string* editor);
  private:
  const std::string& _internal_editor() const;
  void _internal_set_editor(const std::string& value);
  std::string* _internal_mutable_editor();
  public:

  // optional string branch = 5;
  bool has_branch() const;
  private:
  bool _internal_has_branch() const;
  public:
  void clear_branch();
  const std::string& branch() const;
  void set_branch(const std::string& value);
  void set_branch(std::string&& value);
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  std::string* mutable_branch();
  std::string* release_branch();
  void set_allocated_branch(std::string* branch);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_branch();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_branch(
      std::string* branch);
  private:
  const std::string& _internal_branch() const;
  void _internal_set_branch(const std::string& value);
  std::string* _internal_mutable_branch();
  public:

  // optional int64 request_version = 3 [jstype = JS_STRING];
  bool has_request_version() const;
  private:
  bool _internal_has_request_version() const;
  public:
  void clear_request_version();
  ::PROTOBUF_NAMESPACE_ID::int64 request_version() const;
  void set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_request_version() const;
  void _internal_set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool editable_only = 6;
  bool has_editable_only() const;
  private:
  bool _internal_has_editable_only() const;
  public:
  void clear_editable_only();
  bool editable_only() const;
  void set_editable_only(bool value);
  private:
  bool _internal_editable_only() const;
  void _internal_set_editable_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:services.TileRevertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > tile_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > need_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr editor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_;
  ::PROTOBUF_NAMESPACE_ID::int64 request_version_;
  bool editable_only_;
  friend struct ::TableStruct_services_2froadserver_2eproto;
};
// -------------------------------------------------------------------

class TileRevertResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:services.TileRevertResponse) */ {
 public:
  inline TileRevertResponse() : TileRevertResponse(nullptr) {};
  virtual ~TileRevertResponse();

  TileRevertResponse(const TileRevertResponse& from);
  TileRevertResponse(TileRevertResponse&& from) noexcept
    : TileRevertResponse() {
    *this = ::std::move(from);
  }

  inline TileRevertResponse& operator=(const TileRevertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileRevertResponse& operator=(TileRevertResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TileRevertResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileRevertResponse* internal_default_instance() {
    return reinterpret_cast<const TileRevertResponse*>(
               &_TileRevertResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TileRevertResponse& a, TileRevertResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TileRevertResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileRevertResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileRevertResponse* New() const final {
    return CreateMaybeMessage<TileRevertResponse>(nullptr);
  }

  TileRevertResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileRevertResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileRevertResponse& from);
  void MergeFrom(const TileRevertResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileRevertResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "services.TileRevertResponse";
  }
  protected:
  explicit TileRevertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_services_2froadserver_2eproto);
    return ::descriptor_table_services_2froadserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileInfoFieldNumber = 3,
    kBranchFieldNumber = 6,
    kRetFieldNumber = 8,
    kEditorVersionFieldNumber = 5,
    kRequestVersionFieldNumber = 7,
  };
  // repeated .services.TileInfo tile_info = 3;
  int tile_info_size() const;
  private:
  int _internal_tile_info_size() const;
  public:
  void clear_tile_info();
  ::services::TileInfo* mutable_tile_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >*
      mutable_tile_info();
  private:
  const ::services::TileInfo& _internal_tile_info(int index) const;
  ::services::TileInfo* _internal_add_tile_info();
  public:
  const ::services::TileInfo& tile_info(int index) const;
  ::services::TileInfo* add_tile_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >&
      tile_info() const;

  // optional string branch = 6;
  bool has_branch() const;
  private:
  bool _internal_has_branch() const;
  public:
  void clear_branch();
  const std::string& branch() const;
  void set_branch(const std::string& value);
  void set_branch(std::string&& value);
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  std::string* mutable_branch();
  std::string* release_branch();
  void set_allocated_branch(std::string* branch);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_branch();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_branch(
      std::string* branch);
  private:
  const std::string& _internal_branch() const;
  void _internal_set_branch(const std::string& value);
  std::string* _internal_mutable_branch();
  public:

  // optional .services.RoadServiceResponse ret = 8;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  const ::services::RoadServiceResponse& ret() const;
  ::services::RoadServiceResponse* release_ret();
  ::services::RoadServiceResponse* mutable_ret();
  void set_allocated_ret(::services::RoadServiceResponse* ret);
  private:
  const ::services::RoadServiceResponse& _internal_ret() const;
  ::services::RoadServiceResponse* _internal_mutable_ret();
  public:
  void unsafe_arena_set_allocated_ret(
      ::services::RoadServiceResponse* ret);
  ::services::RoadServiceResponse* unsafe_arena_release_ret();

  // optional int64 editor_version = 5 [jstype = JS_STRING];
  bool has_editor_version() const;
  private:
  bool _internal_has_editor_version() const;
  public:
  void clear_editor_version();
  ::PROTOBUF_NAMESPACE_ID::int64 editor_version() const;
  void set_editor_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_editor_version() const;
  void _internal_set_editor_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 request_version = 7 [jstype = JS_STRING];
  bool has_request_version() const;
  private:
  bool _internal_has_request_version() const;
  public:
  void clear_request_version();
  ::PROTOBUF_NAMESPACE_ID::int64 request_version() const;
  void set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_request_version() const;
  void _internal_set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:services.TileRevertResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo > tile_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_;
  ::services::RoadServiceResponse* ret_;
  ::PROTOBUF_NAMESPACE_ID::int64 editor_version_;
  ::PROTOBUF_NAMESPACE_ID::int64 request_version_;
  friend struct ::TableStruct_services_2froadserver_2eproto;
};
// ===================================================================

class RoadService_Stub;

class RoadService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RoadService() {};
 public:
  virtual ~RoadService();

  typedef RoadService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void UploadTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::services::TileUploadRequest* request,
                       ::services::TileUploadResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DownloadTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::services::TileDownloadRequest* request,
                       ::services::TileDownloadResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void MergeTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::services::TileMergeRequest* request,
                       ::services::TileMergeResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RevertTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::services::TileRevertRequest* request,
                       ::services::TileRevertResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RoadService);
};

class RoadService_Stub : public RoadService {
 public:
  RoadService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RoadService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RoadService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RoadService ------------------------------------------

  void UploadTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::services::TileUploadRequest* request,
                       ::services::TileUploadResponse* response,
                       ::google::protobuf::Closure* done);
  void DownloadTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::services::TileDownloadRequest* request,
                       ::services::TileDownloadResponse* response,
                       ::google::protobuf::Closure* done);
  void MergeTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::services::TileMergeRequest* request,
                       ::services::TileMergeResponse* response,
                       ::google::protobuf::Closure* done);
  void RevertTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::services::TileRevertRequest* request,
                       ::services::TileRevertResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RoadService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoadServiceResponse

// optional int32 code = 1;
inline bool RoadServiceResponse::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoadServiceResponse::has_code() const {
  return _internal_has_code();
}
inline void RoadServiceResponse::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadServiceResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadServiceResponse::code() const {
  // @@protoc_insertion_point(field_get:services.RoadServiceResponse.code)
  return _internal_code();
}
inline void RoadServiceResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  code_ = value;
}
inline void RoadServiceResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:services.RoadServiceResponse.code)
}

// optional string message = 2;
inline bool RoadServiceResponse::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoadServiceResponse::has_message() const {
  return _internal_has_message();
}
inline void RoadServiceResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoadServiceResponse::message() const {
  // @@protoc_insertion_point(field_get:services.RoadServiceResponse.message)
  return _internal_message();
}
inline void RoadServiceResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:services.RoadServiceResponse.message)
}
inline std::string* RoadServiceResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:services.RoadServiceResponse.message)
  return _internal_mutable_message();
}
inline const std::string& RoadServiceResponse::_internal_message() const {
  return message_.Get();
}
inline void RoadServiceResponse::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoadServiceResponse::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.RoadServiceResponse.message)
}
inline void RoadServiceResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.RoadServiceResponse.message)
}
inline void RoadServiceResponse::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.RoadServiceResponse.message)
}
inline std::string* RoadServiceResponse::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoadServiceResponse::release_message() {
  // @@protoc_insertion_point(field_release:services.RoadServiceResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoadServiceResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.RoadServiceResponse.message)
}
inline std::string* RoadServiceResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.RoadServiceResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoadServiceResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.RoadServiceResponse.message)
}

// -------------------------------------------------------------------

// RoadFeature

// optional .RoadPB.FeatureID id = 1;
inline bool RoadFeature::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool RoadFeature::has_id() const {
  return _internal_has_id();
}
inline const ::RoadPB::FeatureID& RoadFeature::_internal_id() const {
  const ::RoadPB::FeatureID* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadPB::FeatureID*>(
      &::RoadPB::_FeatureID_default_instance_);
}
inline const ::RoadPB::FeatureID& RoadFeature::id() const {
  // @@protoc_insertion_point(field_get:services.RoadFeature.id)
  return _internal_id();
}
inline void RoadFeature::unsafe_arena_set_allocated_id(
    ::RoadPB::FeatureID* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.RoadFeature.id)
}
inline ::RoadPB::FeatureID* RoadFeature::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadPB::FeatureID* RoadFeature::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:services.RoadFeature.id)
  _has_bits_[0] &= ~0x00000002u;
  ::RoadPB::FeatureID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::RoadPB::FeatureID* RoadFeature::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::FeatureID>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::RoadPB::FeatureID* RoadFeature::mutable_id() {
  // @@protoc_insertion_point(field_mutable:services.RoadFeature.id)
  return _internal_mutable_id();
}
inline void RoadFeature::set_allocated_id(::RoadPB::FeatureID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:services.RoadFeature.id)
}

// optional bytes data = 2;
inline bool RoadFeature::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoadFeature::has_data() const {
  return _internal_has_data();
}
inline void RoadFeature::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoadFeature::data() const {
  // @@protoc_insertion_point(field_get:services.RoadFeature.data)
  return _internal_data();
}
inline void RoadFeature::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:services.RoadFeature.data)
}
inline std::string* RoadFeature::mutable_data() {
  // @@protoc_insertion_point(field_mutable:services.RoadFeature.data)
  return _internal_mutable_data();
}
inline const std::string& RoadFeature::_internal_data() const {
  return data_.Get();
}
inline void RoadFeature::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoadFeature::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.RoadFeature.data)
}
inline void RoadFeature::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.RoadFeature.data)
}
inline void RoadFeature::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.RoadFeature.data)
}
inline std::string* RoadFeature::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoadFeature::release_data() {
  // @@protoc_insertion_point(field_release:services.RoadFeature.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoadFeature::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.RoadFeature.data)
}
inline std::string* RoadFeature::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.RoadFeature.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoadFeature::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.RoadFeature.data)
}

// -------------------------------------------------------------------

// TileFeatureList

// optional int32 type = 1;
inline bool TileFeatureList::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileFeatureList::has_type() const {
  return _internal_has_type();
}
inline void TileFeatureList::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileFeatureList::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileFeatureList::type() const {
  // @@protoc_insertion_point(field_get:services.TileFeatureList.type)
  return _internal_type();
}
inline void TileFeatureList::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void TileFeatureList::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:services.TileFeatureList.type)
}

// repeated .services.RoadFeature feats = 2;
inline int TileFeatureList::_internal_feats_size() const {
  return feats_.size();
}
inline int TileFeatureList::feats_size() const {
  return _internal_feats_size();
}
inline void TileFeatureList::clear_feats() {
  feats_.Clear();
}
inline ::services::RoadFeature* TileFeatureList::mutable_feats(int index) {
  // @@protoc_insertion_point(field_mutable:services.TileFeatureList.feats)
  return feats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::RoadFeature >*
TileFeatureList::mutable_feats() {
  // @@protoc_insertion_point(field_mutable_list:services.TileFeatureList.feats)
  return &feats_;
}
inline const ::services::RoadFeature& TileFeatureList::_internal_feats(int index) const {
  return feats_.Get(index);
}
inline const ::services::RoadFeature& TileFeatureList::feats(int index) const {
  // @@protoc_insertion_point(field_get:services.TileFeatureList.feats)
  return _internal_feats(index);
}
inline ::services::RoadFeature* TileFeatureList::_internal_add_feats() {
  return feats_.Add();
}
inline ::services::RoadFeature* TileFeatureList::add_feats() {
  // @@protoc_insertion_point(field_add:services.TileFeatureList.feats)
  return _internal_add_feats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::RoadFeature >&
TileFeatureList::feats() const {
  // @@protoc_insertion_point(field_list:services.TileFeatureList.feats)
  return feats_;
}

// repeated .RoadPB.FeatureID refs = 3;
inline int TileFeatureList::_internal_refs_size() const {
  return refs_.size();
}
inline int TileFeatureList::refs_size() const {
  return _internal_refs_size();
}
inline ::RoadPB::FeatureID* TileFeatureList::mutable_refs(int index) {
  // @@protoc_insertion_point(field_mutable:services.TileFeatureList.refs)
  return refs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >*
TileFeatureList::mutable_refs() {
  // @@protoc_insertion_point(field_mutable_list:services.TileFeatureList.refs)
  return &refs_;
}
inline const ::RoadPB::FeatureID& TileFeatureList::_internal_refs(int index) const {
  return refs_.Get(index);
}
inline const ::RoadPB::FeatureID& TileFeatureList::refs(int index) const {
  // @@protoc_insertion_point(field_get:services.TileFeatureList.refs)
  return _internal_refs(index);
}
inline ::RoadPB::FeatureID* TileFeatureList::_internal_add_refs() {
  return refs_.Add();
}
inline ::RoadPB::FeatureID* TileFeatureList::add_refs() {
  // @@protoc_insertion_point(field_add:services.TileFeatureList.refs)
  return _internal_add_refs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >&
TileFeatureList::refs() const {
  // @@protoc_insertion_point(field_list:services.TileFeatureList.refs)
  return refs_;
}

// -------------------------------------------------------------------

// TileInfo

// optional int32 tile_id = 1;
inline bool TileInfo::_internal_has_tile_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TileInfo::has_tile_id() const {
  return _internal_has_tile_id();
}
inline void TileInfo::clear_tile_id() {
  tile_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileInfo::_internal_tile_id() const {
  return tile_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileInfo::tile_id() const {
  // @@protoc_insertion_point(field_get:services.TileInfo.tile_id)
  return _internal_tile_id();
}
inline void TileInfo::_internal_set_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  tile_id_ = value;
}
inline void TileInfo::set_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tile_id(value);
  // @@protoc_insertion_point(field_set:services.TileInfo.tile_id)
}

// optional int64 version = 2 [default = 0, jstype = JS_STRING];
inline bool TileInfo::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TileInfo::has_version() const {
  return _internal_has_version();
}
inline void TileInfo::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileInfo::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileInfo::version() const {
  // @@protoc_insertion_point(field_get:services.TileInfo.version)
  return _internal_version();
}
inline void TileInfo::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void TileInfo::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:services.TileInfo.version)
}

// optional string last_editor = 3;
inline bool TileInfo::_internal_has_last_editor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileInfo::has_last_editor() const {
  return _internal_has_last_editor();
}
inline void TileInfo::clear_last_editor() {
  last_editor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TileInfo::last_editor() const {
  // @@protoc_insertion_point(field_get:services.TileInfo.last_editor)
  return _internal_last_editor();
}
inline void TileInfo::set_last_editor(const std::string& value) {
  _internal_set_last_editor(value);
  // @@protoc_insertion_point(field_set:services.TileInfo.last_editor)
}
inline std::string* TileInfo::mutable_last_editor() {
  // @@protoc_insertion_point(field_mutable:services.TileInfo.last_editor)
  return _internal_mutable_last_editor();
}
inline const std::string& TileInfo::_internal_last_editor() const {
  return last_editor_.Get();
}
inline void TileInfo::_internal_set_last_editor(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  last_editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileInfo::set_last_editor(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  last_editor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileInfo.last_editor)
}
inline void TileInfo::set_last_editor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  last_editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileInfo.last_editor)
}
inline void TileInfo::set_last_editor(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  last_editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileInfo.last_editor)
}
inline std::string* TileInfo::_internal_mutable_last_editor() {
  _has_bits_[0] |= 0x00000001u;
  return last_editor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileInfo::release_last_editor() {
  // @@protoc_insertion_point(field_release:services.TileInfo.last_editor)
  if (!_internal_has_last_editor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return last_editor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileInfo::set_allocated_last_editor(std::string* last_editor) {
  if (last_editor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_editor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_editor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileInfo.last_editor)
}
inline std::string* TileInfo::unsafe_arena_release_last_editor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileInfo.last_editor)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return last_editor_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileInfo::unsafe_arena_set_allocated_last_editor(
    std::string* last_editor) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last_editor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_editor_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last_editor, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileInfo.last_editor)
}

// repeated .services.TileFeatureList feat_list = 4;
inline int TileInfo::_internal_feat_list_size() const {
  return feat_list_.size();
}
inline int TileInfo::feat_list_size() const {
  return _internal_feat_list_size();
}
inline void TileInfo::clear_feat_list() {
  feat_list_.Clear();
}
inline ::services::TileFeatureList* TileInfo::mutable_feat_list(int index) {
  // @@protoc_insertion_point(field_mutable:services.TileInfo.feat_list)
  return feat_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileFeatureList >*
TileInfo::mutable_feat_list() {
  // @@protoc_insertion_point(field_mutable_list:services.TileInfo.feat_list)
  return &feat_list_;
}
inline const ::services::TileFeatureList& TileInfo::_internal_feat_list(int index) const {
  return feat_list_.Get(index);
}
inline const ::services::TileFeatureList& TileInfo::feat_list(int index) const {
  // @@protoc_insertion_point(field_get:services.TileInfo.feat_list)
  return _internal_feat_list(index);
}
inline ::services::TileFeatureList* TileInfo::_internal_add_feat_list() {
  return feat_list_.Add();
}
inline ::services::TileFeatureList* TileInfo::add_feat_list() {
  // @@protoc_insertion_point(field_add:services.TileInfo.feat_list)
  return _internal_add_feat_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileFeatureList >&
TileInfo::feat_list() const {
  // @@protoc_insertion_point(field_list:services.TileInfo.feat_list)
  return feat_list_;
}

// -------------------------------------------------------------------

// TileUploadRequest

// optional string editor = 1;
inline bool TileUploadRequest::_internal_has_editor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileUploadRequest::has_editor() const {
  return _internal_has_editor();
}
inline void TileUploadRequest::clear_editor() {
  editor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TileUploadRequest::editor() const {
  // @@protoc_insertion_point(field_get:services.TileUploadRequest.editor)
  return _internal_editor();
}
inline void TileUploadRequest::set_editor(const std::string& value) {
  _internal_set_editor(value);
  // @@protoc_insertion_point(field_set:services.TileUploadRequest.editor)
}
inline std::string* TileUploadRequest::mutable_editor() {
  // @@protoc_insertion_point(field_mutable:services.TileUploadRequest.editor)
  return _internal_mutable_editor();
}
inline const std::string& TileUploadRequest::_internal_editor() const {
  return editor_.Get();
}
inline void TileUploadRequest::_internal_set_editor(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileUploadRequest::set_editor(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileUploadRequest.editor)
}
inline void TileUploadRequest::set_editor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileUploadRequest.editor)
}
inline void TileUploadRequest::set_editor(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileUploadRequest.editor)
}
inline std::string* TileUploadRequest::_internal_mutable_editor() {
  _has_bits_[0] |= 0x00000001u;
  return editor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileUploadRequest::release_editor() {
  // @@protoc_insertion_point(field_release:services.TileUploadRequest.editor)
  if (!_internal_has_editor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return editor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileUploadRequest::set_allocated_editor(std::string* editor) {
  if (editor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  editor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), editor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileUploadRequest.editor)
}
inline std::string* TileUploadRequest::unsafe_arena_release_editor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileUploadRequest.editor)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return editor_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileUploadRequest::unsafe_arena_set_allocated_editor(
    std::string* editor) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (editor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  editor_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      editor, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileUploadRequest.editor)
}

// repeated .services.TileInfo tile = 2;
inline int TileUploadRequest::_internal_tile_size() const {
  return tile_.size();
}
inline int TileUploadRequest::tile_size() const {
  return _internal_tile_size();
}
inline void TileUploadRequest::clear_tile() {
  tile_.Clear();
}
inline ::services::TileInfo* TileUploadRequest::mutable_tile(int index) {
  // @@protoc_insertion_point(field_mutable:services.TileUploadRequest.tile)
  return tile_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >*
TileUploadRequest::mutable_tile() {
  // @@protoc_insertion_point(field_mutable_list:services.TileUploadRequest.tile)
  return &tile_;
}
inline const ::services::TileInfo& TileUploadRequest::_internal_tile(int index) const {
  return tile_.Get(index);
}
inline const ::services::TileInfo& TileUploadRequest::tile(int index) const {
  // @@protoc_insertion_point(field_get:services.TileUploadRequest.tile)
  return _internal_tile(index);
}
inline ::services::TileInfo* TileUploadRequest::_internal_add_tile() {
  return tile_.Add();
}
inline ::services::TileInfo* TileUploadRequest::add_tile() {
  // @@protoc_insertion_point(field_add:services.TileUploadRequest.tile)
  return _internal_add_tile();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >&
TileUploadRequest::tile() const {
  // @@protoc_insertion_point(field_list:services.TileUploadRequest.tile)
  return tile_;
}

// optional string branch = 3;
inline bool TileUploadRequest::_internal_has_branch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TileUploadRequest::has_branch() const {
  return _internal_has_branch();
}
inline void TileUploadRequest::clear_branch() {
  branch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TileUploadRequest::branch() const {
  // @@protoc_insertion_point(field_get:services.TileUploadRequest.branch)
  return _internal_branch();
}
inline void TileUploadRequest::set_branch(const std::string& value) {
  _internal_set_branch(value);
  // @@protoc_insertion_point(field_set:services.TileUploadRequest.branch)
}
inline std::string* TileUploadRequest::mutable_branch() {
  // @@protoc_insertion_point(field_mutable:services.TileUploadRequest.branch)
  return _internal_mutable_branch();
}
inline const std::string& TileUploadRequest::_internal_branch() const {
  return branch_.Get();
}
inline void TileUploadRequest::_internal_set_branch(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileUploadRequest::set_branch(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  branch_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileUploadRequest.branch)
}
inline void TileUploadRequest::set_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileUploadRequest.branch)
}
inline void TileUploadRequest::set_branch(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileUploadRequest.branch)
}
inline std::string* TileUploadRequest::_internal_mutable_branch() {
  _has_bits_[0] |= 0x00000002u;
  return branch_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileUploadRequest::release_branch() {
  // @@protoc_insertion_point(field_release:services.TileUploadRequest.branch)
  if (!_internal_has_branch()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return branch_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileUploadRequest::set_allocated_branch(std::string* branch) {
  if (branch != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  branch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileUploadRequest.branch)
}
inline std::string* TileUploadRequest::unsafe_arena_release_branch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileUploadRequest.branch)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return branch_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileUploadRequest::unsafe_arena_set_allocated_branch(
    std::string* branch) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (branch != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  branch_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      branch, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileUploadRequest.branch)
}

// optional string committer = 4;
inline bool TileUploadRequest::_internal_has_committer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TileUploadRequest::has_committer() const {
  return _internal_has_committer();
}
inline void TileUploadRequest::clear_committer() {
  committer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TileUploadRequest::committer() const {
  // @@protoc_insertion_point(field_get:services.TileUploadRequest.committer)
  return _internal_committer();
}
inline void TileUploadRequest::set_committer(const std::string& value) {
  _internal_set_committer(value);
  // @@protoc_insertion_point(field_set:services.TileUploadRequest.committer)
}
inline std::string* TileUploadRequest::mutable_committer() {
  // @@protoc_insertion_point(field_mutable:services.TileUploadRequest.committer)
  return _internal_mutable_committer();
}
inline const std::string& TileUploadRequest::_internal_committer() const {
  return committer_.Get();
}
inline void TileUploadRequest::_internal_set_committer(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  committer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileUploadRequest::set_committer(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  committer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileUploadRequest.committer)
}
inline void TileUploadRequest::set_committer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  committer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileUploadRequest.committer)
}
inline void TileUploadRequest::set_committer(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  committer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileUploadRequest.committer)
}
inline std::string* TileUploadRequest::_internal_mutable_committer() {
  _has_bits_[0] |= 0x00000004u;
  return committer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileUploadRequest::release_committer() {
  // @@protoc_insertion_point(field_release:services.TileUploadRequest.committer)
  if (!_internal_has_committer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return committer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileUploadRequest::set_allocated_committer(std::string* committer) {
  if (committer != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  committer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), committer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileUploadRequest.committer)
}
inline std::string* TileUploadRequest::unsafe_arena_release_committer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileUploadRequest.committer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return committer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileUploadRequest::unsafe_arena_set_allocated_committer(
    std::string* committer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (committer != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  committer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      committer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileUploadRequest.committer)
}

// optional bool allow_conflict = 7 [default = false];
inline bool TileUploadRequest::_internal_has_allow_conflict() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TileUploadRequest::has_allow_conflict() const {
  return _internal_has_allow_conflict();
}
inline void TileUploadRequest::clear_allow_conflict() {
  allow_conflict_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TileUploadRequest::_internal_allow_conflict() const {
  return allow_conflict_;
}
inline bool TileUploadRequest::allow_conflict() const {
  // @@protoc_insertion_point(field_get:services.TileUploadRequest.allow_conflict)
  return _internal_allow_conflict();
}
inline void TileUploadRequest::_internal_set_allow_conflict(bool value) {
  _has_bits_[0] |= 0x00000008u;
  allow_conflict_ = value;
}
inline void TileUploadRequest::set_allow_conflict(bool value) {
  _internal_set_allow_conflict(value);
  // @@protoc_insertion_point(field_set:services.TileUploadRequest.allow_conflict)
}

// optional bool elem_merge = 8;
inline bool TileUploadRequest::_internal_has_elem_merge() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TileUploadRequest::has_elem_merge() const {
  return _internal_has_elem_merge();
}
inline void TileUploadRequest::clear_elem_merge() {
  elem_merge_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TileUploadRequest::_internal_elem_merge() const {
  return elem_merge_;
}
inline bool TileUploadRequest::elem_merge() const {
  // @@protoc_insertion_point(field_get:services.TileUploadRequest.elem_merge)
  return _internal_elem_merge();
}
inline void TileUploadRequest::_internal_set_elem_merge(bool value) {
  _has_bits_[0] |= 0x00000010u;
  elem_merge_ = value;
}
inline void TileUploadRequest::set_elem_merge(bool value) {
  _internal_set_elem_merge(value);
  // @@protoc_insertion_point(field_set:services.TileUploadRequest.elem_merge)
}

// -------------------------------------------------------------------

// TileUploadResponse

// repeated .services.TileInfo tile = 1;
inline int TileUploadResponse::_internal_tile_size() const {
  return tile_.size();
}
inline int TileUploadResponse::tile_size() const {
  return _internal_tile_size();
}
inline void TileUploadResponse::clear_tile() {
  tile_.Clear();
}
inline ::services::TileInfo* TileUploadResponse::mutable_tile(int index) {
  // @@protoc_insertion_point(field_mutable:services.TileUploadResponse.tile)
  return tile_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >*
TileUploadResponse::mutable_tile() {
  // @@protoc_insertion_point(field_mutable_list:services.TileUploadResponse.tile)
  return &tile_;
}
inline const ::services::TileInfo& TileUploadResponse::_internal_tile(int index) const {
  return tile_.Get(index);
}
inline const ::services::TileInfo& TileUploadResponse::tile(int index) const {
  // @@protoc_insertion_point(field_get:services.TileUploadResponse.tile)
  return _internal_tile(index);
}
inline ::services::TileInfo* TileUploadResponse::_internal_add_tile() {
  return tile_.Add();
}
inline ::services::TileInfo* TileUploadResponse::add_tile() {
  // @@protoc_insertion_point(field_add:services.TileUploadResponse.tile)
  return _internal_add_tile();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >&
TileUploadResponse::tile() const {
  // @@protoc_insertion_point(field_list:services.TileUploadResponse.tile)
  return tile_;
}

// optional int64 read_ver = 4 [jstype = JS_STRING];
inline bool TileUploadResponse::_internal_has_read_ver() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TileUploadResponse::has_read_ver() const {
  return _internal_has_read_ver();
}
inline void TileUploadResponse::clear_read_ver() {
  read_ver_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileUploadResponse::_internal_read_ver() const {
  return read_ver_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileUploadResponse::read_ver() const {
  // @@protoc_insertion_point(field_get:services.TileUploadResponse.read_ver)
  return _internal_read_ver();
}
inline void TileUploadResponse::_internal_set_read_ver(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  read_ver_ = value;
}
inline void TileUploadResponse::set_read_ver(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_read_ver(value);
  // @@protoc_insertion_point(field_set:services.TileUploadResponse.read_ver)
}

// optional string branch = 5;
inline bool TileUploadResponse::_internal_has_branch() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileUploadResponse::has_branch() const {
  return _internal_has_branch();
}
inline void TileUploadResponse::clear_branch() {
  branch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TileUploadResponse::branch() const {
  // @@protoc_insertion_point(field_get:services.TileUploadResponse.branch)
  return _internal_branch();
}
inline void TileUploadResponse::set_branch(const std::string& value) {
  _internal_set_branch(value);
  // @@protoc_insertion_point(field_set:services.TileUploadResponse.branch)
}
inline std::string* TileUploadResponse::mutable_branch() {
  // @@protoc_insertion_point(field_mutable:services.TileUploadResponse.branch)
  return _internal_mutable_branch();
}
inline const std::string& TileUploadResponse::_internal_branch() const {
  return branch_.Get();
}
inline void TileUploadResponse::_internal_set_branch(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileUploadResponse::set_branch(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  branch_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileUploadResponse.branch)
}
inline void TileUploadResponse::set_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileUploadResponse.branch)
}
inline void TileUploadResponse::set_branch(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileUploadResponse.branch)
}
inline std::string* TileUploadResponse::_internal_mutable_branch() {
  _has_bits_[0] |= 0x00000001u;
  return branch_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileUploadResponse::release_branch() {
  // @@protoc_insertion_point(field_release:services.TileUploadResponse.branch)
  if (!_internal_has_branch()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return branch_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileUploadResponse::set_allocated_branch(std::string* branch) {
  if (branch != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  branch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileUploadResponse.branch)
}
inline std::string* TileUploadResponse::unsafe_arena_release_branch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileUploadResponse.branch)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return branch_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileUploadResponse::unsafe_arena_set_allocated_branch(
    std::string* branch) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (branch != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  branch_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      branch, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileUploadResponse.branch)
}

// optional .services.RoadServiceResponse ret = 6;
inline bool TileUploadResponse::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ret_ != nullptr);
  return value;
}
inline bool TileUploadResponse::has_ret() const {
  return _internal_has_ret();
}
inline void TileUploadResponse::clear_ret() {
  if (ret_ != nullptr) ret_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::services::RoadServiceResponse& TileUploadResponse::_internal_ret() const {
  const ::services::RoadServiceResponse* p = ret_;
  return p != nullptr ? *p : *reinterpret_cast<const ::services::RoadServiceResponse*>(
      &::services::_RoadServiceResponse_default_instance_);
}
inline const ::services::RoadServiceResponse& TileUploadResponse::ret() const {
  // @@protoc_insertion_point(field_get:services.TileUploadResponse.ret)
  return _internal_ret();
}
inline void TileUploadResponse::unsafe_arena_set_allocated_ret(
    ::services::RoadServiceResponse* ret) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ret_);
  }
  ret_ = ret;
  if (ret) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileUploadResponse.ret)
}
inline ::services::RoadServiceResponse* TileUploadResponse::release_ret() {
  auto temp = unsafe_arena_release_ret();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::services::RoadServiceResponse* TileUploadResponse::unsafe_arena_release_ret() {
  // @@protoc_insertion_point(field_release:services.TileUploadResponse.ret)
  _has_bits_[0] &= ~0x00000002u;
  ::services::RoadServiceResponse* temp = ret_;
  ret_ = nullptr;
  return temp;
}
inline ::services::RoadServiceResponse* TileUploadResponse::_internal_mutable_ret() {
  _has_bits_[0] |= 0x00000002u;
  if (ret_ == nullptr) {
    auto* p = CreateMaybeMessage<::services::RoadServiceResponse>(GetArena());
    ret_ = p;
  }
  return ret_;
}
inline ::services::RoadServiceResponse* TileUploadResponse::mutable_ret() {
  // @@protoc_insertion_point(field_mutable:services.TileUploadResponse.ret)
  return _internal_mutable_ret();
}
inline void TileUploadResponse::set_allocated_ret(::services::RoadServiceResponse* ret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ret_;
  }
  if (ret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ret);
    if (message_arena != submessage_arena) {
      ret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ret, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ret_ = ret;
  // @@protoc_insertion_point(field_set_allocated:services.TileUploadResponse.ret)
}

// -------------------------------------------------------------------

// TileDownloadRequest

// repeated int32 tile_id = 1;
inline int TileDownloadRequest::_internal_tile_id_size() const {
  return tile_id_.size();
}
inline int TileDownloadRequest::tile_id_size() const {
  return _internal_tile_id_size();
}
inline void TileDownloadRequest::clear_tile_id() {
  tile_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileDownloadRequest::_internal_tile_id(int index) const {
  return tile_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileDownloadRequest::tile_id(int index) const {
  // @@protoc_insertion_point(field_get:services.TileDownloadRequest.tile_id)
  return _internal_tile_id(index);
}
inline void TileDownloadRequest::set_tile_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  tile_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:services.TileDownloadRequest.tile_id)
}
inline void TileDownloadRequest::_internal_add_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  tile_id_.Add(value);
}
inline void TileDownloadRequest::add_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_tile_id(value);
  // @@protoc_insertion_point(field_add:services.TileDownloadRequest.tile_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TileDownloadRequest::_internal_tile_id() const {
  return tile_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TileDownloadRequest::tile_id() const {
  // @@protoc_insertion_point(field_list:services.TileDownloadRequest.tile_id)
  return _internal_tile_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TileDownloadRequest::_internal_mutable_tile_id() {
  return &tile_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TileDownloadRequest::mutable_tile_id() {
  // @@protoc_insertion_point(field_mutable_list:services.TileDownloadRequest.tile_id)
  return _internal_mutable_tile_id();
}

// optional string editor = 2;
inline bool TileDownloadRequest::_internal_has_editor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileDownloadRequest::has_editor() const {
  return _internal_has_editor();
}
inline void TileDownloadRequest::clear_editor() {
  editor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TileDownloadRequest::editor() const {
  // @@protoc_insertion_point(field_get:services.TileDownloadRequest.editor)
  return _internal_editor();
}
inline void TileDownloadRequest::set_editor(const std::string& value) {
  _internal_set_editor(value);
  // @@protoc_insertion_point(field_set:services.TileDownloadRequest.editor)
}
inline std::string* TileDownloadRequest::mutable_editor() {
  // @@protoc_insertion_point(field_mutable:services.TileDownloadRequest.editor)
  return _internal_mutable_editor();
}
inline const std::string& TileDownloadRequest::_internal_editor() const {
  return editor_.Get();
}
inline void TileDownloadRequest::_internal_set_editor(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileDownloadRequest::set_editor(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileDownloadRequest.editor)
}
inline void TileDownloadRequest::set_editor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileDownloadRequest.editor)
}
inline void TileDownloadRequest::set_editor(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileDownloadRequest.editor)
}
inline std::string* TileDownloadRequest::_internal_mutable_editor() {
  _has_bits_[0] |= 0x00000001u;
  return editor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileDownloadRequest::release_editor() {
  // @@protoc_insertion_point(field_release:services.TileDownloadRequest.editor)
  if (!_internal_has_editor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return editor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileDownloadRequest::set_allocated_editor(std::string* editor) {
  if (editor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  editor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), editor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileDownloadRequest.editor)
}
inline std::string* TileDownloadRequest::unsafe_arena_release_editor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileDownloadRequest.editor)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return editor_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileDownloadRequest::unsafe_arena_set_allocated_editor(
    std::string* editor) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (editor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  editor_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      editor, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileDownloadRequest.editor)
}

// optional int64 request_version = 3 [jstype = JS_STRING];
inline bool TileDownloadRequest::_internal_has_request_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TileDownloadRequest::has_request_version() const {
  return _internal_has_request_version();
}
inline void TileDownloadRequest::clear_request_version() {
  request_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileDownloadRequest::_internal_request_version() const {
  return request_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileDownloadRequest::request_version() const {
  // @@protoc_insertion_point(field_get:services.TileDownloadRequest.request_version)
  return _internal_request_version();
}
inline void TileDownloadRequest::_internal_set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  request_version_ = value;
}
inline void TileDownloadRequest::set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_request_version(value);
  // @@protoc_insertion_point(field_set:services.TileDownloadRequest.request_version)
}

// repeated int32 need_type = 4;
inline int TileDownloadRequest::_internal_need_type_size() const {
  return need_type_.size();
}
inline int TileDownloadRequest::need_type_size() const {
  return _internal_need_type_size();
}
inline void TileDownloadRequest::clear_need_type() {
  need_type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileDownloadRequest::_internal_need_type(int index) const {
  return need_type_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileDownloadRequest::need_type(int index) const {
  // @@protoc_insertion_point(field_get:services.TileDownloadRequest.need_type)
  return _internal_need_type(index);
}
inline void TileDownloadRequest::set_need_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  need_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:services.TileDownloadRequest.need_type)
}
inline void TileDownloadRequest::_internal_add_need_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  need_type_.Add(value);
}
inline void TileDownloadRequest::add_need_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_need_type(value);
  // @@protoc_insertion_point(field_add:services.TileDownloadRequest.need_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TileDownloadRequest::_internal_need_type() const {
  return need_type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TileDownloadRequest::need_type() const {
  // @@protoc_insertion_point(field_list:services.TileDownloadRequest.need_type)
  return _internal_need_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TileDownloadRequest::_internal_mutable_need_type() {
  return &need_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TileDownloadRequest::mutable_need_type() {
  // @@protoc_insertion_point(field_mutable_list:services.TileDownloadRequest.need_type)
  return _internal_mutable_need_type();
}

// optional string branch = 5;
inline bool TileDownloadRequest::_internal_has_branch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TileDownloadRequest::has_branch() const {
  return _internal_has_branch();
}
inline void TileDownloadRequest::clear_branch() {
  branch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TileDownloadRequest::branch() const {
  // @@protoc_insertion_point(field_get:services.TileDownloadRequest.branch)
  return _internal_branch();
}
inline void TileDownloadRequest::set_branch(const std::string& value) {
  _internal_set_branch(value);
  // @@protoc_insertion_point(field_set:services.TileDownloadRequest.branch)
}
inline std::string* TileDownloadRequest::mutable_branch() {
  // @@protoc_insertion_point(field_mutable:services.TileDownloadRequest.branch)
  return _internal_mutable_branch();
}
inline const std::string& TileDownloadRequest::_internal_branch() const {
  return branch_.Get();
}
inline void TileDownloadRequest::_internal_set_branch(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileDownloadRequest::set_branch(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  branch_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileDownloadRequest.branch)
}
inline void TileDownloadRequest::set_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileDownloadRequest.branch)
}
inline void TileDownloadRequest::set_branch(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileDownloadRequest.branch)
}
inline std::string* TileDownloadRequest::_internal_mutable_branch() {
  _has_bits_[0] |= 0x00000002u;
  return branch_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileDownloadRequest::release_branch() {
  // @@protoc_insertion_point(field_release:services.TileDownloadRequest.branch)
  if (!_internal_has_branch()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return branch_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileDownloadRequest::set_allocated_branch(std::string* branch) {
  if (branch != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  branch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileDownloadRequest.branch)
}
inline std::string* TileDownloadRequest::unsafe_arena_release_branch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileDownloadRequest.branch)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return branch_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileDownloadRequest::unsafe_arena_set_allocated_branch(
    std::string* branch) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (branch != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  branch_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      branch, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileDownloadRequest.branch)
}

// optional bool load_ref = 6;
inline bool TileDownloadRequest::_internal_has_load_ref() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TileDownloadRequest::has_load_ref() const {
  return _internal_has_load_ref();
}
inline void TileDownloadRequest::clear_load_ref() {
  load_ref_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TileDownloadRequest::_internal_load_ref() const {
  return load_ref_;
}
inline bool TileDownloadRequest::load_ref() const {
  // @@protoc_insertion_point(field_get:services.TileDownloadRequest.load_ref)
  return _internal_load_ref();
}
inline void TileDownloadRequest::_internal_set_load_ref(bool value) {
  _has_bits_[0] |= 0x00000008u;
  load_ref_ = value;
}
inline void TileDownloadRequest::set_load_ref(bool value) {
  _internal_set_load_ref(value);
  // @@protoc_insertion_point(field_set:services.TileDownloadRequest.load_ref)
}

// -------------------------------------------------------------------

// TileDownloadResponse

// repeated .services.TileInfo tile_info = 3;
inline int TileDownloadResponse::_internal_tile_info_size() const {
  return tile_info_.size();
}
inline int TileDownloadResponse::tile_info_size() const {
  return _internal_tile_info_size();
}
inline void TileDownloadResponse::clear_tile_info() {
  tile_info_.Clear();
}
inline ::services::TileInfo* TileDownloadResponse::mutable_tile_info(int index) {
  // @@protoc_insertion_point(field_mutable:services.TileDownloadResponse.tile_info)
  return tile_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >*
TileDownloadResponse::mutable_tile_info() {
  // @@protoc_insertion_point(field_mutable_list:services.TileDownloadResponse.tile_info)
  return &tile_info_;
}
inline const ::services::TileInfo& TileDownloadResponse::_internal_tile_info(int index) const {
  return tile_info_.Get(index);
}
inline const ::services::TileInfo& TileDownloadResponse::tile_info(int index) const {
  // @@protoc_insertion_point(field_get:services.TileDownloadResponse.tile_info)
  return _internal_tile_info(index);
}
inline ::services::TileInfo* TileDownloadResponse::_internal_add_tile_info() {
  return tile_info_.Add();
}
inline ::services::TileInfo* TileDownloadResponse::add_tile_info() {
  // @@protoc_insertion_point(field_add:services.TileDownloadResponse.tile_info)
  return _internal_add_tile_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >&
TileDownloadResponse::tile_info() const {
  // @@protoc_insertion_point(field_list:services.TileDownloadResponse.tile_info)
  return tile_info_;
}

// optional int64 editor_version = 5 [jstype = JS_STRING];
inline bool TileDownloadResponse::_internal_has_editor_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TileDownloadResponse::has_editor_version() const {
  return _internal_has_editor_version();
}
inline void TileDownloadResponse::clear_editor_version() {
  editor_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileDownloadResponse::_internal_editor_version() const {
  return editor_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileDownloadResponse::editor_version() const {
  // @@protoc_insertion_point(field_get:services.TileDownloadResponse.editor_version)
  return _internal_editor_version();
}
inline void TileDownloadResponse::_internal_set_editor_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  editor_version_ = value;
}
inline void TileDownloadResponse::set_editor_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_editor_version(value);
  // @@protoc_insertion_point(field_set:services.TileDownloadResponse.editor_version)
}

// optional string branch = 6;
inline bool TileDownloadResponse::_internal_has_branch() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileDownloadResponse::has_branch() const {
  return _internal_has_branch();
}
inline void TileDownloadResponse::clear_branch() {
  branch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TileDownloadResponse::branch() const {
  // @@protoc_insertion_point(field_get:services.TileDownloadResponse.branch)
  return _internal_branch();
}
inline void TileDownloadResponse::set_branch(const std::string& value) {
  _internal_set_branch(value);
  // @@protoc_insertion_point(field_set:services.TileDownloadResponse.branch)
}
inline std::string* TileDownloadResponse::mutable_branch() {
  // @@protoc_insertion_point(field_mutable:services.TileDownloadResponse.branch)
  return _internal_mutable_branch();
}
inline const std::string& TileDownloadResponse::_internal_branch() const {
  return branch_.Get();
}
inline void TileDownloadResponse::_internal_set_branch(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileDownloadResponse::set_branch(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  branch_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileDownloadResponse.branch)
}
inline void TileDownloadResponse::set_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileDownloadResponse.branch)
}
inline void TileDownloadResponse::set_branch(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileDownloadResponse.branch)
}
inline std::string* TileDownloadResponse::_internal_mutable_branch() {
  _has_bits_[0] |= 0x00000001u;
  return branch_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileDownloadResponse::release_branch() {
  // @@protoc_insertion_point(field_release:services.TileDownloadResponse.branch)
  if (!_internal_has_branch()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return branch_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileDownloadResponse::set_allocated_branch(std::string* branch) {
  if (branch != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  branch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileDownloadResponse.branch)
}
inline std::string* TileDownloadResponse::unsafe_arena_release_branch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileDownloadResponse.branch)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return branch_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileDownloadResponse::unsafe_arena_set_allocated_branch(
    std::string* branch) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (branch != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  branch_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      branch, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileDownloadResponse.branch)
}

// optional .services.RoadServiceResponse ret = 8;
inline bool TileDownloadResponse::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ret_ != nullptr);
  return value;
}
inline bool TileDownloadResponse::has_ret() const {
  return _internal_has_ret();
}
inline void TileDownloadResponse::clear_ret() {
  if (ret_ != nullptr) ret_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::services::RoadServiceResponse& TileDownloadResponse::_internal_ret() const {
  const ::services::RoadServiceResponse* p = ret_;
  return p != nullptr ? *p : *reinterpret_cast<const ::services::RoadServiceResponse*>(
      &::services::_RoadServiceResponse_default_instance_);
}
inline const ::services::RoadServiceResponse& TileDownloadResponse::ret() const {
  // @@protoc_insertion_point(field_get:services.TileDownloadResponse.ret)
  return _internal_ret();
}
inline void TileDownloadResponse::unsafe_arena_set_allocated_ret(
    ::services::RoadServiceResponse* ret) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ret_);
  }
  ret_ = ret;
  if (ret) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileDownloadResponse.ret)
}
inline ::services::RoadServiceResponse* TileDownloadResponse::release_ret() {
  auto temp = unsafe_arena_release_ret();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::services::RoadServiceResponse* TileDownloadResponse::unsafe_arena_release_ret() {
  // @@protoc_insertion_point(field_release:services.TileDownloadResponse.ret)
  _has_bits_[0] &= ~0x00000002u;
  ::services::RoadServiceResponse* temp = ret_;
  ret_ = nullptr;
  return temp;
}
inline ::services::RoadServiceResponse* TileDownloadResponse::_internal_mutable_ret() {
  _has_bits_[0] |= 0x00000002u;
  if (ret_ == nullptr) {
    auto* p = CreateMaybeMessage<::services::RoadServiceResponse>(GetArena());
    ret_ = p;
  }
  return ret_;
}
inline ::services::RoadServiceResponse* TileDownloadResponse::mutable_ret() {
  // @@protoc_insertion_point(field_mutable:services.TileDownloadResponse.ret)
  return _internal_mutable_ret();
}
inline void TileDownloadResponse::set_allocated_ret(::services::RoadServiceResponse* ret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ret_;
  }
  if (ret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ret);
    if (message_arena != submessage_arena) {
      ret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ret, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ret_ = ret;
  // @@protoc_insertion_point(field_set_allocated:services.TileDownloadResponse.ret)
}

// -------------------------------------------------------------------

// TileMergeRequest

// repeated int32 tile_id = 1;
inline int TileMergeRequest::_internal_tile_id_size() const {
  return tile_id_.size();
}
inline int TileMergeRequest::tile_id_size() const {
  return _internal_tile_id_size();
}
inline void TileMergeRequest::clear_tile_id() {
  tile_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileMergeRequest::_internal_tile_id(int index) const {
  return tile_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileMergeRequest::tile_id(int index) const {
  // @@protoc_insertion_point(field_get:services.TileMergeRequest.tile_id)
  return _internal_tile_id(index);
}
inline void TileMergeRequest::set_tile_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  tile_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:services.TileMergeRequest.tile_id)
}
inline void TileMergeRequest::_internal_add_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  tile_id_.Add(value);
}
inline void TileMergeRequest::add_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_tile_id(value);
  // @@protoc_insertion_point(field_add:services.TileMergeRequest.tile_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TileMergeRequest::_internal_tile_id() const {
  return tile_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TileMergeRequest::tile_id() const {
  // @@protoc_insertion_point(field_list:services.TileMergeRequest.tile_id)
  return _internal_tile_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TileMergeRequest::_internal_mutable_tile_id() {
  return &tile_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TileMergeRequest::mutable_tile_id() {
  // @@protoc_insertion_point(field_mutable_list:services.TileMergeRequest.tile_id)
  return _internal_mutable_tile_id();
}

// optional string editor = 2;
inline bool TileMergeRequest::_internal_has_editor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileMergeRequest::has_editor() const {
  return _internal_has_editor();
}
inline void TileMergeRequest::clear_editor() {
  editor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TileMergeRequest::editor() const {
  // @@protoc_insertion_point(field_get:services.TileMergeRequest.editor)
  return _internal_editor();
}
inline void TileMergeRequest::set_editor(const std::string& value) {
  _internal_set_editor(value);
  // @@protoc_insertion_point(field_set:services.TileMergeRequest.editor)
}
inline std::string* TileMergeRequest::mutable_editor() {
  // @@protoc_insertion_point(field_mutable:services.TileMergeRequest.editor)
  return _internal_mutable_editor();
}
inline const std::string& TileMergeRequest::_internal_editor() const {
  return editor_.Get();
}
inline void TileMergeRequest::_internal_set_editor(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileMergeRequest::set_editor(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileMergeRequest.editor)
}
inline void TileMergeRequest::set_editor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileMergeRequest.editor)
}
inline void TileMergeRequest::set_editor(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileMergeRequest.editor)
}
inline std::string* TileMergeRequest::_internal_mutable_editor() {
  _has_bits_[0] |= 0x00000001u;
  return editor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileMergeRequest::release_editor() {
  // @@protoc_insertion_point(field_release:services.TileMergeRequest.editor)
  if (!_internal_has_editor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return editor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileMergeRequest::set_allocated_editor(std::string* editor) {
  if (editor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  editor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), editor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileMergeRequest.editor)
}
inline std::string* TileMergeRequest::unsafe_arena_release_editor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileMergeRequest.editor)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return editor_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileMergeRequest::unsafe_arena_set_allocated_editor(
    std::string* editor) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (editor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  editor_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      editor, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileMergeRequest.editor)
}

// optional int64 request_version = 3 [jstype = JS_STRING];
inline bool TileMergeRequest::_internal_has_request_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TileMergeRequest::has_request_version() const {
  return _internal_has_request_version();
}
inline void TileMergeRequest::clear_request_version() {
  request_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileMergeRequest::_internal_request_version() const {
  return request_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileMergeRequest::request_version() const {
  // @@protoc_insertion_point(field_get:services.TileMergeRequest.request_version)
  return _internal_request_version();
}
inline void TileMergeRequest::_internal_set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  request_version_ = value;
}
inline void TileMergeRequest::set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_request_version(value);
  // @@protoc_insertion_point(field_set:services.TileMergeRequest.request_version)
}

// repeated int32 need_type = 4;
inline int TileMergeRequest::_internal_need_type_size() const {
  return need_type_.size();
}
inline int TileMergeRequest::need_type_size() const {
  return _internal_need_type_size();
}
inline void TileMergeRequest::clear_need_type() {
  need_type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileMergeRequest::_internal_need_type(int index) const {
  return need_type_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileMergeRequest::need_type(int index) const {
  // @@protoc_insertion_point(field_get:services.TileMergeRequest.need_type)
  return _internal_need_type(index);
}
inline void TileMergeRequest::set_need_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  need_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:services.TileMergeRequest.need_type)
}
inline void TileMergeRequest::_internal_add_need_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  need_type_.Add(value);
}
inline void TileMergeRequest::add_need_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_need_type(value);
  // @@protoc_insertion_point(field_add:services.TileMergeRequest.need_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TileMergeRequest::_internal_need_type() const {
  return need_type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TileMergeRequest::need_type() const {
  // @@protoc_insertion_point(field_list:services.TileMergeRequest.need_type)
  return _internal_need_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TileMergeRequest::_internal_mutable_need_type() {
  return &need_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TileMergeRequest::mutable_need_type() {
  // @@protoc_insertion_point(field_mutable_list:services.TileMergeRequest.need_type)
  return _internal_mutable_need_type();
}

// optional string src_branch = 5;
inline bool TileMergeRequest::_internal_has_src_branch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TileMergeRequest::has_src_branch() const {
  return _internal_has_src_branch();
}
inline void TileMergeRequest::clear_src_branch() {
  src_branch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TileMergeRequest::src_branch() const {
  // @@protoc_insertion_point(field_get:services.TileMergeRequest.src_branch)
  return _internal_src_branch();
}
inline void TileMergeRequest::set_src_branch(const std::string& value) {
  _internal_set_src_branch(value);
  // @@protoc_insertion_point(field_set:services.TileMergeRequest.src_branch)
}
inline std::string* TileMergeRequest::mutable_src_branch() {
  // @@protoc_insertion_point(field_mutable:services.TileMergeRequest.src_branch)
  return _internal_mutable_src_branch();
}
inline const std::string& TileMergeRequest::_internal_src_branch() const {
  return src_branch_.Get();
}
inline void TileMergeRequest::_internal_set_src_branch(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  src_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileMergeRequest::set_src_branch(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  src_branch_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileMergeRequest.src_branch)
}
inline void TileMergeRequest::set_src_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  src_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileMergeRequest.src_branch)
}
inline void TileMergeRequest::set_src_branch(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  src_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileMergeRequest.src_branch)
}
inline std::string* TileMergeRequest::_internal_mutable_src_branch() {
  _has_bits_[0] |= 0x00000002u;
  return src_branch_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileMergeRequest::release_src_branch() {
  // @@protoc_insertion_point(field_release:services.TileMergeRequest.src_branch)
  if (!_internal_has_src_branch()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return src_branch_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileMergeRequest::set_allocated_src_branch(std::string* src_branch) {
  if (src_branch != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  src_branch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_branch,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileMergeRequest.src_branch)
}
inline std::string* TileMergeRequest::unsafe_arena_release_src_branch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileMergeRequest.src_branch)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return src_branch_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileMergeRequest::unsafe_arena_set_allocated_src_branch(
    std::string* src_branch) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (src_branch != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  src_branch_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      src_branch, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileMergeRequest.src_branch)
}

// optional string dst_branch = 6;
inline bool TileMergeRequest::_internal_has_dst_branch() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TileMergeRequest::has_dst_branch() const {
  return _internal_has_dst_branch();
}
inline void TileMergeRequest::clear_dst_branch() {
  dst_branch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TileMergeRequest::dst_branch() const {
  // @@protoc_insertion_point(field_get:services.TileMergeRequest.dst_branch)
  return _internal_dst_branch();
}
inline void TileMergeRequest::set_dst_branch(const std::string& value) {
  _internal_set_dst_branch(value);
  // @@protoc_insertion_point(field_set:services.TileMergeRequest.dst_branch)
}
inline std::string* TileMergeRequest::mutable_dst_branch() {
  // @@protoc_insertion_point(field_mutable:services.TileMergeRequest.dst_branch)
  return _internal_mutable_dst_branch();
}
inline const std::string& TileMergeRequest::_internal_dst_branch() const {
  return dst_branch_.Get();
}
inline void TileMergeRequest::_internal_set_dst_branch(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  dst_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileMergeRequest::set_dst_branch(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  dst_branch_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileMergeRequest.dst_branch)
}
inline void TileMergeRequest::set_dst_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  dst_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileMergeRequest.dst_branch)
}
inline void TileMergeRequest::set_dst_branch(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  dst_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileMergeRequest.dst_branch)
}
inline std::string* TileMergeRequest::_internal_mutable_dst_branch() {
  _has_bits_[0] |= 0x00000004u;
  return dst_branch_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileMergeRequest::release_dst_branch() {
  // @@protoc_insertion_point(field_release:services.TileMergeRequest.dst_branch)
  if (!_internal_has_dst_branch()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return dst_branch_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileMergeRequest::set_allocated_dst_branch(std::string* dst_branch) {
  if (dst_branch != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dst_branch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_branch,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileMergeRequest.dst_branch)
}
inline std::string* TileMergeRequest::unsafe_arena_release_dst_branch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileMergeRequest.dst_branch)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return dst_branch_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileMergeRequest::unsafe_arena_set_allocated_dst_branch(
    std::string* dst_branch) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dst_branch != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dst_branch_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dst_branch, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileMergeRequest.dst_branch)
}

// optional bool editable_only = 7;
inline bool TileMergeRequest::_internal_has_editable_only() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TileMergeRequest::has_editable_only() const {
  return _internal_has_editable_only();
}
inline void TileMergeRequest::clear_editable_only() {
  editable_only_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TileMergeRequest::_internal_editable_only() const {
  return editable_only_;
}
inline bool TileMergeRequest::editable_only() const {
  // @@protoc_insertion_point(field_get:services.TileMergeRequest.editable_only)
  return _internal_editable_only();
}
inline void TileMergeRequest::_internal_set_editable_only(bool value) {
  _has_bits_[0] |= 0x00000020u;
  editable_only_ = value;
}
inline void TileMergeRequest::set_editable_only(bool value) {
  _internal_set_editable_only(value);
  // @@protoc_insertion_point(field_set:services.TileMergeRequest.editable_only)
}

// optional int64 src_version = 8;
inline bool TileMergeRequest::_internal_has_src_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TileMergeRequest::has_src_version() const {
  return _internal_has_src_version();
}
inline void TileMergeRequest::clear_src_version() {
  src_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileMergeRequest::_internal_src_version() const {
  return src_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileMergeRequest::src_version() const {
  // @@protoc_insertion_point(field_get:services.TileMergeRequest.src_version)
  return _internal_src_version();
}
inline void TileMergeRequest::_internal_set_src_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  src_version_ = value;
}
inline void TileMergeRequest::set_src_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_src_version(value);
  // @@protoc_insertion_point(field_set:services.TileMergeRequest.src_version)
}

// optional bool allow_conflict = 9 [default = true];
inline bool TileMergeRequest::_internal_has_allow_conflict() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TileMergeRequest::has_allow_conflict() const {
  return _internal_has_allow_conflict();
}
inline void TileMergeRequest::clear_allow_conflict() {
  allow_conflict_ = true;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TileMergeRequest::_internal_allow_conflict() const {
  return allow_conflict_;
}
inline bool TileMergeRequest::allow_conflict() const {
  // @@protoc_insertion_point(field_get:services.TileMergeRequest.allow_conflict)
  return _internal_allow_conflict();
}
inline void TileMergeRequest::_internal_set_allow_conflict(bool value) {
  _has_bits_[0] |= 0x00000040u;
  allow_conflict_ = value;
}
inline void TileMergeRequest::set_allow_conflict(bool value) {
  _internal_set_allow_conflict(value);
  // @@protoc_insertion_point(field_set:services.TileMergeRequest.allow_conflict)
}

// -------------------------------------------------------------------

// TileMergeResponse

// repeated .services.TileInfo tile_info = 3;
inline int TileMergeResponse::_internal_tile_info_size() const {
  return tile_info_.size();
}
inline int TileMergeResponse::tile_info_size() const {
  return _internal_tile_info_size();
}
inline void TileMergeResponse::clear_tile_info() {
  tile_info_.Clear();
}
inline ::services::TileInfo* TileMergeResponse::mutable_tile_info(int index) {
  // @@protoc_insertion_point(field_mutable:services.TileMergeResponse.tile_info)
  return tile_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >*
TileMergeResponse::mutable_tile_info() {
  // @@protoc_insertion_point(field_mutable_list:services.TileMergeResponse.tile_info)
  return &tile_info_;
}
inline const ::services::TileInfo& TileMergeResponse::_internal_tile_info(int index) const {
  return tile_info_.Get(index);
}
inline const ::services::TileInfo& TileMergeResponse::tile_info(int index) const {
  // @@protoc_insertion_point(field_get:services.TileMergeResponse.tile_info)
  return _internal_tile_info(index);
}
inline ::services::TileInfo* TileMergeResponse::_internal_add_tile_info() {
  return tile_info_.Add();
}
inline ::services::TileInfo* TileMergeResponse::add_tile_info() {
  // @@protoc_insertion_point(field_add:services.TileMergeResponse.tile_info)
  return _internal_add_tile_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >&
TileMergeResponse::tile_info() const {
  // @@protoc_insertion_point(field_list:services.TileMergeResponse.tile_info)
  return tile_info_;
}

// optional int64 editor_version = 5 [jstype = JS_STRING];
inline bool TileMergeResponse::_internal_has_editor_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TileMergeResponse::has_editor_version() const {
  return _internal_has_editor_version();
}
inline void TileMergeResponse::clear_editor_version() {
  editor_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileMergeResponse::_internal_editor_version() const {
  return editor_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileMergeResponse::editor_version() const {
  // @@protoc_insertion_point(field_get:services.TileMergeResponse.editor_version)
  return _internal_editor_version();
}
inline void TileMergeResponse::_internal_set_editor_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  editor_version_ = value;
}
inline void TileMergeResponse::set_editor_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_editor_version(value);
  // @@protoc_insertion_point(field_set:services.TileMergeResponse.editor_version)
}

// optional string dst_branch = 6;
inline bool TileMergeResponse::_internal_has_dst_branch() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileMergeResponse::has_dst_branch() const {
  return _internal_has_dst_branch();
}
inline void TileMergeResponse::clear_dst_branch() {
  dst_branch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TileMergeResponse::dst_branch() const {
  // @@protoc_insertion_point(field_get:services.TileMergeResponse.dst_branch)
  return _internal_dst_branch();
}
inline void TileMergeResponse::set_dst_branch(const std::string& value) {
  _internal_set_dst_branch(value);
  // @@protoc_insertion_point(field_set:services.TileMergeResponse.dst_branch)
}
inline std::string* TileMergeResponse::mutable_dst_branch() {
  // @@protoc_insertion_point(field_mutable:services.TileMergeResponse.dst_branch)
  return _internal_mutable_dst_branch();
}
inline const std::string& TileMergeResponse::_internal_dst_branch() const {
  return dst_branch_.Get();
}
inline void TileMergeResponse::_internal_set_dst_branch(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dst_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileMergeResponse::set_dst_branch(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  dst_branch_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileMergeResponse.dst_branch)
}
inline void TileMergeResponse::set_dst_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  dst_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileMergeResponse.dst_branch)
}
inline void TileMergeResponse::set_dst_branch(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  dst_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileMergeResponse.dst_branch)
}
inline std::string* TileMergeResponse::_internal_mutable_dst_branch() {
  _has_bits_[0] |= 0x00000001u;
  return dst_branch_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileMergeResponse::release_dst_branch() {
  // @@protoc_insertion_point(field_release:services.TileMergeResponse.dst_branch)
  if (!_internal_has_dst_branch()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return dst_branch_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileMergeResponse::set_allocated_dst_branch(std::string* dst_branch) {
  if (dst_branch != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dst_branch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_branch,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileMergeResponse.dst_branch)
}
inline std::string* TileMergeResponse::unsafe_arena_release_dst_branch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileMergeResponse.dst_branch)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return dst_branch_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileMergeResponse::unsafe_arena_set_allocated_dst_branch(
    std::string* dst_branch) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dst_branch != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dst_branch_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dst_branch, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileMergeResponse.dst_branch)
}

// optional .services.RoadServiceResponse ret = 8;
inline bool TileMergeResponse::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ret_ != nullptr);
  return value;
}
inline bool TileMergeResponse::has_ret() const {
  return _internal_has_ret();
}
inline void TileMergeResponse::clear_ret() {
  if (ret_ != nullptr) ret_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::services::RoadServiceResponse& TileMergeResponse::_internal_ret() const {
  const ::services::RoadServiceResponse* p = ret_;
  return p != nullptr ? *p : *reinterpret_cast<const ::services::RoadServiceResponse*>(
      &::services::_RoadServiceResponse_default_instance_);
}
inline const ::services::RoadServiceResponse& TileMergeResponse::ret() const {
  // @@protoc_insertion_point(field_get:services.TileMergeResponse.ret)
  return _internal_ret();
}
inline void TileMergeResponse::unsafe_arena_set_allocated_ret(
    ::services::RoadServiceResponse* ret) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ret_);
  }
  ret_ = ret;
  if (ret) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileMergeResponse.ret)
}
inline ::services::RoadServiceResponse* TileMergeResponse::release_ret() {
  auto temp = unsafe_arena_release_ret();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::services::RoadServiceResponse* TileMergeResponse::unsafe_arena_release_ret() {
  // @@protoc_insertion_point(field_release:services.TileMergeResponse.ret)
  _has_bits_[0] &= ~0x00000002u;
  ::services::RoadServiceResponse* temp = ret_;
  ret_ = nullptr;
  return temp;
}
inline ::services::RoadServiceResponse* TileMergeResponse::_internal_mutable_ret() {
  _has_bits_[0] |= 0x00000002u;
  if (ret_ == nullptr) {
    auto* p = CreateMaybeMessage<::services::RoadServiceResponse>(GetArena());
    ret_ = p;
  }
  return ret_;
}
inline ::services::RoadServiceResponse* TileMergeResponse::mutable_ret() {
  // @@protoc_insertion_point(field_mutable:services.TileMergeResponse.ret)
  return _internal_mutable_ret();
}
inline void TileMergeResponse::set_allocated_ret(::services::RoadServiceResponse* ret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ret_;
  }
  if (ret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ret);
    if (message_arena != submessage_arena) {
      ret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ret, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ret_ = ret;
  // @@protoc_insertion_point(field_set_allocated:services.TileMergeResponse.ret)
}

// -------------------------------------------------------------------

// TileRevertRequest

// repeated int32 tile_id = 1;
inline int TileRevertRequest::_internal_tile_id_size() const {
  return tile_id_.size();
}
inline int TileRevertRequest::tile_id_size() const {
  return _internal_tile_id_size();
}
inline void TileRevertRequest::clear_tile_id() {
  tile_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileRevertRequest::_internal_tile_id(int index) const {
  return tile_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileRevertRequest::tile_id(int index) const {
  // @@protoc_insertion_point(field_get:services.TileRevertRequest.tile_id)
  return _internal_tile_id(index);
}
inline void TileRevertRequest::set_tile_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  tile_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:services.TileRevertRequest.tile_id)
}
inline void TileRevertRequest::_internal_add_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  tile_id_.Add(value);
}
inline void TileRevertRequest::add_tile_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_tile_id(value);
  // @@protoc_insertion_point(field_add:services.TileRevertRequest.tile_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TileRevertRequest::_internal_tile_id() const {
  return tile_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TileRevertRequest::tile_id() const {
  // @@protoc_insertion_point(field_list:services.TileRevertRequest.tile_id)
  return _internal_tile_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TileRevertRequest::_internal_mutable_tile_id() {
  return &tile_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TileRevertRequest::mutable_tile_id() {
  // @@protoc_insertion_point(field_mutable_list:services.TileRevertRequest.tile_id)
  return _internal_mutable_tile_id();
}

// optional string editor = 2;
inline bool TileRevertRequest::_internal_has_editor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileRevertRequest::has_editor() const {
  return _internal_has_editor();
}
inline void TileRevertRequest::clear_editor() {
  editor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TileRevertRequest::editor() const {
  // @@protoc_insertion_point(field_get:services.TileRevertRequest.editor)
  return _internal_editor();
}
inline void TileRevertRequest::set_editor(const std::string& value) {
  _internal_set_editor(value);
  // @@protoc_insertion_point(field_set:services.TileRevertRequest.editor)
}
inline std::string* TileRevertRequest::mutable_editor() {
  // @@protoc_insertion_point(field_mutable:services.TileRevertRequest.editor)
  return _internal_mutable_editor();
}
inline const std::string& TileRevertRequest::_internal_editor() const {
  return editor_.Get();
}
inline void TileRevertRequest::_internal_set_editor(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileRevertRequest::set_editor(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileRevertRequest.editor)
}
inline void TileRevertRequest::set_editor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileRevertRequest.editor)
}
inline void TileRevertRequest::set_editor(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  editor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileRevertRequest.editor)
}
inline std::string* TileRevertRequest::_internal_mutable_editor() {
  _has_bits_[0] |= 0x00000001u;
  return editor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileRevertRequest::release_editor() {
  // @@protoc_insertion_point(field_release:services.TileRevertRequest.editor)
  if (!_internal_has_editor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return editor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileRevertRequest::set_allocated_editor(std::string* editor) {
  if (editor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  editor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), editor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileRevertRequest.editor)
}
inline std::string* TileRevertRequest::unsafe_arena_release_editor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileRevertRequest.editor)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return editor_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileRevertRequest::unsafe_arena_set_allocated_editor(
    std::string* editor) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (editor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  editor_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      editor, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileRevertRequest.editor)
}

// optional int64 request_version = 3 [jstype = JS_STRING];
inline bool TileRevertRequest::_internal_has_request_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TileRevertRequest::has_request_version() const {
  return _internal_has_request_version();
}
inline void TileRevertRequest::clear_request_version() {
  request_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileRevertRequest::_internal_request_version() const {
  return request_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileRevertRequest::request_version() const {
  // @@protoc_insertion_point(field_get:services.TileRevertRequest.request_version)
  return _internal_request_version();
}
inline void TileRevertRequest::_internal_set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  request_version_ = value;
}
inline void TileRevertRequest::set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_request_version(value);
  // @@protoc_insertion_point(field_set:services.TileRevertRequest.request_version)
}

// repeated int32 need_type = 4;
inline int TileRevertRequest::_internal_need_type_size() const {
  return need_type_.size();
}
inline int TileRevertRequest::need_type_size() const {
  return _internal_need_type_size();
}
inline void TileRevertRequest::clear_need_type() {
  need_type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileRevertRequest::_internal_need_type(int index) const {
  return need_type_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileRevertRequest::need_type(int index) const {
  // @@protoc_insertion_point(field_get:services.TileRevertRequest.need_type)
  return _internal_need_type(index);
}
inline void TileRevertRequest::set_need_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  need_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:services.TileRevertRequest.need_type)
}
inline void TileRevertRequest::_internal_add_need_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  need_type_.Add(value);
}
inline void TileRevertRequest::add_need_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_need_type(value);
  // @@protoc_insertion_point(field_add:services.TileRevertRequest.need_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TileRevertRequest::_internal_need_type() const {
  return need_type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TileRevertRequest::need_type() const {
  // @@protoc_insertion_point(field_list:services.TileRevertRequest.need_type)
  return _internal_need_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TileRevertRequest::_internal_mutable_need_type() {
  return &need_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TileRevertRequest::mutable_need_type() {
  // @@protoc_insertion_point(field_mutable_list:services.TileRevertRequest.need_type)
  return _internal_mutable_need_type();
}

// optional string branch = 5;
inline bool TileRevertRequest::_internal_has_branch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TileRevertRequest::has_branch() const {
  return _internal_has_branch();
}
inline void TileRevertRequest::clear_branch() {
  branch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TileRevertRequest::branch() const {
  // @@protoc_insertion_point(field_get:services.TileRevertRequest.branch)
  return _internal_branch();
}
inline void TileRevertRequest::set_branch(const std::string& value) {
  _internal_set_branch(value);
  // @@protoc_insertion_point(field_set:services.TileRevertRequest.branch)
}
inline std::string* TileRevertRequest::mutable_branch() {
  // @@protoc_insertion_point(field_mutable:services.TileRevertRequest.branch)
  return _internal_mutable_branch();
}
inline const std::string& TileRevertRequest::_internal_branch() const {
  return branch_.Get();
}
inline void TileRevertRequest::_internal_set_branch(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileRevertRequest::set_branch(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  branch_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileRevertRequest.branch)
}
inline void TileRevertRequest::set_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileRevertRequest.branch)
}
inline void TileRevertRequest::set_branch(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileRevertRequest.branch)
}
inline std::string* TileRevertRequest::_internal_mutable_branch() {
  _has_bits_[0] |= 0x00000002u;
  return branch_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileRevertRequest::release_branch() {
  // @@protoc_insertion_point(field_release:services.TileRevertRequest.branch)
  if (!_internal_has_branch()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return branch_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileRevertRequest::set_allocated_branch(std::string* branch) {
  if (branch != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  branch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileRevertRequest.branch)
}
inline std::string* TileRevertRequest::unsafe_arena_release_branch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileRevertRequest.branch)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return branch_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileRevertRequest::unsafe_arena_set_allocated_branch(
    std::string* branch) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (branch != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  branch_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      branch, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileRevertRequest.branch)
}

// optional bool editable_only = 6;
inline bool TileRevertRequest::_internal_has_editable_only() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TileRevertRequest::has_editable_only() const {
  return _internal_has_editable_only();
}
inline void TileRevertRequest::clear_editable_only() {
  editable_only_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TileRevertRequest::_internal_editable_only() const {
  return editable_only_;
}
inline bool TileRevertRequest::editable_only() const {
  // @@protoc_insertion_point(field_get:services.TileRevertRequest.editable_only)
  return _internal_editable_only();
}
inline void TileRevertRequest::_internal_set_editable_only(bool value) {
  _has_bits_[0] |= 0x00000008u;
  editable_only_ = value;
}
inline void TileRevertRequest::set_editable_only(bool value) {
  _internal_set_editable_only(value);
  // @@protoc_insertion_point(field_set:services.TileRevertRequest.editable_only)
}

// -------------------------------------------------------------------

// TileRevertResponse

// repeated .services.TileInfo tile_info = 3;
inline int TileRevertResponse::_internal_tile_info_size() const {
  return tile_info_.size();
}
inline int TileRevertResponse::tile_info_size() const {
  return _internal_tile_info_size();
}
inline void TileRevertResponse::clear_tile_info() {
  tile_info_.Clear();
}
inline ::services::TileInfo* TileRevertResponse::mutable_tile_info(int index) {
  // @@protoc_insertion_point(field_mutable:services.TileRevertResponse.tile_info)
  return tile_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >*
TileRevertResponse::mutable_tile_info() {
  // @@protoc_insertion_point(field_mutable_list:services.TileRevertResponse.tile_info)
  return &tile_info_;
}
inline const ::services::TileInfo& TileRevertResponse::_internal_tile_info(int index) const {
  return tile_info_.Get(index);
}
inline const ::services::TileInfo& TileRevertResponse::tile_info(int index) const {
  // @@protoc_insertion_point(field_get:services.TileRevertResponse.tile_info)
  return _internal_tile_info(index);
}
inline ::services::TileInfo* TileRevertResponse::_internal_add_tile_info() {
  return tile_info_.Add();
}
inline ::services::TileInfo* TileRevertResponse::add_tile_info() {
  // @@protoc_insertion_point(field_add:services.TileRevertResponse.tile_info)
  return _internal_add_tile_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::services::TileInfo >&
TileRevertResponse::tile_info() const {
  // @@protoc_insertion_point(field_list:services.TileRevertResponse.tile_info)
  return tile_info_;
}

// optional int64 editor_version = 5 [jstype = JS_STRING];
inline bool TileRevertResponse::_internal_has_editor_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TileRevertResponse::has_editor_version() const {
  return _internal_has_editor_version();
}
inline void TileRevertResponse::clear_editor_version() {
  editor_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileRevertResponse::_internal_editor_version() const {
  return editor_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileRevertResponse::editor_version() const {
  // @@protoc_insertion_point(field_get:services.TileRevertResponse.editor_version)
  return _internal_editor_version();
}
inline void TileRevertResponse::_internal_set_editor_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  editor_version_ = value;
}
inline void TileRevertResponse::set_editor_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_editor_version(value);
  // @@protoc_insertion_point(field_set:services.TileRevertResponse.editor_version)
}

// optional string branch = 6;
inline bool TileRevertResponse::_internal_has_branch() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileRevertResponse::has_branch() const {
  return _internal_has_branch();
}
inline void TileRevertResponse::clear_branch() {
  branch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TileRevertResponse::branch() const {
  // @@protoc_insertion_point(field_get:services.TileRevertResponse.branch)
  return _internal_branch();
}
inline void TileRevertResponse::set_branch(const std::string& value) {
  _internal_set_branch(value);
  // @@protoc_insertion_point(field_set:services.TileRevertResponse.branch)
}
inline std::string* TileRevertResponse::mutable_branch() {
  // @@protoc_insertion_point(field_mutable:services.TileRevertResponse.branch)
  return _internal_mutable_branch();
}
inline const std::string& TileRevertResponse::_internal_branch() const {
  return branch_.Get();
}
inline void TileRevertResponse::_internal_set_branch(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TileRevertResponse::set_branch(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  branch_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:services.TileRevertResponse.branch)
}
inline void TileRevertResponse::set_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:services.TileRevertResponse.branch)
}
inline void TileRevertResponse::set_branch(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:services.TileRevertResponse.branch)
}
inline std::string* TileRevertResponse::_internal_mutable_branch() {
  _has_bits_[0] |= 0x00000001u;
  return branch_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TileRevertResponse::release_branch() {
  // @@protoc_insertion_point(field_release:services.TileRevertResponse.branch)
  if (!_internal_has_branch()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return branch_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileRevertResponse::set_allocated_branch(std::string* branch) {
  if (branch != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  branch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:services.TileRevertResponse.branch)
}
inline std::string* TileRevertResponse::unsafe_arena_release_branch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:services.TileRevertResponse.branch)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return branch_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TileRevertResponse::unsafe_arena_set_allocated_branch(
    std::string* branch) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (branch != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  branch_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      branch, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileRevertResponse.branch)
}

// optional int64 request_version = 7 [jstype = JS_STRING];
inline bool TileRevertResponse::_internal_has_request_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TileRevertResponse::has_request_version() const {
  return _internal_has_request_version();
}
inline void TileRevertResponse::clear_request_version() {
  request_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileRevertResponse::_internal_request_version() const {
  return request_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TileRevertResponse::request_version() const {
  // @@protoc_insertion_point(field_get:services.TileRevertResponse.request_version)
  return _internal_request_version();
}
inline void TileRevertResponse::_internal_set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  request_version_ = value;
}
inline void TileRevertResponse::set_request_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_request_version(value);
  // @@protoc_insertion_point(field_set:services.TileRevertResponse.request_version)
}

// optional .services.RoadServiceResponse ret = 8;
inline bool TileRevertResponse::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ret_ != nullptr);
  return value;
}
inline bool TileRevertResponse::has_ret() const {
  return _internal_has_ret();
}
inline void TileRevertResponse::clear_ret() {
  if (ret_ != nullptr) ret_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::services::RoadServiceResponse& TileRevertResponse::_internal_ret() const {
  const ::services::RoadServiceResponse* p = ret_;
  return p != nullptr ? *p : *reinterpret_cast<const ::services::RoadServiceResponse*>(
      &::services::_RoadServiceResponse_default_instance_);
}
inline const ::services::RoadServiceResponse& TileRevertResponse::ret() const {
  // @@protoc_insertion_point(field_get:services.TileRevertResponse.ret)
  return _internal_ret();
}
inline void TileRevertResponse::unsafe_arena_set_allocated_ret(
    ::services::RoadServiceResponse* ret) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ret_);
  }
  ret_ = ret;
  if (ret) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:services.TileRevertResponse.ret)
}
inline ::services::RoadServiceResponse* TileRevertResponse::release_ret() {
  auto temp = unsafe_arena_release_ret();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::services::RoadServiceResponse* TileRevertResponse::unsafe_arena_release_ret() {
  // @@protoc_insertion_point(field_release:services.TileRevertResponse.ret)
  _has_bits_[0] &= ~0x00000002u;
  ::services::RoadServiceResponse* temp = ret_;
  ret_ = nullptr;
  return temp;
}
inline ::services::RoadServiceResponse* TileRevertResponse::_internal_mutable_ret() {
  _has_bits_[0] |= 0x00000002u;
  if (ret_ == nullptr) {
    auto* p = CreateMaybeMessage<::services::RoadServiceResponse>(GetArena());
    ret_ = p;
  }
  return ret_;
}
inline ::services::RoadServiceResponse* TileRevertResponse::mutable_ret() {
  // @@protoc_insertion_point(field_mutable:services.TileRevertResponse.ret)
  return _internal_mutable_ret();
}
inline void TileRevertResponse::set_allocated_ret(::services::RoadServiceResponse* ret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ret_;
  }
  if (ret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ret);
    if (message_arena != submessage_arena) {
      ret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ret, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ret_ = ret;
  // @@protoc_insertion_point(field_set_allocated:services.TileRevertResponse.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace services

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2froadserver_2eproto
