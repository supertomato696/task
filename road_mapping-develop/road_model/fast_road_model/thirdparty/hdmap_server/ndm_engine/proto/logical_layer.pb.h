// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logical_layer.proto

#ifndef PROTOBUF_logical_5flayer_2eproto__INCLUDED
#define PROTOBUF_logical_5flayer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
#include "physical_layer.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_logical_5flayer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsElevationImpl();
void InitDefaultsElevation();
void InitDefaultsParkingSpaceImpl();
void InitDefaultsParkingSpace();
void InitDefaultsLaneImpl();
void InitDefaultsLane();
void InitDefaultsSectionImpl();
void InitDefaultsSection();
void InitDefaultsJunctionImpl();
void InitDefaultsJunction();
void InitDefaultsLogicalLayerImpl();
void InitDefaultsLogicalLayer();
inline void InitDefaults() {
  InitDefaultsElevation();
  InitDefaultsParkingSpace();
  InitDefaultsLane();
  InitDefaultsSection();
  InitDefaultsJunction();
  InitDefaultsLogicalLayer();
}
}  // namespace protobuf_logical_5flayer_2eproto
namespace ndm_proto {
class Elevation;
class ElevationDefaultTypeInternal;
extern ElevationDefaultTypeInternal _Elevation_default_instance_;
class Junction;
class JunctionDefaultTypeInternal;
extern JunctionDefaultTypeInternal _Junction_default_instance_;
class Lane;
class LaneDefaultTypeInternal;
extern LaneDefaultTypeInternal _Lane_default_instance_;
class LogicalLayer;
class LogicalLayerDefaultTypeInternal;
extern LogicalLayerDefaultTypeInternal _LogicalLayer_default_instance_;
class ParkingSpace;
class ParkingSpaceDefaultTypeInternal;
extern ParkingSpaceDefaultTypeInternal _ParkingSpace_default_instance_;
class Section;
class SectionDefaultTypeInternal;
extern SectionDefaultTypeInternal _Section_default_instance_;
}  // namespace ndm_proto
namespace ndm_proto {

// ===================================================================

class Elevation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.Elevation) */ {
 public:
  Elevation();
  virtual ~Elevation();

  Elevation(const Elevation& from);

  inline Elevation& operator=(const Elevation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Elevation(Elevation&& from) noexcept
    : Elevation() {
    *this = ::std::move(from);
  }

  inline Elevation& operator=(Elevation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Elevation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Elevation* internal_default_instance() {
    return reinterpret_cast<const Elevation*>(
               &_Elevation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Elevation* other);
  friend void swap(Elevation& a, Elevation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Elevation* New() const PROTOBUF_FINAL { return New(NULL); }

  Elevation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Elevation& from);
  void MergeFrom(const Elevation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Elevation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string elevationplane_ids = 2;
  int elevationplane_ids_size() const;
  void clear_elevationplane_ids();
  static const int kElevationplaneIdsFieldNumber = 2;
  const ::std::string& elevationplane_ids(int index) const;
  ::std::string* mutable_elevationplane_ids(int index);
  void set_elevationplane_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_elevationplane_ids(int index, ::std::string&& value);
  #endif
  void set_elevationplane_ids(int index, const char* value);
  void set_elevationplane_ids(int index, const char* value, size_t size);
  ::std::string* add_elevationplane_ids();
  void add_elevationplane_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_elevationplane_ids(::std::string&& value);
  #endif
  void add_elevationplane_ids(const char* value);
  void add_elevationplane_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& elevationplane_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_elevationplane_ids();

  // repeated string link_ids = 20;
  int link_ids_size() const;
  void clear_link_ids();
  static const int kLinkIdsFieldNumber = 20;
  const ::std::string& link_ids(int index) const;
  ::std::string* mutable_link_ids(int index);
  void set_link_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_link_ids(int index, ::std::string&& value);
  #endif
  void set_link_ids(int index, const char* value);
  void set_link_ids(int index, const char* value, size_t size);
  ::std::string* add_link_ids();
  void add_link_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_link_ids(::std::string&& value);
  #endif
  void add_link_ids(const char* value);
  void add_link_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& link_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_link_ids();

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:ndm_proto.Elevation)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> elevationplane_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> link_ids_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct ::protobuf_logical_5flayer_2eproto::TableStruct;
  friend void ::protobuf_logical_5flayer_2eproto::InitDefaultsElevationImpl();
};
// -------------------------------------------------------------------

class ParkingSpace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.ParkingSpace) */ {
 public:
  ParkingSpace();
  virtual ~ParkingSpace();

  ParkingSpace(const ParkingSpace& from);

  inline ParkingSpace& operator=(const ParkingSpace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParkingSpace(ParkingSpace&& from) noexcept
    : ParkingSpace() {
    *this = ::std::move(from);
  }

  inline ParkingSpace& operator=(ParkingSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParkingSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingSpace* internal_default_instance() {
    return reinterpret_cast<const ParkingSpace*>(
               &_ParkingSpace_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ParkingSpace* other);
  friend void swap(ParkingSpace& a, ParkingSpace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParkingSpace* New() const PROTOBUF_FINAL { return New(NULL); }

  ParkingSpace* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParkingSpace& from);
  void MergeFrom(const ParkingSpace& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParkingSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string parkingslot_ids = 2;
  int parkingslot_ids_size() const;
  void clear_parkingslot_ids();
  static const int kParkingslotIdsFieldNumber = 2;
  const ::std::string& parkingslot_ids(int index) const;
  ::std::string* mutable_parkingslot_ids(int index);
  void set_parkingslot_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_parkingslot_ids(int index, ::std::string&& value);
  #endif
  void set_parkingslot_ids(int index, const char* value);
  void set_parkingslot_ids(int index, const char* value, size_t size);
  ::std::string* add_parkingslot_ids();
  void add_parkingslot_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_parkingslot_ids(::std::string&& value);
  #endif
  void add_parkingslot_ids(const char* value);
  void add_parkingslot_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& parkingslot_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_parkingslot_ids();

  // repeated string border_ids = 3;
  int border_ids_size() const;
  void clear_border_ids();
  static const int kBorderIdsFieldNumber = 3;
  const ::std::string& border_ids(int index) const;
  ::std::string* mutable_border_ids(int index);
  void set_border_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_border_ids(int index, ::std::string&& value);
  #endif
  void set_border_ids(int index, const char* value);
  void set_border_ids(int index, const char* value, size_t size);
  ::std::string* add_border_ids();
  void add_border_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_border_ids(::std::string&& value);
  #endif
  void add_border_ids(const char* value);
  void add_border_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& border_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_border_ids();

  // repeated string link_ids = 20;
  int link_ids_size() const;
  void clear_link_ids();
  static const int kLinkIdsFieldNumber = 20;
  const ::std::string& link_ids(int index) const;
  ::std::string* mutable_link_ids(int index);
  void set_link_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_link_ids(int index, ::std::string&& value);
  #endif
  void set_link_ids(int index, const char* value);
  void set_link_ids(int index, const char* value, size_t size);
  ::std::string* add_link_ids();
  void add_link_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_link_ids(::std::string&& value);
  #endif
  void add_link_ids(const char* value);
  void add_link_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& link_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_link_ids();

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required .ndm_proto.Polygon bounding_polygon = 4;
  bool has_bounding_polygon() const;
  void clear_bounding_polygon();
  static const int kBoundingPolygonFieldNumber = 4;
  const ::ndm_proto::Polygon& bounding_polygon() const;
  ::ndm_proto::Polygon* release_bounding_polygon();
  ::ndm_proto::Polygon* mutable_bounding_polygon();
  void set_allocated_bounding_polygon(::ndm_proto::Polygon* bounding_polygon);

  // optional .ndm_proto.ParkingSpaceRestriction restriction = 30;
  bool has_restriction() const;
  void clear_restriction();
  static const int kRestrictionFieldNumber = 30;
  const ::ndm_proto::ParkingSpaceRestriction& restriction() const;
  ::ndm_proto::ParkingSpaceRestriction* release_restriction();
  ::ndm_proto::ParkingSpaceRestriction* mutable_restriction();
  void set_allocated_restriction(::ndm_proto::ParkingSpaceRestriction* restriction);

  // @@protoc_insertion_point(class_scope:ndm_proto.ParkingSpace)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_bounding_polygon();
  void clear_has_bounding_polygon();
  void set_has_restriction();
  void clear_has_restriction();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> parkingslot_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> border_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> link_ids_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::ndm_proto::Polygon* bounding_polygon_;
  ::ndm_proto::ParkingSpaceRestriction* restriction_;
  friend struct ::protobuf_logical_5flayer_2eproto::TableStruct;
  friend void ::protobuf_logical_5flayer_2eproto::InitDefaultsParkingSpaceImpl();
};
// -------------------------------------------------------------------

class Lane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.Lane) */ {
 public:
  Lane();
  virtual ~Lane();

  Lane(const Lane& from);

  inline Lane& operator=(const Lane& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lane(Lane&& from) noexcept
    : Lane() {
    *this = ::std::move(from);
  }

  inline Lane& operator=(Lane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lane* internal_default_instance() {
    return reinterpret_cast<const Lane*>(
               &_Lane_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Lane* other);
  friend void swap(Lane& a, Lane& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lane* New() const PROTOBUF_FINAL { return New(NULL); }

  Lane* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lane& from);
  void MergeFrom(const Lane& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string l_laneline_ids = 2;
  int l_laneline_ids_size() const;
  void clear_l_laneline_ids();
  static const int kLLanelineIdsFieldNumber = 2;
  const ::std::string& l_laneline_ids(int index) const;
  ::std::string* mutable_l_laneline_ids(int index);
  void set_l_laneline_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_l_laneline_ids(int index, ::std::string&& value);
  #endif
  void set_l_laneline_ids(int index, const char* value);
  void set_l_laneline_ids(int index, const char* value, size_t size);
  ::std::string* add_l_laneline_ids();
  void add_l_laneline_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_l_laneline_ids(::std::string&& value);
  #endif
  void add_l_laneline_ids(const char* value);
  void add_l_laneline_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& l_laneline_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_l_laneline_ids();

  // repeated string l_sub_laneline_ids = 3;
  int l_sub_laneline_ids_size() const;
  void clear_l_sub_laneline_ids();
  static const int kLSubLanelineIdsFieldNumber = 3;
  const ::std::string& l_sub_laneline_ids(int index) const;
  ::std::string* mutable_l_sub_laneline_ids(int index);
  void set_l_sub_laneline_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_l_sub_laneline_ids(int index, ::std::string&& value);
  #endif
  void set_l_sub_laneline_ids(int index, const char* value);
  void set_l_sub_laneline_ids(int index, const char* value, size_t size);
  ::std::string* add_l_sub_laneline_ids();
  void add_l_sub_laneline_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_l_sub_laneline_ids(::std::string&& value);
  #endif
  void add_l_sub_laneline_ids(const char* value);
  void add_l_sub_laneline_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& l_sub_laneline_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_l_sub_laneline_ids();

  // repeated string r_laneline_ids = 4;
  int r_laneline_ids_size() const;
  void clear_r_laneline_ids();
  static const int kRLanelineIdsFieldNumber = 4;
  const ::std::string& r_laneline_ids(int index) const;
  ::std::string* mutable_r_laneline_ids(int index);
  void set_r_laneline_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_r_laneline_ids(int index, ::std::string&& value);
  #endif
  void set_r_laneline_ids(int index, const char* value);
  void set_r_laneline_ids(int index, const char* value, size_t size);
  ::std::string* add_r_laneline_ids();
  void add_r_laneline_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_r_laneline_ids(::std::string&& value);
  #endif
  void add_r_laneline_ids(const char* value);
  void add_r_laneline_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& r_laneline_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_r_laneline_ids();

  // repeated string r_sub_laneline_ids = 5;
  int r_sub_laneline_ids_size() const;
  void clear_r_sub_laneline_ids();
  static const int kRSubLanelineIdsFieldNumber = 5;
  const ::std::string& r_sub_laneline_ids(int index) const;
  ::std::string* mutable_r_sub_laneline_ids(int index);
  void set_r_sub_laneline_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_r_sub_laneline_ids(int index, ::std::string&& value);
  #endif
  void set_r_sub_laneline_ids(int index, const char* value);
  void set_r_sub_laneline_ids(int index, const char* value, size_t size);
  ::std::string* add_r_sub_laneline_ids();
  void add_r_sub_laneline_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_r_sub_laneline_ids(::std::string&& value);
  #endif
  void add_r_sub_laneline_ids(const char* value);
  void add_r_sub_laneline_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& r_sub_laneline_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_r_sub_laneline_ids();

  // repeated string driveline_ids = 6;
  int driveline_ids_size() const;
  void clear_driveline_ids();
  static const int kDrivelineIdsFieldNumber = 6;
  const ::std::string& driveline_ids(int index) const;
  ::std::string* mutable_driveline_ids(int index);
  void set_driveline_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_driveline_ids(int index, ::std::string&& value);
  #endif
  void set_driveline_ids(int index, const char* value);
  void set_driveline_ids(int index, const char* value, size_t size);
  ::std::string* add_driveline_ids();
  void add_driveline_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_driveline_ids(::std::string&& value);
  #endif
  void add_driveline_ids(const char* value);
  void add_driveline_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& driveline_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_driveline_ids();

  // repeated .ndm_proto.LaneAttr attrs = 11;
  int attrs_size() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 11;
  const ::ndm_proto::LaneAttr& attrs(int index) const;
  ::ndm_proto::LaneAttr* mutable_attrs(int index);
  ::ndm_proto::LaneAttr* add_attrs();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneAttr >*
      mutable_attrs();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneAttr >&
      attrs() const;

  // repeated .ndm_proto.Link objs = 14;
  int objs_size() const;
  void clear_objs();
  static const int kObjsFieldNumber = 14;
  const ::ndm_proto::Link& objs(int index) const;
  ::ndm_proto::Link* mutable_objs(int index);
  ::ndm_proto::Link* add_objs();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Link >*
      mutable_objs();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Link >&
      objs() const;

  // repeated string pred_ids = 20;
  int pred_ids_size() const;
  void clear_pred_ids();
  static const int kPredIdsFieldNumber = 20;
  const ::std::string& pred_ids(int index) const;
  ::std::string* mutable_pred_ids(int index);
  void set_pred_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_pred_ids(int index, ::std::string&& value);
  #endif
  void set_pred_ids(int index, const char* value);
  void set_pred_ids(int index, const char* value, size_t size);
  ::std::string* add_pred_ids();
  void add_pred_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_pred_ids(::std::string&& value);
  #endif
  void add_pred_ids(const char* value);
  void add_pred_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pred_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pred_ids();

  // repeated string succ_ids = 21;
  int succ_ids_size() const;
  void clear_succ_ids();
  static const int kSuccIdsFieldNumber = 21;
  const ::std::string& succ_ids(int index) const;
  ::std::string* mutable_succ_ids(int index);
  void set_succ_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_succ_ids(int index, ::std::string&& value);
  #endif
  void set_succ_ids(int index, const char* value);
  void set_succ_ids(int index, const char* value, size_t size);
  ::std::string* add_succ_ids();
  void add_succ_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_succ_ids(::std::string&& value);
  #endif
  void add_succ_ids(const char* value);
  void add_succ_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& succ_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_succ_ids();

  // repeated string left_ids = 22;
  int left_ids_size() const;
  void clear_left_ids();
  static const int kLeftIdsFieldNumber = 22;
  const ::std::string& left_ids(int index) const;
  ::std::string* mutable_left_ids(int index);
  void set_left_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_left_ids(int index, ::std::string&& value);
  #endif
  void set_left_ids(int index, const char* value);
  void set_left_ids(int index, const char* value, size_t size);
  ::std::string* add_left_ids();
  void add_left_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_left_ids(::std::string&& value);
  #endif
  void add_left_ids(const char* value);
  void add_left_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& left_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_left_ids();

  // repeated string right_ids = 23;
  int right_ids_size() const;
  void clear_right_ids();
  static const int kRightIdsFieldNumber = 23;
  const ::std::string& right_ids(int index) const;
  ::std::string* mutable_right_ids(int index);
  void set_right_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_right_ids(int index, ::std::string&& value);
  #endif
  void set_right_ids(int index, const char* value);
  void set_right_ids(int index, const char* value, size_t size);
  ::std::string* add_right_ids();
  void add_right_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_right_ids(::std::string&& value);
  #endif
  void add_right_ids(const char* value);
  void add_right_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& right_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_right_ids();

  // repeated .ndm_proto.LaneLineRestriction l_restrictions = 30;
  int l_restrictions_size() const;
  void clear_l_restrictions();
  static const int kLRestrictionsFieldNumber = 30;
  const ::ndm_proto::LaneLineRestriction& l_restrictions(int index) const;
  ::ndm_proto::LaneLineRestriction* mutable_l_restrictions(int index);
  ::ndm_proto::LaneLineRestriction* add_l_restrictions();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLineRestriction >*
      mutable_l_restrictions();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLineRestriction >&
      l_restrictions() const;

  // repeated .ndm_proto.LaneLineRestriction r_restrictions = 31;
  int r_restrictions_size() const;
  void clear_r_restrictions();
  static const int kRRestrictionsFieldNumber = 31;
  const ::ndm_proto::LaneLineRestriction& r_restrictions(int index) const;
  ::ndm_proto::LaneLineRestriction* mutable_r_restrictions(int index);
  ::ndm_proto::LaneLineRestriction* add_r_restrictions();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLineRestriction >*
      mutable_r_restrictions();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLineRestriction >&
      r_restrictions() const;

  // repeated .ndm_proto.LaneRestriction restrictions = 32;
  int restrictions_size() const;
  void clear_restrictions();
  static const int kRestrictionsFieldNumber = 32;
  const ::ndm_proto::LaneRestriction& restrictions(int index) const;
  ::ndm_proto::LaneRestriction* mutable_restrictions(int index);
  ::ndm_proto::LaneRestriction* add_restrictions();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneRestriction >*
      mutable_restrictions();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneRestriction >&
      restrictions() const;

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .ndm_proto.LaneFunction function = 7;
  bool has_function() const;
  void clear_function();
  static const int kFunctionFieldNumber = 7;
  const ::ndm_proto::LaneFunction& function() const;
  ::ndm_proto::LaneFunction* release_function();
  ::ndm_proto::LaneFunction* mutable_function();
  void set_allocated_function(::ndm_proto::LaneFunction* function);

  // optional .ndm_proto.LaneDirection direction = 8;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 8;
  const ::ndm_proto::LaneDirection& direction() const;
  ::ndm_proto::LaneDirection* release_direction();
  ::ndm_proto::LaneDirection* mutable_direction();
  void set_allocated_direction(::ndm_proto::LaneDirection* direction);

  // optional .ndm_proto.LanePriority priority = 24;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 24;
  const ::ndm_proto::LanePriority& priority() const;
  ::ndm_proto::LanePriority* release_priority();
  ::ndm_proto::LanePriority* mutable_priority();
  void set_allocated_priority(::ndm_proto::LanePriority* priority);

  // optional .ndm_proto.Polygon bounding_polygon = 33;
  bool has_bounding_polygon() const;
  void clear_bounding_polygon();
  static const int kBoundingPolygonFieldNumber = 33;
  const ::ndm_proto::Polygon& bounding_polygon() const;
  ::ndm_proto::Polygon* release_bounding_polygon();
  ::ndm_proto::Polygon* mutable_bounding_polygon();
  void set_allocated_bounding_polygon(::ndm_proto::Polygon* bounding_polygon);

  // required bool virtual = 9 [default = false];
  bool has_virtual_() const;
  void clear_virtual_();
  static const int kVirtualFieldNumber = 9;
  bool virtual_() const;
  void set_virtual_(bool value);

  // optional .ndm_proto.LaneTransition transition = 10;
  bool has_transition() const;
  void clear_transition();
  static const int kTransitionFieldNumber = 10;
  ::ndm_proto::LaneTransition transition() const;
  void set_transition(::ndm_proto::LaneTransition value);

  // optional uint64 type = 13;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 13;
  ::google::protobuf::uint64 type() const;
  void set_type(::google::protobuf::uint64 value);

  // optional float lane_length = 12;
  bool has_lane_length() const;
  void clear_lane_length();
  static const int kLaneLengthFieldNumber = 12;
  float lane_length() const;
  void set_lane_length(float value);

  // @@protoc_insertion_point(class_scope:ndm_proto.Lane)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_function();
  void clear_has_function();
  void set_has_direction();
  void clear_has_direction();
  void set_has_virtual_();
  void clear_has_virtual_();
  void set_has_transition();
  void clear_has_transition();
  void set_has_lane_length();
  void clear_has_lane_length();
  void set_has_type();
  void clear_has_type();
  void set_has_priority();
  void clear_has_priority();
  void set_has_bounding_polygon();
  void clear_has_bounding_polygon();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> l_laneline_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> l_sub_laneline_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> r_laneline_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> r_sub_laneline_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> driveline_ids_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneAttr > attrs_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Link > objs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pred_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> succ_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> left_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> right_ids_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLineRestriction > l_restrictions_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLineRestriction > r_restrictions_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneRestriction > restrictions_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::ndm_proto::LaneFunction* function_;
  ::ndm_proto::LaneDirection* direction_;
  ::ndm_proto::LanePriority* priority_;
  ::ndm_proto::Polygon* bounding_polygon_;
  bool virtual__;
  int transition_;
  ::google::protobuf::uint64 type_;
  float lane_length_;
  friend struct ::protobuf_logical_5flayer_2eproto::TableStruct;
  friend void ::protobuf_logical_5flayer_2eproto::InitDefaultsLaneImpl();
};
// -------------------------------------------------------------------

class Section : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.Section) */ {
 public:
  Section();
  virtual ~Section();

  Section(const Section& from);

  inline Section& operator=(const Section& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Section(Section&& from) noexcept
    : Section() {
    *this = ::std::move(from);
  }

  inline Section& operator=(Section&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Section& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Section* internal_default_instance() {
    return reinterpret_cast<const Section*>(
               &_Section_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Section* other);
  friend void swap(Section& a, Section& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Section* New() const PROTOBUF_FINAL { return New(NULL); }

  Section* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Section& from);
  void MergeFrom(const Section& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Section* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string lane_ids = 2;
  int lane_ids_size() const;
  void clear_lane_ids();
  static const int kLaneIdsFieldNumber = 2;
  const ::std::string& lane_ids(int index) const;
  ::std::string* mutable_lane_ids(int index);
  void set_lane_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_lane_ids(int index, ::std::string&& value);
  #endif
  void set_lane_ids(int index, const char* value);
  void set_lane_ids(int index, const char* value, size_t size);
  ::std::string* add_lane_ids();
  void add_lane_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_lane_ids(::std::string&& value);
  #endif
  void add_lane_ids(const char* value);
  void add_lane_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& lane_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lane_ids();

  // repeated string l_border_ids = 3;
  int l_border_ids_size() const;
  void clear_l_border_ids();
  static const int kLBorderIdsFieldNumber = 3;
  const ::std::string& l_border_ids(int index) const;
  ::std::string* mutable_l_border_ids(int index);
  void set_l_border_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_l_border_ids(int index, ::std::string&& value);
  #endif
  void set_l_border_ids(int index, const char* value);
  void set_l_border_ids(int index, const char* value, size_t size);
  ::std::string* add_l_border_ids();
  void add_l_border_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_l_border_ids(::std::string&& value);
  #endif
  void add_l_border_ids(const char* value);
  void add_l_border_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& l_border_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_l_border_ids();

  // repeated string r_border_ids = 4;
  int r_border_ids_size() const;
  void clear_r_border_ids();
  static const int kRBorderIdsFieldNumber = 4;
  const ::std::string& r_border_ids(int index) const;
  ::std::string* mutable_r_border_ids(int index);
  void set_r_border_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_r_border_ids(int index, ::std::string&& value);
  #endif
  void set_r_border_ids(int index, const char* value);
  void set_r_border_ids(int index, const char* value, size_t size);
  ::std::string* add_r_border_ids();
  void add_r_border_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_r_border_ids(::std::string&& value);
  #endif
  void add_r_border_ids(const char* value);
  void add_r_border_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& r_border_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_r_border_ids();

  // repeated .ndm_proto.Link objs = 5;
  int objs_size() const;
  void clear_objs();
  static const int kObjsFieldNumber = 5;
  const ::ndm_proto::Link& objs(int index) const;
  ::ndm_proto::Link* mutable_objs(int index);
  ::ndm_proto::Link* add_objs();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Link >*
      mutable_objs();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Link >&
      objs() const;

  // repeated string pred_ids = 20;
  int pred_ids_size() const;
  void clear_pred_ids();
  static const int kPredIdsFieldNumber = 20;
  const ::std::string& pred_ids(int index) const;
  ::std::string* mutable_pred_ids(int index);
  void set_pred_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_pred_ids(int index, ::std::string&& value);
  #endif
  void set_pred_ids(int index, const char* value);
  void set_pred_ids(int index, const char* value, size_t size);
  ::std::string* add_pred_ids();
  void add_pred_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_pred_ids(::std::string&& value);
  #endif
  void add_pred_ids(const char* value);
  void add_pred_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pred_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pred_ids();

  // repeated string succ_ids = 21;
  int succ_ids_size() const;
  void clear_succ_ids();
  static const int kSuccIdsFieldNumber = 21;
  const ::std::string& succ_ids(int index) const;
  ::std::string* mutable_succ_ids(int index);
  void set_succ_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_succ_ids(int index, ::std::string&& value);
  #endif
  void set_succ_ids(int index, const char* value);
  void set_succ_ids(int index, const char* value, size_t size);
  ::std::string* add_succ_ids();
  void add_succ_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_succ_ids(::std::string&& value);
  #endif
  void add_succ_ids(const char* value);
  void add_succ_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& succ_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_succ_ids();

  // repeated string left_ids = 22;
  int left_ids_size() const;
  void clear_left_ids();
  static const int kLeftIdsFieldNumber = 22;
  const ::std::string& left_ids(int index) const;
  ::std::string* mutable_left_ids(int index);
  void set_left_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_left_ids(int index, ::std::string&& value);
  #endif
  void set_left_ids(int index, const char* value);
  void set_left_ids(int index, const char* value, size_t size);
  ::std::string* add_left_ids();
  void add_left_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_left_ids(::std::string&& value);
  #endif
  void add_left_ids(const char* value);
  void add_left_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& left_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_left_ids();

  // repeated string right_ids = 23;
  int right_ids_size() const;
  void clear_right_ids();
  static const int kRightIdsFieldNumber = 23;
  const ::std::string& right_ids(int index) const;
  ::std::string* mutable_right_ids(int index);
  void set_right_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_right_ids(int index, ::std::string&& value);
  #endif
  void set_right_ids(int index, const char* value);
  void set_right_ids(int index, const char* value, size_t size);
  ::std::string* add_right_ids();
  void add_right_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_right_ids(::std::string&& value);
  #endif
  void add_right_ids(const char* value);
  void add_right_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& right_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_right_ids();

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .ndm_proto.Polygon bounding_polygon = 30;
  bool has_bounding_polygon() const;
  void clear_bounding_polygon();
  static const int kBoundingPolygonFieldNumber = 30;
  const ::ndm_proto::Polygon& bounding_polygon() const;
  ::ndm_proto::Polygon* release_bounding_polygon();
  ::ndm_proto::Polygon* mutable_bounding_polygon();
  void set_allocated_bounding_polygon(::ndm_proto::Polygon* bounding_polygon);

  // optional double length = 6;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 6;
  double length() const;
  void set_length(double value);

  // optional .ndm_proto.SpecialSituationType special_situation_type = 31;
  bool has_special_situation_type() const;
  void clear_special_situation_type();
  static const int kSpecialSituationTypeFieldNumber = 31;
  ::ndm_proto::SpecialSituationType special_situation_type() const;
  void set_special_situation_type(::ndm_proto::SpecialSituationType value);

  // @@protoc_insertion_point(class_scope:ndm_proto.Section)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_length();
  void clear_has_length();
  void set_has_bounding_polygon();
  void clear_has_bounding_polygon();
  void set_has_special_situation_type();
  void clear_has_special_situation_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lane_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> l_border_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> r_border_ids_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Link > objs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pred_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> succ_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> left_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> right_ids_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::ndm_proto::Polygon* bounding_polygon_;
  double length_;
  int special_situation_type_;
  friend struct ::protobuf_logical_5flayer_2eproto::TableStruct;
  friend void ::protobuf_logical_5flayer_2eproto::InitDefaultsSectionImpl();
};
// -------------------------------------------------------------------

class Junction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.Junction) */ {
 public:
  Junction();
  virtual ~Junction();

  Junction(const Junction& from);

  inline Junction& operator=(const Junction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Junction(Junction&& from) noexcept
    : Junction() {
    *this = ::std::move(from);
  }

  inline Junction& operator=(Junction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Junction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Junction* internal_default_instance() {
    return reinterpret_cast<const Junction*>(
               &_Junction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Junction* other);
  friend void swap(Junction& a, Junction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Junction* New() const PROTOBUF_FINAL { return New(NULL); }

  Junction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Junction& from);
  void MergeFrom(const Junction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Junction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string border_ids = 2;
  int border_ids_size() const;
  void clear_border_ids();
  static const int kBorderIdsFieldNumber = 2;
  const ::std::string& border_ids(int index) const;
  ::std::string* mutable_border_ids(int index);
  void set_border_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_border_ids(int index, ::std::string&& value);
  #endif
  void set_border_ids(int index, const char* value);
  void set_border_ids(int index, const char* value, size_t size);
  ::std::string* add_border_ids();
  void add_border_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_border_ids(::std::string&& value);
  #endif
  void add_border_ids(const char* value);
  void add_border_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& border_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_border_ids();

  // repeated string crosswalk_ids = 3;
  int crosswalk_ids_size() const;
  void clear_crosswalk_ids();
  static const int kCrosswalkIdsFieldNumber = 3;
  const ::std::string& crosswalk_ids(int index) const;
  ::std::string* mutable_crosswalk_ids(int index);
  void set_crosswalk_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_crosswalk_ids(int index, ::std::string&& value);
  #endif
  void set_crosswalk_ids(int index, const char* value);
  void set_crosswalk_ids(int index, const char* value, size_t size);
  ::std::string* add_crosswalk_ids();
  void add_crosswalk_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_crosswalk_ids(::std::string&& value);
  #endif
  void add_crosswalk_ids(const char* value);
  void add_crosswalk_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& crosswalk_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_crosswalk_ids();

  // repeated string trafficlight_ids = 4;
  int trafficlight_ids_size() const;
  void clear_trafficlight_ids();
  static const int kTrafficlightIdsFieldNumber = 4;
  const ::std::string& trafficlight_ids(int index) const;
  ::std::string* mutable_trafficlight_ids(int index);
  void set_trafficlight_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_trafficlight_ids(int index, ::std::string&& value);
  #endif
  void set_trafficlight_ids(int index, const char* value);
  void set_trafficlight_ids(int index, const char* value, size_t size);
  ::std::string* add_trafficlight_ids();
  void add_trafficlight_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_trafficlight_ids(::std::string&& value);
  #endif
  void add_trafficlight_ids(const char* value);
  void add_trafficlight_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& trafficlight_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_trafficlight_ids();

  // repeated string zone_ids = 5;
  int zone_ids_size() const;
  void clear_zone_ids();
  static const int kZoneIdsFieldNumber = 5;
  const ::std::string& zone_ids(int index) const;
  ::std::string* mutable_zone_ids(int index);
  void set_zone_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_zone_ids(int index, ::std::string&& value);
  #endif
  void set_zone_ids(int index, const char* value);
  void set_zone_ids(int index, const char* value, size_t size);
  ::std::string* add_zone_ids();
  void add_zone_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_zone_ids(::std::string&& value);
  #endif
  void add_zone_ids(const char* value);
  void add_zone_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& zone_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_zone_ids();

  // repeated string trafficsign_ids = 6;
  int trafficsign_ids_size() const;
  void clear_trafficsign_ids();
  static const int kTrafficsignIdsFieldNumber = 6;
  const ::std::string& trafficsign_ids(int index) const;
  ::std::string* mutable_trafficsign_ids(int index);
  void set_trafficsign_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_trafficsign_ids(int index, ::std::string&& value);
  #endif
  void set_trafficsign_ids(int index, const char* value);
  void set_trafficsign_ids(int index, const char* value, size_t size);
  ::std::string* add_trafficsign_ids();
  void add_trafficsign_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_trafficsign_ids(::std::string&& value);
  #endif
  void add_trafficsign_ids(const char* value);
  void add_trafficsign_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& trafficsign_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_trafficsign_ids();

  // repeated string pole_ids = 7;
  int pole_ids_size() const;
  void clear_pole_ids();
  static const int kPoleIdsFieldNumber = 7;
  const ::std::string& pole_ids(int index) const;
  ::std::string* mutable_pole_ids(int index);
  void set_pole_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_pole_ids(int index, ::std::string&& value);
  #endif
  void set_pole_ids(int index, const char* value);
  void set_pole_ids(int index, const char* value, size_t size);
  ::std::string* add_pole_ids();
  void add_pole_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_pole_ids(::std::string&& value);
  #endif
  void add_pole_ids(const char* value);
  void add_pole_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pole_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pole_ids();

  // repeated string board_ids = 8;
  int board_ids_size() const;
  void clear_board_ids();
  static const int kBoardIdsFieldNumber = 8;
  const ::std::string& board_ids(int index) const;
  ::std::string* mutable_board_ids(int index);
  void set_board_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_board_ids(int index, ::std::string&& value);
  #endif
  void set_board_ids(int index, const char* value);
  void set_board_ids(int index, const char* value, size_t size);
  ::std::string* add_board_ids();
  void add_board_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_board_ids(::std::string&& value);
  #endif
  void add_board_ids(const char* value);
  void add_board_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& board_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_board_ids();

  // repeated string link_ids = 10;
  int link_ids_size() const;
  void clear_link_ids();
  static const int kLinkIdsFieldNumber = 10;
  const ::std::string& link_ids(int index) const;
  ::std::string* mutable_link_ids(int index);
  void set_link_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_link_ids(int index, ::std::string&& value);
  #endif
  void set_link_ids(int index, const char* value);
  void set_link_ids(int index, const char* value, size_t size);
  ::std::string* add_link_ids();
  void add_link_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_link_ids(::std::string&& value);
  #endif
  void add_link_ids(const char* value);
  void add_link_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& link_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_link_ids();

  // repeated string lane_ids = 11;
  int lane_ids_size() const;
  void clear_lane_ids();
  static const int kLaneIdsFieldNumber = 11;
  const ::std::string& lane_ids(int index) const;
  ::std::string* mutable_lane_ids(int index);
  void set_lane_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_lane_ids(int index, ::std::string&& value);
  #endif
  void set_lane_ids(int index, const char* value);
  void set_lane_ids(int index, const char* value, size_t size);
  ::std::string* add_lane_ids();
  void add_lane_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_lane_ids(::std::string&& value);
  #endif
  void add_lane_ids(const char* value);
  void add_lane_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& lane_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lane_ids();

  // repeated string in_link_ids = 21;
  int in_link_ids_size() const;
  void clear_in_link_ids();
  static const int kInLinkIdsFieldNumber = 21;
  const ::std::string& in_link_ids(int index) const;
  ::std::string* mutable_in_link_ids(int index);
  void set_in_link_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_in_link_ids(int index, ::std::string&& value);
  #endif
  void set_in_link_ids(int index, const char* value);
  void set_in_link_ids(int index, const char* value, size_t size);
  ::std::string* add_in_link_ids();
  void add_in_link_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_in_link_ids(::std::string&& value);
  #endif
  void add_in_link_ids(const char* value);
  void add_in_link_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& in_link_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_in_link_ids();

  // repeated string out_link_ids = 22;
  int out_link_ids_size() const;
  void clear_out_link_ids();
  static const int kOutLinkIdsFieldNumber = 22;
  const ::std::string& out_link_ids(int index) const;
  ::std::string* mutable_out_link_ids(int index);
  void set_out_link_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_out_link_ids(int index, ::std::string&& value);
  #endif
  void set_out_link_ids(int index, const char* value);
  void set_out_link_ids(int index, const char* value, size_t size);
  ::std::string* add_out_link_ids();
  void add_out_link_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_out_link_ids(::std::string&& value);
  #endif
  void add_out_link_ids(const char* value);
  void add_out_link_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& out_link_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_out_link_ids();

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .ndm_proto.Polygon bounding_polygon = 18;
  bool has_bounding_polygon() const;
  void clear_bounding_polygon();
  static const int kBoundingPolygonFieldNumber = 18;
  const ::ndm_proto::Polygon& bounding_polygon() const;
  ::ndm_proto::Polygon* release_bounding_polygon();
  ::ndm_proto::Polygon* mutable_bounding_polygon();
  void set_allocated_bounding_polygon(::ndm_proto::Polygon* bounding_polygon);

  // @@protoc_insertion_point(class_scope:ndm_proto.Junction)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_bounding_polygon();
  void clear_has_bounding_polygon();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> border_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> crosswalk_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> trafficlight_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> zone_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> trafficsign_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pole_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> board_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> link_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lane_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> in_link_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> out_link_ids_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::ndm_proto::Polygon* bounding_polygon_;
  friend struct ::protobuf_logical_5flayer_2eproto::TableStruct;
  friend void ::protobuf_logical_5flayer_2eproto::InitDefaultsJunctionImpl();
};
// -------------------------------------------------------------------

class LogicalLayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.LogicalLayer) */ {
 public:
  LogicalLayer();
  virtual ~LogicalLayer();

  LogicalLayer(const LogicalLayer& from);

  inline LogicalLayer& operator=(const LogicalLayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogicalLayer(LogicalLayer&& from) noexcept
    : LogicalLayer() {
    *this = ::std::move(from);
  }

  inline LogicalLayer& operator=(LogicalLayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogicalLayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicalLayer* internal_default_instance() {
    return reinterpret_cast<const LogicalLayer*>(
               &_LogicalLayer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(LogicalLayer* other);
  friend void swap(LogicalLayer& a, LogicalLayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogicalLayer* New() const PROTOBUF_FINAL { return New(NULL); }

  LogicalLayer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogicalLayer& from);
  void MergeFrom(const LogicalLayer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogicalLayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ndm_proto.LaneLine virtuallines = 1;
  int virtuallines_size() const;
  void clear_virtuallines();
  static const int kVirtuallinesFieldNumber = 1;
  const ::ndm_proto::LaneLine& virtuallines(int index) const;
  ::ndm_proto::LaneLine* mutable_virtuallines(int index);
  ::ndm_proto::LaneLine* add_virtuallines();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLine >*
      mutable_virtuallines();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLine >&
      virtuallines() const;

  // repeated .ndm_proto.Lane lanes = 2;
  int lanes_size() const;
  void clear_lanes();
  static const int kLanesFieldNumber = 2;
  const ::ndm_proto::Lane& lanes(int index) const;
  ::ndm_proto::Lane* mutable_lanes(int index);
  ::ndm_proto::Lane* add_lanes();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Lane >*
      mutable_lanes();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Lane >&
      lanes() const;

  // repeated .ndm_proto.Lane virtual_lanes = 3;
  int virtual_lanes_size() const;
  void clear_virtual_lanes();
  static const int kVirtualLanesFieldNumber = 3;
  const ::ndm_proto::Lane& virtual_lanes(int index) const;
  ::ndm_proto::Lane* mutable_virtual_lanes(int index);
  ::ndm_proto::Lane* add_virtual_lanes();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Lane >*
      mutable_virtual_lanes();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Lane >&
      virtual_lanes() const;

  // repeated .ndm_proto.ParkingSpace parkingspaces = 4;
  int parkingspaces_size() const;
  void clear_parkingspaces();
  static const int kParkingspacesFieldNumber = 4;
  const ::ndm_proto::ParkingSpace& parkingspaces(int index) const;
  ::ndm_proto::ParkingSpace* mutable_parkingspaces(int index);
  ::ndm_proto::ParkingSpace* add_parkingspaces();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::ParkingSpace >*
      mutable_parkingspaces();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::ParkingSpace >&
      parkingspaces() const;

  // repeated .ndm_proto.Section sections = 5;
  int sections_size() const;
  void clear_sections();
  static const int kSectionsFieldNumber = 5;
  const ::ndm_proto::Section& sections(int index) const;
  ::ndm_proto::Section* mutable_sections(int index);
  ::ndm_proto::Section* add_sections();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Section >*
      mutable_sections();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Section >&
      sections() const;

  // repeated .ndm_proto.Junction junctions = 6;
  int junctions_size() const;
  void clear_junctions();
  static const int kJunctionsFieldNumber = 6;
  const ::ndm_proto::Junction& junctions(int index) const;
  ::ndm_proto::Junction* mutable_junctions(int index);
  ::ndm_proto::Junction* add_junctions();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Junction >*
      mutable_junctions();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Junction >&
      junctions() const;

  // repeated .ndm_proto.Elevation elevations = 7;
  int elevations_size() const;
  void clear_elevations();
  static const int kElevationsFieldNumber = 7;
  const ::ndm_proto::Elevation& elevations(int index) const;
  ::ndm_proto::Elevation* mutable_elevations(int index);
  ::ndm_proto::Elevation* add_elevations();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Elevation >*
      mutable_elevations();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Elevation >&
      elevations() const;

  // @@protoc_insertion_point(class_scope:ndm_proto.LogicalLayer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLine > virtuallines_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Lane > lanes_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Lane > virtual_lanes_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::ParkingSpace > parkingspaces_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Section > sections_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Junction > junctions_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::Elevation > elevations_;
  friend struct ::protobuf_logical_5flayer_2eproto::TableStruct;
  friend void ::protobuf_logical_5flayer_2eproto::InitDefaultsLogicalLayerImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Elevation

// required string id = 1;
inline bool Elevation::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Elevation::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Elevation::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Elevation::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Elevation::id() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Elevation.id)
  return id_.GetNoArena();
}
inline void Elevation::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndm_proto.Elevation.id)
}
#if LANG_CXX11
inline void Elevation::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ndm_proto.Elevation.id)
}
#endif
inline void Elevation::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndm_proto.Elevation.id)
}
inline void Elevation::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Elevation.id)
}
inline ::std::string* Elevation::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ndm_proto.Elevation.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Elevation::release_id() {
  // @@protoc_insertion_point(field_release:ndm_proto.Elevation.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Elevation::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Elevation.id)
}

// repeated string elevationplane_ids = 2;
inline int Elevation::elevationplane_ids_size() const {
  return elevationplane_ids_.size();
}
inline void Elevation::clear_elevationplane_ids() {
  elevationplane_ids_.Clear();
}
inline const ::std::string& Elevation::elevationplane_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Elevation.elevationplane_ids)
  return elevationplane_ids_.Get(index);
}
inline ::std::string* Elevation::mutable_elevationplane_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Elevation.elevationplane_ids)
  return elevationplane_ids_.Mutable(index);
}
inline void Elevation::set_elevationplane_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Elevation.elevationplane_ids)
  elevationplane_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Elevation::set_elevationplane_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Elevation.elevationplane_ids)
  elevationplane_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Elevation::set_elevationplane_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  elevationplane_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Elevation.elevationplane_ids)
}
inline void Elevation::set_elevationplane_ids(int index, const char* value, size_t size) {
  elevationplane_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Elevation.elevationplane_ids)
}
inline ::std::string* Elevation::add_elevationplane_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Elevation.elevationplane_ids)
  return elevationplane_ids_.Add();
}
inline void Elevation::add_elevationplane_ids(const ::std::string& value) {
  elevationplane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Elevation.elevationplane_ids)
}
#if LANG_CXX11
inline void Elevation::add_elevationplane_ids(::std::string&& value) {
  elevationplane_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Elevation.elevationplane_ids)
}
#endif
inline void Elevation::add_elevationplane_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  elevationplane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Elevation.elevationplane_ids)
}
inline void Elevation::add_elevationplane_ids(const char* value, size_t size) {
  elevationplane_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Elevation.elevationplane_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Elevation::elevationplane_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Elevation.elevationplane_ids)
  return elevationplane_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Elevation::mutable_elevationplane_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Elevation.elevationplane_ids)
  return &elevationplane_ids_;
}

// repeated string link_ids = 20;
inline int Elevation::link_ids_size() const {
  return link_ids_.size();
}
inline void Elevation::clear_link_ids() {
  link_ids_.Clear();
}
inline const ::std::string& Elevation::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Elevation.link_ids)
  return link_ids_.Get(index);
}
inline ::std::string* Elevation::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Elevation.link_ids)
  return link_ids_.Mutable(index);
}
inline void Elevation::set_link_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Elevation.link_ids)
  link_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Elevation::set_link_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Elevation.link_ids)
  link_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Elevation::set_link_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  link_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Elevation.link_ids)
}
inline void Elevation::set_link_ids(int index, const char* value, size_t size) {
  link_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Elevation.link_ids)
}
inline ::std::string* Elevation::add_link_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Elevation.link_ids)
  return link_ids_.Add();
}
inline void Elevation::add_link_ids(const ::std::string& value) {
  link_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Elevation.link_ids)
}
#if LANG_CXX11
inline void Elevation::add_link_ids(::std::string&& value) {
  link_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Elevation.link_ids)
}
#endif
inline void Elevation::add_link_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  link_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Elevation.link_ids)
}
inline void Elevation::add_link_ids(const char* value, size_t size) {
  link_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Elevation.link_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Elevation::link_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Elevation.link_ids)
  return link_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Elevation::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Elevation.link_ids)
  return &link_ids_;
}

// -------------------------------------------------------------------

// ParkingSpace

// required string id = 1;
inline bool ParkingSpace::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParkingSpace::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParkingSpace::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParkingSpace::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ParkingSpace::id() const {
  // @@protoc_insertion_point(field_get:ndm_proto.ParkingSpace.id)
  return id_.GetNoArena();
}
inline void ParkingSpace::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndm_proto.ParkingSpace.id)
}
#if LANG_CXX11
inline void ParkingSpace::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ndm_proto.ParkingSpace.id)
}
#endif
inline void ParkingSpace::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndm_proto.ParkingSpace.id)
}
inline void ParkingSpace::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.ParkingSpace.id)
}
inline ::std::string* ParkingSpace::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ndm_proto.ParkingSpace.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParkingSpace::release_id() {
  // @@protoc_insertion_point(field_release:ndm_proto.ParkingSpace.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParkingSpace::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.ParkingSpace.id)
}

// repeated string parkingslot_ids = 2;
inline int ParkingSpace::parkingslot_ids_size() const {
  return parkingslot_ids_.size();
}
inline void ParkingSpace::clear_parkingslot_ids() {
  parkingslot_ids_.Clear();
}
inline const ::std::string& ParkingSpace::parkingslot_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.ParkingSpace.parkingslot_ids)
  return parkingslot_ids_.Get(index);
}
inline ::std::string* ParkingSpace::mutable_parkingslot_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.ParkingSpace.parkingslot_ids)
  return parkingslot_ids_.Mutable(index);
}
inline void ParkingSpace::set_parkingslot_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.ParkingSpace.parkingslot_ids)
  parkingslot_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ParkingSpace::set_parkingslot_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.ParkingSpace.parkingslot_ids)
  parkingslot_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ParkingSpace::set_parkingslot_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  parkingslot_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.ParkingSpace.parkingslot_ids)
}
inline void ParkingSpace::set_parkingslot_ids(int index, const char* value, size_t size) {
  parkingslot_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.ParkingSpace.parkingslot_ids)
}
inline ::std::string* ParkingSpace::add_parkingslot_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.ParkingSpace.parkingslot_ids)
  return parkingslot_ids_.Add();
}
inline void ParkingSpace::add_parkingslot_ids(const ::std::string& value) {
  parkingslot_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.ParkingSpace.parkingslot_ids)
}
#if LANG_CXX11
inline void ParkingSpace::add_parkingslot_ids(::std::string&& value) {
  parkingslot_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.ParkingSpace.parkingslot_ids)
}
#endif
inline void ParkingSpace::add_parkingslot_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  parkingslot_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.ParkingSpace.parkingslot_ids)
}
inline void ParkingSpace::add_parkingslot_ids(const char* value, size_t size) {
  parkingslot_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.ParkingSpace.parkingslot_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ParkingSpace::parkingslot_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.ParkingSpace.parkingslot_ids)
  return parkingslot_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ParkingSpace::mutable_parkingslot_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.ParkingSpace.parkingslot_ids)
  return &parkingslot_ids_;
}

// repeated string border_ids = 3;
inline int ParkingSpace::border_ids_size() const {
  return border_ids_.size();
}
inline void ParkingSpace::clear_border_ids() {
  border_ids_.Clear();
}
inline const ::std::string& ParkingSpace::border_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.ParkingSpace.border_ids)
  return border_ids_.Get(index);
}
inline ::std::string* ParkingSpace::mutable_border_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.ParkingSpace.border_ids)
  return border_ids_.Mutable(index);
}
inline void ParkingSpace::set_border_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.ParkingSpace.border_ids)
  border_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ParkingSpace::set_border_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.ParkingSpace.border_ids)
  border_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ParkingSpace::set_border_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  border_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.ParkingSpace.border_ids)
}
inline void ParkingSpace::set_border_ids(int index, const char* value, size_t size) {
  border_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.ParkingSpace.border_ids)
}
inline ::std::string* ParkingSpace::add_border_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.ParkingSpace.border_ids)
  return border_ids_.Add();
}
inline void ParkingSpace::add_border_ids(const ::std::string& value) {
  border_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.ParkingSpace.border_ids)
}
#if LANG_CXX11
inline void ParkingSpace::add_border_ids(::std::string&& value) {
  border_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.ParkingSpace.border_ids)
}
#endif
inline void ParkingSpace::add_border_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  border_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.ParkingSpace.border_ids)
}
inline void ParkingSpace::add_border_ids(const char* value, size_t size) {
  border_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.ParkingSpace.border_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ParkingSpace::border_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.ParkingSpace.border_ids)
  return border_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ParkingSpace::mutable_border_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.ParkingSpace.border_ids)
  return &border_ids_;
}

// required .ndm_proto.Polygon bounding_polygon = 4;
inline bool ParkingSpace::has_bounding_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParkingSpace::set_has_bounding_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParkingSpace::clear_has_bounding_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ndm_proto::Polygon& ParkingSpace::bounding_polygon() const {
  const ::ndm_proto::Polygon* p = bounding_polygon_;
  // @@protoc_insertion_point(field_get:ndm_proto.ParkingSpace.bounding_polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Polygon*>(
      &::ndm_proto::_Polygon_default_instance_);
}
inline ::ndm_proto::Polygon* ParkingSpace::release_bounding_polygon() {
  // @@protoc_insertion_point(field_release:ndm_proto.ParkingSpace.bounding_polygon)
  clear_has_bounding_polygon();
  ::ndm_proto::Polygon* temp = bounding_polygon_;
  bounding_polygon_ = NULL;
  return temp;
}
inline ::ndm_proto::Polygon* ParkingSpace::mutable_bounding_polygon() {
  set_has_bounding_polygon();
  if (bounding_polygon_ == NULL) {
    bounding_polygon_ = new ::ndm_proto::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.ParkingSpace.bounding_polygon)
  return bounding_polygon_;
}
inline void ParkingSpace::set_allocated_bounding_polygon(::ndm_proto::Polygon* bounding_polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_polygon_);
  }
  if (bounding_polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bounding_polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounding_polygon, submessage_arena);
    }
    set_has_bounding_polygon();
  } else {
    clear_has_bounding_polygon();
  }
  bounding_polygon_ = bounding_polygon;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.ParkingSpace.bounding_polygon)
}

// repeated string link_ids = 20;
inline int ParkingSpace::link_ids_size() const {
  return link_ids_.size();
}
inline void ParkingSpace::clear_link_ids() {
  link_ids_.Clear();
}
inline const ::std::string& ParkingSpace::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.ParkingSpace.link_ids)
  return link_ids_.Get(index);
}
inline ::std::string* ParkingSpace::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.ParkingSpace.link_ids)
  return link_ids_.Mutable(index);
}
inline void ParkingSpace::set_link_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.ParkingSpace.link_ids)
  link_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ParkingSpace::set_link_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.ParkingSpace.link_ids)
  link_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ParkingSpace::set_link_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  link_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.ParkingSpace.link_ids)
}
inline void ParkingSpace::set_link_ids(int index, const char* value, size_t size) {
  link_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.ParkingSpace.link_ids)
}
inline ::std::string* ParkingSpace::add_link_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.ParkingSpace.link_ids)
  return link_ids_.Add();
}
inline void ParkingSpace::add_link_ids(const ::std::string& value) {
  link_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.ParkingSpace.link_ids)
}
#if LANG_CXX11
inline void ParkingSpace::add_link_ids(::std::string&& value) {
  link_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.ParkingSpace.link_ids)
}
#endif
inline void ParkingSpace::add_link_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  link_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.ParkingSpace.link_ids)
}
inline void ParkingSpace::add_link_ids(const char* value, size_t size) {
  link_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.ParkingSpace.link_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ParkingSpace::link_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.ParkingSpace.link_ids)
  return link_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ParkingSpace::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.ParkingSpace.link_ids)
  return &link_ids_;
}

// optional .ndm_proto.ParkingSpaceRestriction restriction = 30;
inline bool ParkingSpace::has_restriction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParkingSpace::set_has_restriction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParkingSpace::clear_has_restriction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ndm_proto::ParkingSpaceRestriction& ParkingSpace::restriction() const {
  const ::ndm_proto::ParkingSpaceRestriction* p = restriction_;
  // @@protoc_insertion_point(field_get:ndm_proto.ParkingSpace.restriction)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::ParkingSpaceRestriction*>(
      &::ndm_proto::_ParkingSpaceRestriction_default_instance_);
}
inline ::ndm_proto::ParkingSpaceRestriction* ParkingSpace::release_restriction() {
  // @@protoc_insertion_point(field_release:ndm_proto.ParkingSpace.restriction)
  clear_has_restriction();
  ::ndm_proto::ParkingSpaceRestriction* temp = restriction_;
  restriction_ = NULL;
  return temp;
}
inline ::ndm_proto::ParkingSpaceRestriction* ParkingSpace::mutable_restriction() {
  set_has_restriction();
  if (restriction_ == NULL) {
    restriction_ = new ::ndm_proto::ParkingSpaceRestriction;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.ParkingSpace.restriction)
  return restriction_;
}
inline void ParkingSpace::set_allocated_restriction(::ndm_proto::ParkingSpaceRestriction* restriction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(restriction_);
  }
  if (restriction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      restriction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, restriction, submessage_arena);
    }
    set_has_restriction();
  } else {
    clear_has_restriction();
  }
  restriction_ = restriction;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.ParkingSpace.restriction)
}

// -------------------------------------------------------------------

// Lane

// required string id = 1;
inline bool Lane::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lane::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lane::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lane::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Lane::id() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.id)
  return id_.GetNoArena();
}
inline void Lane::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.id)
}
#if LANG_CXX11
inline void Lane::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ndm_proto.Lane.id)
}
#endif
inline void Lane::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndm_proto.Lane.id)
}
inline void Lane::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Lane.id)
}
inline ::std::string* Lane::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lane::release_id() {
  // @@protoc_insertion_point(field_release:ndm_proto.Lane.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lane::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Lane.id)
}

// repeated string l_laneline_ids = 2;
inline int Lane::l_laneline_ids_size() const {
  return l_laneline_ids_.size();
}
inline void Lane::clear_l_laneline_ids() {
  l_laneline_ids_.Clear();
}
inline const ::std::string& Lane::l_laneline_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.l_laneline_ids)
  return l_laneline_ids_.Get(index);
}
inline ::std::string* Lane::mutable_l_laneline_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.l_laneline_ids)
  return l_laneline_ids_.Mutable(index);
}
inline void Lane::set_l_laneline_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.l_laneline_ids)
  l_laneline_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Lane::set_l_laneline_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.l_laneline_ids)
  l_laneline_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Lane::set_l_laneline_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  l_laneline_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Lane.l_laneline_ids)
}
inline void Lane::set_l_laneline_ids(int index, const char* value, size_t size) {
  l_laneline_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Lane.l_laneline_ids)
}
inline ::std::string* Lane::add_l_laneline_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Lane.l_laneline_ids)
  return l_laneline_ids_.Add();
}
inline void Lane::add_l_laneline_ids(const ::std::string& value) {
  l_laneline_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.l_laneline_ids)
}
#if LANG_CXX11
inline void Lane::add_l_laneline_ids(::std::string&& value) {
  l_laneline_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.l_laneline_ids)
}
#endif
inline void Lane::add_l_laneline_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  l_laneline_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Lane.l_laneline_ids)
}
inline void Lane::add_l_laneline_ids(const char* value, size_t size) {
  l_laneline_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Lane.l_laneline_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Lane::l_laneline_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Lane.l_laneline_ids)
  return l_laneline_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Lane::mutable_l_laneline_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Lane.l_laneline_ids)
  return &l_laneline_ids_;
}

// repeated string l_sub_laneline_ids = 3;
inline int Lane::l_sub_laneline_ids_size() const {
  return l_sub_laneline_ids_.size();
}
inline void Lane::clear_l_sub_laneline_ids() {
  l_sub_laneline_ids_.Clear();
}
inline const ::std::string& Lane::l_sub_laneline_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.l_sub_laneline_ids)
  return l_sub_laneline_ids_.Get(index);
}
inline ::std::string* Lane::mutable_l_sub_laneline_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.l_sub_laneline_ids)
  return l_sub_laneline_ids_.Mutable(index);
}
inline void Lane::set_l_sub_laneline_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.l_sub_laneline_ids)
  l_sub_laneline_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Lane::set_l_sub_laneline_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.l_sub_laneline_ids)
  l_sub_laneline_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Lane::set_l_sub_laneline_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  l_sub_laneline_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Lane.l_sub_laneline_ids)
}
inline void Lane::set_l_sub_laneline_ids(int index, const char* value, size_t size) {
  l_sub_laneline_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Lane.l_sub_laneline_ids)
}
inline ::std::string* Lane::add_l_sub_laneline_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Lane.l_sub_laneline_ids)
  return l_sub_laneline_ids_.Add();
}
inline void Lane::add_l_sub_laneline_ids(const ::std::string& value) {
  l_sub_laneline_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.l_sub_laneline_ids)
}
#if LANG_CXX11
inline void Lane::add_l_sub_laneline_ids(::std::string&& value) {
  l_sub_laneline_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.l_sub_laneline_ids)
}
#endif
inline void Lane::add_l_sub_laneline_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  l_sub_laneline_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Lane.l_sub_laneline_ids)
}
inline void Lane::add_l_sub_laneline_ids(const char* value, size_t size) {
  l_sub_laneline_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Lane.l_sub_laneline_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Lane::l_sub_laneline_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Lane.l_sub_laneline_ids)
  return l_sub_laneline_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Lane::mutable_l_sub_laneline_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Lane.l_sub_laneline_ids)
  return &l_sub_laneline_ids_;
}

// repeated string r_laneline_ids = 4;
inline int Lane::r_laneline_ids_size() const {
  return r_laneline_ids_.size();
}
inline void Lane::clear_r_laneline_ids() {
  r_laneline_ids_.Clear();
}
inline const ::std::string& Lane::r_laneline_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.r_laneline_ids)
  return r_laneline_ids_.Get(index);
}
inline ::std::string* Lane::mutable_r_laneline_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.r_laneline_ids)
  return r_laneline_ids_.Mutable(index);
}
inline void Lane::set_r_laneline_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.r_laneline_ids)
  r_laneline_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Lane::set_r_laneline_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.r_laneline_ids)
  r_laneline_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Lane::set_r_laneline_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  r_laneline_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Lane.r_laneline_ids)
}
inline void Lane::set_r_laneline_ids(int index, const char* value, size_t size) {
  r_laneline_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Lane.r_laneline_ids)
}
inline ::std::string* Lane::add_r_laneline_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Lane.r_laneline_ids)
  return r_laneline_ids_.Add();
}
inline void Lane::add_r_laneline_ids(const ::std::string& value) {
  r_laneline_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.r_laneline_ids)
}
#if LANG_CXX11
inline void Lane::add_r_laneline_ids(::std::string&& value) {
  r_laneline_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.r_laneline_ids)
}
#endif
inline void Lane::add_r_laneline_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  r_laneline_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Lane.r_laneline_ids)
}
inline void Lane::add_r_laneline_ids(const char* value, size_t size) {
  r_laneline_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Lane.r_laneline_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Lane::r_laneline_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Lane.r_laneline_ids)
  return r_laneline_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Lane::mutable_r_laneline_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Lane.r_laneline_ids)
  return &r_laneline_ids_;
}

// repeated string r_sub_laneline_ids = 5;
inline int Lane::r_sub_laneline_ids_size() const {
  return r_sub_laneline_ids_.size();
}
inline void Lane::clear_r_sub_laneline_ids() {
  r_sub_laneline_ids_.Clear();
}
inline const ::std::string& Lane::r_sub_laneline_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.r_sub_laneline_ids)
  return r_sub_laneline_ids_.Get(index);
}
inline ::std::string* Lane::mutable_r_sub_laneline_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.r_sub_laneline_ids)
  return r_sub_laneline_ids_.Mutable(index);
}
inline void Lane::set_r_sub_laneline_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.r_sub_laneline_ids)
  r_sub_laneline_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Lane::set_r_sub_laneline_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.r_sub_laneline_ids)
  r_sub_laneline_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Lane::set_r_sub_laneline_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  r_sub_laneline_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Lane.r_sub_laneline_ids)
}
inline void Lane::set_r_sub_laneline_ids(int index, const char* value, size_t size) {
  r_sub_laneline_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Lane.r_sub_laneline_ids)
}
inline ::std::string* Lane::add_r_sub_laneline_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Lane.r_sub_laneline_ids)
  return r_sub_laneline_ids_.Add();
}
inline void Lane::add_r_sub_laneline_ids(const ::std::string& value) {
  r_sub_laneline_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.r_sub_laneline_ids)
}
#if LANG_CXX11
inline void Lane::add_r_sub_laneline_ids(::std::string&& value) {
  r_sub_laneline_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.r_sub_laneline_ids)
}
#endif
inline void Lane::add_r_sub_laneline_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  r_sub_laneline_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Lane.r_sub_laneline_ids)
}
inline void Lane::add_r_sub_laneline_ids(const char* value, size_t size) {
  r_sub_laneline_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Lane.r_sub_laneline_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Lane::r_sub_laneline_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Lane.r_sub_laneline_ids)
  return r_sub_laneline_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Lane::mutable_r_sub_laneline_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Lane.r_sub_laneline_ids)
  return &r_sub_laneline_ids_;
}

// repeated string driveline_ids = 6;
inline int Lane::driveline_ids_size() const {
  return driveline_ids_.size();
}
inline void Lane::clear_driveline_ids() {
  driveline_ids_.Clear();
}
inline const ::std::string& Lane::driveline_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.driveline_ids)
  return driveline_ids_.Get(index);
}
inline ::std::string* Lane::mutable_driveline_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.driveline_ids)
  return driveline_ids_.Mutable(index);
}
inline void Lane::set_driveline_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.driveline_ids)
  driveline_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Lane::set_driveline_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.driveline_ids)
  driveline_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Lane::set_driveline_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  driveline_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Lane.driveline_ids)
}
inline void Lane::set_driveline_ids(int index, const char* value, size_t size) {
  driveline_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Lane.driveline_ids)
}
inline ::std::string* Lane::add_driveline_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Lane.driveline_ids)
  return driveline_ids_.Add();
}
inline void Lane::add_driveline_ids(const ::std::string& value) {
  driveline_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.driveline_ids)
}
#if LANG_CXX11
inline void Lane::add_driveline_ids(::std::string&& value) {
  driveline_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.driveline_ids)
}
#endif
inline void Lane::add_driveline_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  driveline_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Lane.driveline_ids)
}
inline void Lane::add_driveline_ids(const char* value, size_t size) {
  driveline_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Lane.driveline_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Lane::driveline_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Lane.driveline_ids)
  return driveline_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Lane::mutable_driveline_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Lane.driveline_ids)
  return &driveline_ids_;
}

// optional .ndm_proto.LaneFunction function = 7;
inline bool Lane::has_function() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lane::set_has_function() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lane::clear_has_function() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ndm_proto::LaneFunction& Lane::function() const {
  const ::ndm_proto::LaneFunction* p = function_;
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.function)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::LaneFunction*>(
      &::ndm_proto::_LaneFunction_default_instance_);
}
inline ::ndm_proto::LaneFunction* Lane::release_function() {
  // @@protoc_insertion_point(field_release:ndm_proto.Lane.function)
  clear_has_function();
  ::ndm_proto::LaneFunction* temp = function_;
  function_ = NULL;
  return temp;
}
inline ::ndm_proto::LaneFunction* Lane::mutable_function() {
  set_has_function();
  if (function_ == NULL) {
    function_ = new ::ndm_proto::LaneFunction;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.function)
  return function_;
}
inline void Lane::set_allocated_function(::ndm_proto::LaneFunction* function) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(function_);
  }
  if (function) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      function = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    set_has_function();
  } else {
    clear_has_function();
  }
  function_ = function;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Lane.function)
}

// optional .ndm_proto.LaneDirection direction = 8;
inline bool Lane::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lane::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lane::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ndm_proto::LaneDirection& Lane::direction() const {
  const ::ndm_proto::LaneDirection* p = direction_;
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.direction)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::LaneDirection*>(
      &::ndm_proto::_LaneDirection_default_instance_);
}
inline ::ndm_proto::LaneDirection* Lane::release_direction() {
  // @@protoc_insertion_point(field_release:ndm_proto.Lane.direction)
  clear_has_direction();
  ::ndm_proto::LaneDirection* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline ::ndm_proto::LaneDirection* Lane::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::ndm_proto::LaneDirection;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.direction)
  return direction_;
}
inline void Lane::set_allocated_direction(::ndm_proto::LaneDirection* direction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(direction_);
  }
  if (direction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      direction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    set_has_direction();
  } else {
    clear_has_direction();
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Lane.direction)
}

// required bool virtual = 9 [default = false];
inline bool Lane::has_virtual_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Lane::set_has_virtual_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Lane::clear_has_virtual_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Lane::clear_virtual_() {
  virtual__ = false;
  clear_has_virtual_();
}
inline bool Lane::virtual_() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.virtual)
  return virtual__;
}
inline void Lane::set_virtual_(bool value) {
  set_has_virtual_();
  virtual__ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.virtual)
}

// optional .ndm_proto.LaneTransition transition = 10;
inline bool Lane::has_transition() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Lane::set_has_transition() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Lane::clear_has_transition() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Lane::clear_transition() {
  transition_ = 0;
  clear_has_transition();
}
inline ::ndm_proto::LaneTransition Lane::transition() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.transition)
  return static_cast< ::ndm_proto::LaneTransition >(transition_);
}
inline void Lane::set_transition(::ndm_proto::LaneTransition value) {
  assert(::ndm_proto::LaneTransition_IsValid(value));
  set_has_transition();
  transition_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.transition)
}

// repeated .ndm_proto.LaneAttr attrs = 11;
inline int Lane::attrs_size() const {
  return attrs_.size();
}
inline const ::ndm_proto::LaneAttr& Lane::attrs(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.attrs)
  return attrs_.Get(index);
}
inline ::ndm_proto::LaneAttr* Lane::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.attrs)
  return attrs_.Mutable(index);
}
inline ::ndm_proto::LaneAttr* Lane::add_attrs() {
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.attrs)
  return attrs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneAttr >*
Lane::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Lane.attrs)
  return &attrs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneAttr >&
Lane::attrs() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Lane.attrs)
  return attrs_;
}

// optional float lane_length = 12;
inline bool Lane::has_lane_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Lane::set_has_lane_length() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Lane::clear_has_lane_length() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Lane::clear_lane_length() {
  lane_length_ = 0;
  clear_has_lane_length();
}
inline float Lane::lane_length() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.lane_length)
  return lane_length_;
}
inline void Lane::set_lane_length(float value) {
  set_has_lane_length();
  lane_length_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.lane_length)
}

// optional uint64 type = 13;
inline bool Lane::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Lane::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Lane::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Lane::clear_type() {
  type_ = GOOGLE_ULONGLONG(0);
  clear_has_type();
}
inline ::google::protobuf::uint64 Lane::type() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.type)
  return type_;
}
inline void Lane::set_type(::google::protobuf::uint64 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.type)
}

// repeated .ndm_proto.Link objs = 14;
inline int Lane::objs_size() const {
  return objs_.size();
}
inline const ::ndm_proto::Link& Lane::objs(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.objs)
  return objs_.Get(index);
}
inline ::ndm_proto::Link* Lane::mutable_objs(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.objs)
  return objs_.Mutable(index);
}
inline ::ndm_proto::Link* Lane::add_objs() {
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.objs)
  return objs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::Link >*
Lane::mutable_objs() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Lane.objs)
  return &objs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Link >&
Lane::objs() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Lane.objs)
  return objs_;
}

// repeated string pred_ids = 20;
inline int Lane::pred_ids_size() const {
  return pred_ids_.size();
}
inline void Lane::clear_pred_ids() {
  pred_ids_.Clear();
}
inline const ::std::string& Lane::pred_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.pred_ids)
  return pred_ids_.Get(index);
}
inline ::std::string* Lane::mutable_pred_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.pred_ids)
  return pred_ids_.Mutable(index);
}
inline void Lane::set_pred_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.pred_ids)
  pred_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Lane::set_pred_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.pred_ids)
  pred_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Lane::set_pred_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pred_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Lane.pred_ids)
}
inline void Lane::set_pred_ids(int index, const char* value, size_t size) {
  pred_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Lane.pred_ids)
}
inline ::std::string* Lane::add_pred_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Lane.pred_ids)
  return pred_ids_.Add();
}
inline void Lane::add_pred_ids(const ::std::string& value) {
  pred_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.pred_ids)
}
#if LANG_CXX11
inline void Lane::add_pred_ids(::std::string&& value) {
  pred_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.pred_ids)
}
#endif
inline void Lane::add_pred_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pred_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Lane.pred_ids)
}
inline void Lane::add_pred_ids(const char* value, size_t size) {
  pred_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Lane.pred_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Lane::pred_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Lane.pred_ids)
  return pred_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Lane::mutable_pred_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Lane.pred_ids)
  return &pred_ids_;
}

// repeated string succ_ids = 21;
inline int Lane::succ_ids_size() const {
  return succ_ids_.size();
}
inline void Lane::clear_succ_ids() {
  succ_ids_.Clear();
}
inline const ::std::string& Lane::succ_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.succ_ids)
  return succ_ids_.Get(index);
}
inline ::std::string* Lane::mutable_succ_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.succ_ids)
  return succ_ids_.Mutable(index);
}
inline void Lane::set_succ_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.succ_ids)
  succ_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Lane::set_succ_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.succ_ids)
  succ_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Lane::set_succ_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  succ_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Lane.succ_ids)
}
inline void Lane::set_succ_ids(int index, const char* value, size_t size) {
  succ_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Lane.succ_ids)
}
inline ::std::string* Lane::add_succ_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Lane.succ_ids)
  return succ_ids_.Add();
}
inline void Lane::add_succ_ids(const ::std::string& value) {
  succ_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.succ_ids)
}
#if LANG_CXX11
inline void Lane::add_succ_ids(::std::string&& value) {
  succ_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.succ_ids)
}
#endif
inline void Lane::add_succ_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  succ_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Lane.succ_ids)
}
inline void Lane::add_succ_ids(const char* value, size_t size) {
  succ_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Lane.succ_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Lane::succ_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Lane.succ_ids)
  return succ_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Lane::mutable_succ_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Lane.succ_ids)
  return &succ_ids_;
}

// repeated string left_ids = 22;
inline int Lane::left_ids_size() const {
  return left_ids_.size();
}
inline void Lane::clear_left_ids() {
  left_ids_.Clear();
}
inline const ::std::string& Lane::left_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.left_ids)
  return left_ids_.Get(index);
}
inline ::std::string* Lane::mutable_left_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.left_ids)
  return left_ids_.Mutable(index);
}
inline void Lane::set_left_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.left_ids)
  left_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Lane::set_left_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.left_ids)
  left_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Lane::set_left_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  left_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Lane.left_ids)
}
inline void Lane::set_left_ids(int index, const char* value, size_t size) {
  left_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Lane.left_ids)
}
inline ::std::string* Lane::add_left_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Lane.left_ids)
  return left_ids_.Add();
}
inline void Lane::add_left_ids(const ::std::string& value) {
  left_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.left_ids)
}
#if LANG_CXX11
inline void Lane::add_left_ids(::std::string&& value) {
  left_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.left_ids)
}
#endif
inline void Lane::add_left_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  left_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Lane.left_ids)
}
inline void Lane::add_left_ids(const char* value, size_t size) {
  left_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Lane.left_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Lane::left_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Lane.left_ids)
  return left_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Lane::mutable_left_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Lane.left_ids)
  return &left_ids_;
}

// repeated string right_ids = 23;
inline int Lane::right_ids_size() const {
  return right_ids_.size();
}
inline void Lane::clear_right_ids() {
  right_ids_.Clear();
}
inline const ::std::string& Lane::right_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.right_ids)
  return right_ids_.Get(index);
}
inline ::std::string* Lane::mutable_right_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.right_ids)
  return right_ids_.Mutable(index);
}
inline void Lane::set_right_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.right_ids)
  right_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Lane::set_right_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Lane.right_ids)
  right_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Lane::set_right_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  right_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Lane.right_ids)
}
inline void Lane::set_right_ids(int index, const char* value, size_t size) {
  right_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Lane.right_ids)
}
inline ::std::string* Lane::add_right_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Lane.right_ids)
  return right_ids_.Add();
}
inline void Lane::add_right_ids(const ::std::string& value) {
  right_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.right_ids)
}
#if LANG_CXX11
inline void Lane::add_right_ids(::std::string&& value) {
  right_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.right_ids)
}
#endif
inline void Lane::add_right_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  right_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Lane.right_ids)
}
inline void Lane::add_right_ids(const char* value, size_t size) {
  right_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Lane.right_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Lane::right_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Lane.right_ids)
  return right_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Lane::mutable_right_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Lane.right_ids)
  return &right_ids_;
}

// optional .ndm_proto.LanePriority priority = 24;
inline bool Lane::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lane::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lane::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ndm_proto::LanePriority& Lane::priority() const {
  const ::ndm_proto::LanePriority* p = priority_;
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.priority)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::LanePriority*>(
      &::ndm_proto::_LanePriority_default_instance_);
}
inline ::ndm_proto::LanePriority* Lane::release_priority() {
  // @@protoc_insertion_point(field_release:ndm_proto.Lane.priority)
  clear_has_priority();
  ::ndm_proto::LanePriority* temp = priority_;
  priority_ = NULL;
  return temp;
}
inline ::ndm_proto::LanePriority* Lane::mutable_priority() {
  set_has_priority();
  if (priority_ == NULL) {
    priority_ = new ::ndm_proto::LanePriority;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.priority)
  return priority_;
}
inline void Lane::set_allocated_priority(::ndm_proto::LanePriority* priority) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(priority_);
  }
  if (priority) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      priority = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, priority, submessage_arena);
    }
    set_has_priority();
  } else {
    clear_has_priority();
  }
  priority_ = priority;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Lane.priority)
}

// repeated .ndm_proto.LaneLineRestriction l_restrictions = 30;
inline int Lane::l_restrictions_size() const {
  return l_restrictions_.size();
}
inline const ::ndm_proto::LaneLineRestriction& Lane::l_restrictions(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.l_restrictions)
  return l_restrictions_.Get(index);
}
inline ::ndm_proto::LaneLineRestriction* Lane::mutable_l_restrictions(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.l_restrictions)
  return l_restrictions_.Mutable(index);
}
inline ::ndm_proto::LaneLineRestriction* Lane::add_l_restrictions() {
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.l_restrictions)
  return l_restrictions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLineRestriction >*
Lane::mutable_l_restrictions() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Lane.l_restrictions)
  return &l_restrictions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLineRestriction >&
Lane::l_restrictions() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Lane.l_restrictions)
  return l_restrictions_;
}

// repeated .ndm_proto.LaneLineRestriction r_restrictions = 31;
inline int Lane::r_restrictions_size() const {
  return r_restrictions_.size();
}
inline const ::ndm_proto::LaneLineRestriction& Lane::r_restrictions(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.r_restrictions)
  return r_restrictions_.Get(index);
}
inline ::ndm_proto::LaneLineRestriction* Lane::mutable_r_restrictions(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.r_restrictions)
  return r_restrictions_.Mutable(index);
}
inline ::ndm_proto::LaneLineRestriction* Lane::add_r_restrictions() {
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.r_restrictions)
  return r_restrictions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLineRestriction >*
Lane::mutable_r_restrictions() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Lane.r_restrictions)
  return &r_restrictions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLineRestriction >&
Lane::r_restrictions() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Lane.r_restrictions)
  return r_restrictions_;
}

// repeated .ndm_proto.LaneRestriction restrictions = 32;
inline int Lane::restrictions_size() const {
  return restrictions_.size();
}
inline const ::ndm_proto::LaneRestriction& Lane::restrictions(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.restrictions)
  return restrictions_.Get(index);
}
inline ::ndm_proto::LaneRestriction* Lane::mutable_restrictions(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.restrictions)
  return restrictions_.Mutable(index);
}
inline ::ndm_proto::LaneRestriction* Lane::add_restrictions() {
  // @@protoc_insertion_point(field_add:ndm_proto.Lane.restrictions)
  return restrictions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneRestriction >*
Lane::mutable_restrictions() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Lane.restrictions)
  return &restrictions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneRestriction >&
Lane::restrictions() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Lane.restrictions)
  return restrictions_;
}

// optional .ndm_proto.Polygon bounding_polygon = 33;
inline bool Lane::has_bounding_polygon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Lane::set_has_bounding_polygon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Lane::clear_has_bounding_polygon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ndm_proto::Polygon& Lane::bounding_polygon() const {
  const ::ndm_proto::Polygon* p = bounding_polygon_;
  // @@protoc_insertion_point(field_get:ndm_proto.Lane.bounding_polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Polygon*>(
      &::ndm_proto::_Polygon_default_instance_);
}
inline ::ndm_proto::Polygon* Lane::release_bounding_polygon() {
  // @@protoc_insertion_point(field_release:ndm_proto.Lane.bounding_polygon)
  clear_has_bounding_polygon();
  ::ndm_proto::Polygon* temp = bounding_polygon_;
  bounding_polygon_ = NULL;
  return temp;
}
inline ::ndm_proto::Polygon* Lane::mutable_bounding_polygon() {
  set_has_bounding_polygon();
  if (bounding_polygon_ == NULL) {
    bounding_polygon_ = new ::ndm_proto::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Lane.bounding_polygon)
  return bounding_polygon_;
}
inline void Lane::set_allocated_bounding_polygon(::ndm_proto::Polygon* bounding_polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_polygon_);
  }
  if (bounding_polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bounding_polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounding_polygon, submessage_arena);
    }
    set_has_bounding_polygon();
  } else {
    clear_has_bounding_polygon();
  }
  bounding_polygon_ = bounding_polygon;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Lane.bounding_polygon)
}

// -------------------------------------------------------------------

// Section

// required string id = 1;
inline bool Section::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Section::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Section::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Section::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Section::id() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Section.id)
  return id_.GetNoArena();
}
inline void Section::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndm_proto.Section.id)
}
#if LANG_CXX11
inline void Section::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ndm_proto.Section.id)
}
#endif
inline void Section::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndm_proto.Section.id)
}
inline void Section::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Section.id)
}
inline ::std::string* Section::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ndm_proto.Section.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Section::release_id() {
  // @@protoc_insertion_point(field_release:ndm_proto.Section.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Section::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Section.id)
}

// repeated string lane_ids = 2;
inline int Section::lane_ids_size() const {
  return lane_ids_.size();
}
inline void Section::clear_lane_ids() {
  lane_ids_.Clear();
}
inline const ::std::string& Section::lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Section.lane_ids)
  return lane_ids_.Get(index);
}
inline ::std::string* Section::mutable_lane_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Section.lane_ids)
  return lane_ids_.Mutable(index);
}
inline void Section::set_lane_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Section.lane_ids)
  lane_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Section::set_lane_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Section.lane_ids)
  lane_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Section::set_lane_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lane_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Section.lane_ids)
}
inline void Section::set_lane_ids(int index, const char* value, size_t size) {
  lane_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Section.lane_ids)
}
inline ::std::string* Section::add_lane_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Section.lane_ids)
  return lane_ids_.Add();
}
inline void Section::add_lane_ids(const ::std::string& value) {
  lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Section.lane_ids)
}
#if LANG_CXX11
inline void Section::add_lane_ids(::std::string&& value) {
  lane_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Section.lane_ids)
}
#endif
inline void Section::add_lane_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Section.lane_ids)
}
inline void Section::add_lane_ids(const char* value, size_t size) {
  lane_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Section.lane_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Section::lane_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Section.lane_ids)
  return lane_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Section::mutable_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Section.lane_ids)
  return &lane_ids_;
}

// repeated string l_border_ids = 3;
inline int Section::l_border_ids_size() const {
  return l_border_ids_.size();
}
inline void Section::clear_l_border_ids() {
  l_border_ids_.Clear();
}
inline const ::std::string& Section::l_border_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Section.l_border_ids)
  return l_border_ids_.Get(index);
}
inline ::std::string* Section::mutable_l_border_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Section.l_border_ids)
  return l_border_ids_.Mutable(index);
}
inline void Section::set_l_border_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Section.l_border_ids)
  l_border_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Section::set_l_border_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Section.l_border_ids)
  l_border_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Section::set_l_border_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  l_border_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Section.l_border_ids)
}
inline void Section::set_l_border_ids(int index, const char* value, size_t size) {
  l_border_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Section.l_border_ids)
}
inline ::std::string* Section::add_l_border_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Section.l_border_ids)
  return l_border_ids_.Add();
}
inline void Section::add_l_border_ids(const ::std::string& value) {
  l_border_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Section.l_border_ids)
}
#if LANG_CXX11
inline void Section::add_l_border_ids(::std::string&& value) {
  l_border_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Section.l_border_ids)
}
#endif
inline void Section::add_l_border_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  l_border_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Section.l_border_ids)
}
inline void Section::add_l_border_ids(const char* value, size_t size) {
  l_border_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Section.l_border_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Section::l_border_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Section.l_border_ids)
  return l_border_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Section::mutable_l_border_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Section.l_border_ids)
  return &l_border_ids_;
}

// repeated string r_border_ids = 4;
inline int Section::r_border_ids_size() const {
  return r_border_ids_.size();
}
inline void Section::clear_r_border_ids() {
  r_border_ids_.Clear();
}
inline const ::std::string& Section::r_border_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Section.r_border_ids)
  return r_border_ids_.Get(index);
}
inline ::std::string* Section::mutable_r_border_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Section.r_border_ids)
  return r_border_ids_.Mutable(index);
}
inline void Section::set_r_border_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Section.r_border_ids)
  r_border_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Section::set_r_border_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Section.r_border_ids)
  r_border_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Section::set_r_border_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  r_border_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Section.r_border_ids)
}
inline void Section::set_r_border_ids(int index, const char* value, size_t size) {
  r_border_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Section.r_border_ids)
}
inline ::std::string* Section::add_r_border_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Section.r_border_ids)
  return r_border_ids_.Add();
}
inline void Section::add_r_border_ids(const ::std::string& value) {
  r_border_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Section.r_border_ids)
}
#if LANG_CXX11
inline void Section::add_r_border_ids(::std::string&& value) {
  r_border_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Section.r_border_ids)
}
#endif
inline void Section::add_r_border_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  r_border_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Section.r_border_ids)
}
inline void Section::add_r_border_ids(const char* value, size_t size) {
  r_border_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Section.r_border_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Section::r_border_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Section.r_border_ids)
  return r_border_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Section::mutable_r_border_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Section.r_border_ids)
  return &r_border_ids_;
}

// repeated .ndm_proto.Link objs = 5;
inline int Section::objs_size() const {
  return objs_.size();
}
inline const ::ndm_proto::Link& Section::objs(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Section.objs)
  return objs_.Get(index);
}
inline ::ndm_proto::Link* Section::mutable_objs(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Section.objs)
  return objs_.Mutable(index);
}
inline ::ndm_proto::Link* Section::add_objs() {
  // @@protoc_insertion_point(field_add:ndm_proto.Section.objs)
  return objs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::Link >*
Section::mutable_objs() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Section.objs)
  return &objs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Link >&
Section::objs() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Section.objs)
  return objs_;
}

// optional double length = 6;
inline bool Section::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Section::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Section::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Section::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double Section::length() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Section.length)
  return length_;
}
inline void Section::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Section.length)
}

// repeated string pred_ids = 20;
inline int Section::pred_ids_size() const {
  return pred_ids_.size();
}
inline void Section::clear_pred_ids() {
  pred_ids_.Clear();
}
inline const ::std::string& Section::pred_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Section.pred_ids)
  return pred_ids_.Get(index);
}
inline ::std::string* Section::mutable_pred_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Section.pred_ids)
  return pred_ids_.Mutable(index);
}
inline void Section::set_pred_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Section.pred_ids)
  pred_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Section::set_pred_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Section.pred_ids)
  pred_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Section::set_pred_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pred_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Section.pred_ids)
}
inline void Section::set_pred_ids(int index, const char* value, size_t size) {
  pred_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Section.pred_ids)
}
inline ::std::string* Section::add_pred_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Section.pred_ids)
  return pred_ids_.Add();
}
inline void Section::add_pred_ids(const ::std::string& value) {
  pred_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Section.pred_ids)
}
#if LANG_CXX11
inline void Section::add_pred_ids(::std::string&& value) {
  pred_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Section.pred_ids)
}
#endif
inline void Section::add_pred_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pred_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Section.pred_ids)
}
inline void Section::add_pred_ids(const char* value, size_t size) {
  pred_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Section.pred_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Section::pred_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Section.pred_ids)
  return pred_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Section::mutable_pred_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Section.pred_ids)
  return &pred_ids_;
}

// repeated string succ_ids = 21;
inline int Section::succ_ids_size() const {
  return succ_ids_.size();
}
inline void Section::clear_succ_ids() {
  succ_ids_.Clear();
}
inline const ::std::string& Section::succ_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Section.succ_ids)
  return succ_ids_.Get(index);
}
inline ::std::string* Section::mutable_succ_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Section.succ_ids)
  return succ_ids_.Mutable(index);
}
inline void Section::set_succ_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Section.succ_ids)
  succ_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Section::set_succ_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Section.succ_ids)
  succ_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Section::set_succ_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  succ_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Section.succ_ids)
}
inline void Section::set_succ_ids(int index, const char* value, size_t size) {
  succ_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Section.succ_ids)
}
inline ::std::string* Section::add_succ_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Section.succ_ids)
  return succ_ids_.Add();
}
inline void Section::add_succ_ids(const ::std::string& value) {
  succ_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Section.succ_ids)
}
#if LANG_CXX11
inline void Section::add_succ_ids(::std::string&& value) {
  succ_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Section.succ_ids)
}
#endif
inline void Section::add_succ_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  succ_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Section.succ_ids)
}
inline void Section::add_succ_ids(const char* value, size_t size) {
  succ_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Section.succ_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Section::succ_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Section.succ_ids)
  return succ_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Section::mutable_succ_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Section.succ_ids)
  return &succ_ids_;
}

// repeated string left_ids = 22;
inline int Section::left_ids_size() const {
  return left_ids_.size();
}
inline void Section::clear_left_ids() {
  left_ids_.Clear();
}
inline const ::std::string& Section::left_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Section.left_ids)
  return left_ids_.Get(index);
}
inline ::std::string* Section::mutable_left_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Section.left_ids)
  return left_ids_.Mutable(index);
}
inline void Section::set_left_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Section.left_ids)
  left_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Section::set_left_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Section.left_ids)
  left_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Section::set_left_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  left_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Section.left_ids)
}
inline void Section::set_left_ids(int index, const char* value, size_t size) {
  left_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Section.left_ids)
}
inline ::std::string* Section::add_left_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Section.left_ids)
  return left_ids_.Add();
}
inline void Section::add_left_ids(const ::std::string& value) {
  left_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Section.left_ids)
}
#if LANG_CXX11
inline void Section::add_left_ids(::std::string&& value) {
  left_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Section.left_ids)
}
#endif
inline void Section::add_left_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  left_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Section.left_ids)
}
inline void Section::add_left_ids(const char* value, size_t size) {
  left_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Section.left_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Section::left_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Section.left_ids)
  return left_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Section::mutable_left_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Section.left_ids)
  return &left_ids_;
}

// repeated string right_ids = 23;
inline int Section::right_ids_size() const {
  return right_ids_.size();
}
inline void Section::clear_right_ids() {
  right_ids_.Clear();
}
inline const ::std::string& Section::right_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Section.right_ids)
  return right_ids_.Get(index);
}
inline ::std::string* Section::mutable_right_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Section.right_ids)
  return right_ids_.Mutable(index);
}
inline void Section::set_right_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Section.right_ids)
  right_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Section::set_right_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Section.right_ids)
  right_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Section::set_right_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  right_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Section.right_ids)
}
inline void Section::set_right_ids(int index, const char* value, size_t size) {
  right_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Section.right_ids)
}
inline ::std::string* Section::add_right_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Section.right_ids)
  return right_ids_.Add();
}
inline void Section::add_right_ids(const ::std::string& value) {
  right_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Section.right_ids)
}
#if LANG_CXX11
inline void Section::add_right_ids(::std::string&& value) {
  right_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Section.right_ids)
}
#endif
inline void Section::add_right_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  right_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Section.right_ids)
}
inline void Section::add_right_ids(const char* value, size_t size) {
  right_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Section.right_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Section::right_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Section.right_ids)
  return right_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Section::mutable_right_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Section.right_ids)
  return &right_ids_;
}

// optional .ndm_proto.Polygon bounding_polygon = 30;
inline bool Section::has_bounding_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Section::set_has_bounding_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Section::clear_has_bounding_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ndm_proto::Polygon& Section::bounding_polygon() const {
  const ::ndm_proto::Polygon* p = bounding_polygon_;
  // @@protoc_insertion_point(field_get:ndm_proto.Section.bounding_polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Polygon*>(
      &::ndm_proto::_Polygon_default_instance_);
}
inline ::ndm_proto::Polygon* Section::release_bounding_polygon() {
  // @@protoc_insertion_point(field_release:ndm_proto.Section.bounding_polygon)
  clear_has_bounding_polygon();
  ::ndm_proto::Polygon* temp = bounding_polygon_;
  bounding_polygon_ = NULL;
  return temp;
}
inline ::ndm_proto::Polygon* Section::mutable_bounding_polygon() {
  set_has_bounding_polygon();
  if (bounding_polygon_ == NULL) {
    bounding_polygon_ = new ::ndm_proto::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Section.bounding_polygon)
  return bounding_polygon_;
}
inline void Section::set_allocated_bounding_polygon(::ndm_proto::Polygon* bounding_polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_polygon_);
  }
  if (bounding_polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bounding_polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounding_polygon, submessage_arena);
    }
    set_has_bounding_polygon();
  } else {
    clear_has_bounding_polygon();
  }
  bounding_polygon_ = bounding_polygon;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Section.bounding_polygon)
}

// optional .ndm_proto.SpecialSituationType special_situation_type = 31;
inline bool Section::has_special_situation_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Section::set_has_special_situation_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Section::clear_has_special_situation_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Section::clear_special_situation_type() {
  special_situation_type_ = 248;
  clear_has_special_situation_type();
}
inline ::ndm_proto::SpecialSituationType Section::special_situation_type() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Section.special_situation_type)
  return static_cast< ::ndm_proto::SpecialSituationType >(special_situation_type_);
}
inline void Section::set_special_situation_type(::ndm_proto::SpecialSituationType value) {
  assert(::ndm_proto::SpecialSituationType_IsValid(value));
  set_has_special_situation_type();
  special_situation_type_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Section.special_situation_type)
}

// -------------------------------------------------------------------

// Junction

// required string id = 1;
inline bool Junction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Junction::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Junction::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Junction::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Junction::id() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Junction.id)
  return id_.GetNoArena();
}
inline void Junction::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.id)
}
#if LANG_CXX11
inline void Junction::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ndm_proto.Junction.id)
}
#endif
inline void Junction::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndm_proto.Junction.id)
}
inline void Junction::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Junction.id)
}
inline ::std::string* Junction::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ndm_proto.Junction.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Junction::release_id() {
  // @@protoc_insertion_point(field_release:ndm_proto.Junction.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Junction::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Junction.id)
}

// repeated string border_ids = 2;
inline int Junction::border_ids_size() const {
  return border_ids_.size();
}
inline void Junction::clear_border_ids() {
  border_ids_.Clear();
}
inline const ::std::string& Junction::border_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Junction.border_ids)
  return border_ids_.Get(index);
}
inline ::std::string* Junction::mutable_border_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Junction.border_ids)
  return border_ids_.Mutable(index);
}
inline void Junction::set_border_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.border_ids)
  border_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Junction::set_border_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.border_ids)
  border_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Junction::set_border_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  border_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Junction.border_ids)
}
inline void Junction::set_border_ids(int index, const char* value, size_t size) {
  border_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Junction.border_ids)
}
inline ::std::string* Junction::add_border_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Junction.border_ids)
  return border_ids_.Add();
}
inline void Junction::add_border_ids(const ::std::string& value) {
  border_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.border_ids)
}
#if LANG_CXX11
inline void Junction::add_border_ids(::std::string&& value) {
  border_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.border_ids)
}
#endif
inline void Junction::add_border_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  border_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Junction.border_ids)
}
inline void Junction::add_border_ids(const char* value, size_t size) {
  border_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Junction.border_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Junction::border_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Junction.border_ids)
  return border_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Junction::mutable_border_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Junction.border_ids)
  return &border_ids_;
}

// repeated string crosswalk_ids = 3;
inline int Junction::crosswalk_ids_size() const {
  return crosswalk_ids_.size();
}
inline void Junction::clear_crosswalk_ids() {
  crosswalk_ids_.Clear();
}
inline const ::std::string& Junction::crosswalk_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Junction.crosswalk_ids)
  return crosswalk_ids_.Get(index);
}
inline ::std::string* Junction::mutable_crosswalk_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Junction.crosswalk_ids)
  return crosswalk_ids_.Mutable(index);
}
inline void Junction::set_crosswalk_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.crosswalk_ids)
  crosswalk_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Junction::set_crosswalk_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.crosswalk_ids)
  crosswalk_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Junction::set_crosswalk_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  crosswalk_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Junction.crosswalk_ids)
}
inline void Junction::set_crosswalk_ids(int index, const char* value, size_t size) {
  crosswalk_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Junction.crosswalk_ids)
}
inline ::std::string* Junction::add_crosswalk_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Junction.crosswalk_ids)
  return crosswalk_ids_.Add();
}
inline void Junction::add_crosswalk_ids(const ::std::string& value) {
  crosswalk_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.crosswalk_ids)
}
#if LANG_CXX11
inline void Junction::add_crosswalk_ids(::std::string&& value) {
  crosswalk_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.crosswalk_ids)
}
#endif
inline void Junction::add_crosswalk_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  crosswalk_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Junction.crosswalk_ids)
}
inline void Junction::add_crosswalk_ids(const char* value, size_t size) {
  crosswalk_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Junction.crosswalk_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Junction::crosswalk_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Junction.crosswalk_ids)
  return crosswalk_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Junction::mutable_crosswalk_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Junction.crosswalk_ids)
  return &crosswalk_ids_;
}

// repeated string trafficlight_ids = 4;
inline int Junction::trafficlight_ids_size() const {
  return trafficlight_ids_.size();
}
inline void Junction::clear_trafficlight_ids() {
  trafficlight_ids_.Clear();
}
inline const ::std::string& Junction::trafficlight_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Junction.trafficlight_ids)
  return trafficlight_ids_.Get(index);
}
inline ::std::string* Junction::mutable_trafficlight_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Junction.trafficlight_ids)
  return trafficlight_ids_.Mutable(index);
}
inline void Junction::set_trafficlight_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.trafficlight_ids)
  trafficlight_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Junction::set_trafficlight_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.trafficlight_ids)
  trafficlight_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Junction::set_trafficlight_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  trafficlight_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Junction.trafficlight_ids)
}
inline void Junction::set_trafficlight_ids(int index, const char* value, size_t size) {
  trafficlight_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Junction.trafficlight_ids)
}
inline ::std::string* Junction::add_trafficlight_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Junction.trafficlight_ids)
  return trafficlight_ids_.Add();
}
inline void Junction::add_trafficlight_ids(const ::std::string& value) {
  trafficlight_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.trafficlight_ids)
}
#if LANG_CXX11
inline void Junction::add_trafficlight_ids(::std::string&& value) {
  trafficlight_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.trafficlight_ids)
}
#endif
inline void Junction::add_trafficlight_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  trafficlight_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Junction.trafficlight_ids)
}
inline void Junction::add_trafficlight_ids(const char* value, size_t size) {
  trafficlight_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Junction.trafficlight_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Junction::trafficlight_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Junction.trafficlight_ids)
  return trafficlight_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Junction::mutable_trafficlight_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Junction.trafficlight_ids)
  return &trafficlight_ids_;
}

// repeated string zone_ids = 5;
inline int Junction::zone_ids_size() const {
  return zone_ids_.size();
}
inline void Junction::clear_zone_ids() {
  zone_ids_.Clear();
}
inline const ::std::string& Junction::zone_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Junction.zone_ids)
  return zone_ids_.Get(index);
}
inline ::std::string* Junction::mutable_zone_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Junction.zone_ids)
  return zone_ids_.Mutable(index);
}
inline void Junction::set_zone_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.zone_ids)
  zone_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Junction::set_zone_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.zone_ids)
  zone_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Junction::set_zone_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  zone_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Junction.zone_ids)
}
inline void Junction::set_zone_ids(int index, const char* value, size_t size) {
  zone_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Junction.zone_ids)
}
inline ::std::string* Junction::add_zone_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Junction.zone_ids)
  return zone_ids_.Add();
}
inline void Junction::add_zone_ids(const ::std::string& value) {
  zone_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.zone_ids)
}
#if LANG_CXX11
inline void Junction::add_zone_ids(::std::string&& value) {
  zone_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.zone_ids)
}
#endif
inline void Junction::add_zone_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  zone_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Junction.zone_ids)
}
inline void Junction::add_zone_ids(const char* value, size_t size) {
  zone_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Junction.zone_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Junction::zone_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Junction.zone_ids)
  return zone_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Junction::mutable_zone_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Junction.zone_ids)
  return &zone_ids_;
}

// repeated string trafficsign_ids = 6;
inline int Junction::trafficsign_ids_size() const {
  return trafficsign_ids_.size();
}
inline void Junction::clear_trafficsign_ids() {
  trafficsign_ids_.Clear();
}
inline const ::std::string& Junction::trafficsign_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Junction.trafficsign_ids)
  return trafficsign_ids_.Get(index);
}
inline ::std::string* Junction::mutable_trafficsign_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Junction.trafficsign_ids)
  return trafficsign_ids_.Mutable(index);
}
inline void Junction::set_trafficsign_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.trafficsign_ids)
  trafficsign_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Junction::set_trafficsign_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.trafficsign_ids)
  trafficsign_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Junction::set_trafficsign_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  trafficsign_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Junction.trafficsign_ids)
}
inline void Junction::set_trafficsign_ids(int index, const char* value, size_t size) {
  trafficsign_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Junction.trafficsign_ids)
}
inline ::std::string* Junction::add_trafficsign_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Junction.trafficsign_ids)
  return trafficsign_ids_.Add();
}
inline void Junction::add_trafficsign_ids(const ::std::string& value) {
  trafficsign_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.trafficsign_ids)
}
#if LANG_CXX11
inline void Junction::add_trafficsign_ids(::std::string&& value) {
  trafficsign_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.trafficsign_ids)
}
#endif
inline void Junction::add_trafficsign_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  trafficsign_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Junction.trafficsign_ids)
}
inline void Junction::add_trafficsign_ids(const char* value, size_t size) {
  trafficsign_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Junction.trafficsign_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Junction::trafficsign_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Junction.trafficsign_ids)
  return trafficsign_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Junction::mutable_trafficsign_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Junction.trafficsign_ids)
  return &trafficsign_ids_;
}

// repeated string pole_ids = 7;
inline int Junction::pole_ids_size() const {
  return pole_ids_.size();
}
inline void Junction::clear_pole_ids() {
  pole_ids_.Clear();
}
inline const ::std::string& Junction::pole_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Junction.pole_ids)
  return pole_ids_.Get(index);
}
inline ::std::string* Junction::mutable_pole_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Junction.pole_ids)
  return pole_ids_.Mutable(index);
}
inline void Junction::set_pole_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.pole_ids)
  pole_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Junction::set_pole_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.pole_ids)
  pole_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Junction::set_pole_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pole_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Junction.pole_ids)
}
inline void Junction::set_pole_ids(int index, const char* value, size_t size) {
  pole_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Junction.pole_ids)
}
inline ::std::string* Junction::add_pole_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Junction.pole_ids)
  return pole_ids_.Add();
}
inline void Junction::add_pole_ids(const ::std::string& value) {
  pole_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.pole_ids)
}
#if LANG_CXX11
inline void Junction::add_pole_ids(::std::string&& value) {
  pole_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.pole_ids)
}
#endif
inline void Junction::add_pole_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pole_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Junction.pole_ids)
}
inline void Junction::add_pole_ids(const char* value, size_t size) {
  pole_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Junction.pole_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Junction::pole_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Junction.pole_ids)
  return pole_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Junction::mutable_pole_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Junction.pole_ids)
  return &pole_ids_;
}

// repeated string board_ids = 8;
inline int Junction::board_ids_size() const {
  return board_ids_.size();
}
inline void Junction::clear_board_ids() {
  board_ids_.Clear();
}
inline const ::std::string& Junction::board_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Junction.board_ids)
  return board_ids_.Get(index);
}
inline ::std::string* Junction::mutable_board_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Junction.board_ids)
  return board_ids_.Mutable(index);
}
inline void Junction::set_board_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.board_ids)
  board_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Junction::set_board_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.board_ids)
  board_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Junction::set_board_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  board_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Junction.board_ids)
}
inline void Junction::set_board_ids(int index, const char* value, size_t size) {
  board_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Junction.board_ids)
}
inline ::std::string* Junction::add_board_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Junction.board_ids)
  return board_ids_.Add();
}
inline void Junction::add_board_ids(const ::std::string& value) {
  board_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.board_ids)
}
#if LANG_CXX11
inline void Junction::add_board_ids(::std::string&& value) {
  board_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.board_ids)
}
#endif
inline void Junction::add_board_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  board_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Junction.board_ids)
}
inline void Junction::add_board_ids(const char* value, size_t size) {
  board_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Junction.board_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Junction::board_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Junction.board_ids)
  return board_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Junction::mutable_board_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Junction.board_ids)
  return &board_ids_;
}

// repeated string link_ids = 10;
inline int Junction::link_ids_size() const {
  return link_ids_.size();
}
inline void Junction::clear_link_ids() {
  link_ids_.Clear();
}
inline const ::std::string& Junction::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Junction.link_ids)
  return link_ids_.Get(index);
}
inline ::std::string* Junction::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Junction.link_ids)
  return link_ids_.Mutable(index);
}
inline void Junction::set_link_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.link_ids)
  link_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Junction::set_link_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.link_ids)
  link_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Junction::set_link_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  link_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Junction.link_ids)
}
inline void Junction::set_link_ids(int index, const char* value, size_t size) {
  link_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Junction.link_ids)
}
inline ::std::string* Junction::add_link_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Junction.link_ids)
  return link_ids_.Add();
}
inline void Junction::add_link_ids(const ::std::string& value) {
  link_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.link_ids)
}
#if LANG_CXX11
inline void Junction::add_link_ids(::std::string&& value) {
  link_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.link_ids)
}
#endif
inline void Junction::add_link_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  link_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Junction.link_ids)
}
inline void Junction::add_link_ids(const char* value, size_t size) {
  link_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Junction.link_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Junction::link_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Junction.link_ids)
  return link_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Junction::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Junction.link_ids)
  return &link_ids_;
}

// repeated string lane_ids = 11;
inline int Junction::lane_ids_size() const {
  return lane_ids_.size();
}
inline void Junction::clear_lane_ids() {
  lane_ids_.Clear();
}
inline const ::std::string& Junction::lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Junction.lane_ids)
  return lane_ids_.Get(index);
}
inline ::std::string* Junction::mutable_lane_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Junction.lane_ids)
  return lane_ids_.Mutable(index);
}
inline void Junction::set_lane_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.lane_ids)
  lane_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Junction::set_lane_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.lane_ids)
  lane_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Junction::set_lane_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lane_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Junction.lane_ids)
}
inline void Junction::set_lane_ids(int index, const char* value, size_t size) {
  lane_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Junction.lane_ids)
}
inline ::std::string* Junction::add_lane_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Junction.lane_ids)
  return lane_ids_.Add();
}
inline void Junction::add_lane_ids(const ::std::string& value) {
  lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.lane_ids)
}
#if LANG_CXX11
inline void Junction::add_lane_ids(::std::string&& value) {
  lane_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.lane_ids)
}
#endif
inline void Junction::add_lane_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Junction.lane_ids)
}
inline void Junction::add_lane_ids(const char* value, size_t size) {
  lane_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Junction.lane_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Junction::lane_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Junction.lane_ids)
  return lane_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Junction::mutable_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Junction.lane_ids)
  return &lane_ids_;
}

// optional .ndm_proto.Polygon bounding_polygon = 18;
inline bool Junction::has_bounding_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Junction::set_has_bounding_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Junction::clear_has_bounding_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ndm_proto::Polygon& Junction::bounding_polygon() const {
  const ::ndm_proto::Polygon* p = bounding_polygon_;
  // @@protoc_insertion_point(field_get:ndm_proto.Junction.bounding_polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Polygon*>(
      &::ndm_proto::_Polygon_default_instance_);
}
inline ::ndm_proto::Polygon* Junction::release_bounding_polygon() {
  // @@protoc_insertion_point(field_release:ndm_proto.Junction.bounding_polygon)
  clear_has_bounding_polygon();
  ::ndm_proto::Polygon* temp = bounding_polygon_;
  bounding_polygon_ = NULL;
  return temp;
}
inline ::ndm_proto::Polygon* Junction::mutable_bounding_polygon() {
  set_has_bounding_polygon();
  if (bounding_polygon_ == NULL) {
    bounding_polygon_ = new ::ndm_proto::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Junction.bounding_polygon)
  return bounding_polygon_;
}
inline void Junction::set_allocated_bounding_polygon(::ndm_proto::Polygon* bounding_polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_polygon_);
  }
  if (bounding_polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bounding_polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounding_polygon, submessage_arena);
    }
    set_has_bounding_polygon();
  } else {
    clear_has_bounding_polygon();
  }
  bounding_polygon_ = bounding_polygon;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Junction.bounding_polygon)
}

// repeated string in_link_ids = 21;
inline int Junction::in_link_ids_size() const {
  return in_link_ids_.size();
}
inline void Junction::clear_in_link_ids() {
  in_link_ids_.Clear();
}
inline const ::std::string& Junction::in_link_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Junction.in_link_ids)
  return in_link_ids_.Get(index);
}
inline ::std::string* Junction::mutable_in_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Junction.in_link_ids)
  return in_link_ids_.Mutable(index);
}
inline void Junction::set_in_link_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.in_link_ids)
  in_link_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Junction::set_in_link_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.in_link_ids)
  in_link_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Junction::set_in_link_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  in_link_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Junction.in_link_ids)
}
inline void Junction::set_in_link_ids(int index, const char* value, size_t size) {
  in_link_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Junction.in_link_ids)
}
inline ::std::string* Junction::add_in_link_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Junction.in_link_ids)
  return in_link_ids_.Add();
}
inline void Junction::add_in_link_ids(const ::std::string& value) {
  in_link_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.in_link_ids)
}
#if LANG_CXX11
inline void Junction::add_in_link_ids(::std::string&& value) {
  in_link_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.in_link_ids)
}
#endif
inline void Junction::add_in_link_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  in_link_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Junction.in_link_ids)
}
inline void Junction::add_in_link_ids(const char* value, size_t size) {
  in_link_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Junction.in_link_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Junction::in_link_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Junction.in_link_ids)
  return in_link_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Junction::mutable_in_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Junction.in_link_ids)
  return &in_link_ids_;
}

// repeated string out_link_ids = 22;
inline int Junction::out_link_ids_size() const {
  return out_link_ids_.size();
}
inline void Junction::clear_out_link_ids() {
  out_link_ids_.Clear();
}
inline const ::std::string& Junction::out_link_ids(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Junction.out_link_ids)
  return out_link_ids_.Get(index);
}
inline ::std::string* Junction::mutable_out_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.Junction.out_link_ids)
  return out_link_ids_.Mutable(index);
}
inline void Junction::set_out_link_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.out_link_ids)
  out_link_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Junction::set_out_link_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ndm_proto.Junction.out_link_ids)
  out_link_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Junction::set_out_link_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  out_link_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndm_proto.Junction.out_link_ids)
}
inline void Junction::set_out_link_ids(int index, const char* value, size_t size) {
  out_link_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.Junction.out_link_ids)
}
inline ::std::string* Junction::add_out_link_ids() {
  // @@protoc_insertion_point(field_add_mutable:ndm_proto.Junction.out_link_ids)
  return out_link_ids_.Add();
}
inline void Junction::add_out_link_ids(const ::std::string& value) {
  out_link_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.out_link_ids)
}
#if LANG_CXX11
inline void Junction::add_out_link_ids(::std::string&& value) {
  out_link_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndm_proto.Junction.out_link_ids)
}
#endif
inline void Junction::add_out_link_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  out_link_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndm_proto.Junction.out_link_ids)
}
inline void Junction::add_out_link_ids(const char* value, size_t size) {
  out_link_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndm_proto.Junction.out_link_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Junction::out_link_ids() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Junction.out_link_ids)
  return out_link_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Junction::mutable_out_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Junction.out_link_ids)
  return &out_link_ids_;
}

// -------------------------------------------------------------------

// LogicalLayer

// repeated .ndm_proto.LaneLine virtuallines = 1;
inline int LogicalLayer::virtuallines_size() const {
  return virtuallines_.size();
}
inline const ::ndm_proto::LaneLine& LogicalLayer::virtuallines(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.LogicalLayer.virtuallines)
  return virtuallines_.Get(index);
}
inline ::ndm_proto::LaneLine* LogicalLayer::mutable_virtuallines(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.LogicalLayer.virtuallines)
  return virtuallines_.Mutable(index);
}
inline ::ndm_proto::LaneLine* LogicalLayer::add_virtuallines() {
  // @@protoc_insertion_point(field_add:ndm_proto.LogicalLayer.virtuallines)
  return virtuallines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLine >*
LogicalLayer::mutable_virtuallines() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.LogicalLayer.virtuallines)
  return &virtuallines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::LaneLine >&
LogicalLayer::virtuallines() const {
  // @@protoc_insertion_point(field_list:ndm_proto.LogicalLayer.virtuallines)
  return virtuallines_;
}

// repeated .ndm_proto.Lane lanes = 2;
inline int LogicalLayer::lanes_size() const {
  return lanes_.size();
}
inline void LogicalLayer::clear_lanes() {
  lanes_.Clear();
}
inline const ::ndm_proto::Lane& LogicalLayer::lanes(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.LogicalLayer.lanes)
  return lanes_.Get(index);
}
inline ::ndm_proto::Lane* LogicalLayer::mutable_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.LogicalLayer.lanes)
  return lanes_.Mutable(index);
}
inline ::ndm_proto::Lane* LogicalLayer::add_lanes() {
  // @@protoc_insertion_point(field_add:ndm_proto.LogicalLayer.lanes)
  return lanes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::Lane >*
LogicalLayer::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.LogicalLayer.lanes)
  return &lanes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Lane >&
LogicalLayer::lanes() const {
  // @@protoc_insertion_point(field_list:ndm_proto.LogicalLayer.lanes)
  return lanes_;
}

// repeated .ndm_proto.Lane virtual_lanes = 3;
inline int LogicalLayer::virtual_lanes_size() const {
  return virtual_lanes_.size();
}
inline void LogicalLayer::clear_virtual_lanes() {
  virtual_lanes_.Clear();
}
inline const ::ndm_proto::Lane& LogicalLayer::virtual_lanes(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.LogicalLayer.virtual_lanes)
  return virtual_lanes_.Get(index);
}
inline ::ndm_proto::Lane* LogicalLayer::mutable_virtual_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.LogicalLayer.virtual_lanes)
  return virtual_lanes_.Mutable(index);
}
inline ::ndm_proto::Lane* LogicalLayer::add_virtual_lanes() {
  // @@protoc_insertion_point(field_add:ndm_proto.LogicalLayer.virtual_lanes)
  return virtual_lanes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::Lane >*
LogicalLayer::mutable_virtual_lanes() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.LogicalLayer.virtual_lanes)
  return &virtual_lanes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Lane >&
LogicalLayer::virtual_lanes() const {
  // @@protoc_insertion_point(field_list:ndm_proto.LogicalLayer.virtual_lanes)
  return virtual_lanes_;
}

// repeated .ndm_proto.ParkingSpace parkingspaces = 4;
inline int LogicalLayer::parkingspaces_size() const {
  return parkingspaces_.size();
}
inline void LogicalLayer::clear_parkingspaces() {
  parkingspaces_.Clear();
}
inline const ::ndm_proto::ParkingSpace& LogicalLayer::parkingspaces(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.LogicalLayer.parkingspaces)
  return parkingspaces_.Get(index);
}
inline ::ndm_proto::ParkingSpace* LogicalLayer::mutable_parkingspaces(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.LogicalLayer.parkingspaces)
  return parkingspaces_.Mutable(index);
}
inline ::ndm_proto::ParkingSpace* LogicalLayer::add_parkingspaces() {
  // @@protoc_insertion_point(field_add:ndm_proto.LogicalLayer.parkingspaces)
  return parkingspaces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::ParkingSpace >*
LogicalLayer::mutable_parkingspaces() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.LogicalLayer.parkingspaces)
  return &parkingspaces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::ParkingSpace >&
LogicalLayer::parkingspaces() const {
  // @@protoc_insertion_point(field_list:ndm_proto.LogicalLayer.parkingspaces)
  return parkingspaces_;
}

// repeated .ndm_proto.Section sections = 5;
inline int LogicalLayer::sections_size() const {
  return sections_.size();
}
inline void LogicalLayer::clear_sections() {
  sections_.Clear();
}
inline const ::ndm_proto::Section& LogicalLayer::sections(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.LogicalLayer.sections)
  return sections_.Get(index);
}
inline ::ndm_proto::Section* LogicalLayer::mutable_sections(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.LogicalLayer.sections)
  return sections_.Mutable(index);
}
inline ::ndm_proto::Section* LogicalLayer::add_sections() {
  // @@protoc_insertion_point(field_add:ndm_proto.LogicalLayer.sections)
  return sections_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::Section >*
LogicalLayer::mutable_sections() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.LogicalLayer.sections)
  return &sections_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Section >&
LogicalLayer::sections() const {
  // @@protoc_insertion_point(field_list:ndm_proto.LogicalLayer.sections)
  return sections_;
}

// repeated .ndm_proto.Junction junctions = 6;
inline int LogicalLayer::junctions_size() const {
  return junctions_.size();
}
inline void LogicalLayer::clear_junctions() {
  junctions_.Clear();
}
inline const ::ndm_proto::Junction& LogicalLayer::junctions(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.LogicalLayer.junctions)
  return junctions_.Get(index);
}
inline ::ndm_proto::Junction* LogicalLayer::mutable_junctions(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.LogicalLayer.junctions)
  return junctions_.Mutable(index);
}
inline ::ndm_proto::Junction* LogicalLayer::add_junctions() {
  // @@protoc_insertion_point(field_add:ndm_proto.LogicalLayer.junctions)
  return junctions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::Junction >*
LogicalLayer::mutable_junctions() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.LogicalLayer.junctions)
  return &junctions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Junction >&
LogicalLayer::junctions() const {
  // @@protoc_insertion_point(field_list:ndm_proto.LogicalLayer.junctions)
  return junctions_;
}

// repeated .ndm_proto.Elevation elevations = 7;
inline int LogicalLayer::elevations_size() const {
  return elevations_.size();
}
inline void LogicalLayer::clear_elevations() {
  elevations_.Clear();
}
inline const ::ndm_proto::Elevation& LogicalLayer::elevations(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.LogicalLayer.elevations)
  return elevations_.Get(index);
}
inline ::ndm_proto::Elevation* LogicalLayer::mutable_elevations(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.LogicalLayer.elevations)
  return elevations_.Mutable(index);
}
inline ::ndm_proto::Elevation* LogicalLayer::add_elevations() {
  // @@protoc_insertion_point(field_add:ndm_proto.LogicalLayer.elevations)
  return elevations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::Elevation >*
LogicalLayer::mutable_elevations() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.LogicalLayer.elevations)
  return &elevations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::Elevation >&
LogicalLayer::elevations() const {
  // @@protoc_insertion_point(field_list:ndm_proto.LogicalLayer.elevations)
  return elevations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ndm_proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logical_5flayer_2eproto__INCLUDED
