// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#ifndef PROTOBUF_location_2eproto__INCLUDED
#define PROTOBUF_location_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_location_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLocationImpl();
void InitDefaultsLocation();
void InitDefaultsRelativePositionImpl();
void InitDefaultsRelativePosition();
void InitDefaultsRelativePositionMessageImpl();
void InitDefaultsRelativePositionMessage();
inline void InitDefaults() {
  InitDefaultsLocation();
  InitDefaultsRelativePosition();
  InitDefaultsRelativePositionMessage();
}
}  // namespace protobuf_location_2eproto
namespace ndm_proto {
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class RelativePosition;
class RelativePositionDefaultTypeInternal;
extern RelativePositionDefaultTypeInternal _RelativePosition_default_instance_;
class RelativePositionMessage;
class RelativePositionMessageDefaultTypeInternal;
extern RelativePositionMessageDefaultTypeInternal _RelativePositionMessage_default_instance_;
}  // namespace ndm_proto
namespace ndm_proto {

// ===================================================================

class Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Location* other);
  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const PROTOBUF_FINAL { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 module_state = 6;
  int module_state_size() const;
  void clear_module_state();
  static const int kModuleStateFieldNumber = 6;
  ::google::protobuf::uint32 module_state(int index) const;
  void set_module_state(int index, ::google::protobuf::uint32 value);
  void add_module_state(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      module_state() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_module_state();

  // repeated uint32 module_error = 7;
  int module_error_size() const;
  void clear_module_error();
  static const int kModuleErrorFieldNumber = 7;
  ::google::protobuf::uint32 module_error(int index) const;
  void set_module_error(int index, ::google::protobuf::uint32 value);
  void add_module_error(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      module_error() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_module_error();

  // required .ndm_proto.Odometry odom = 1;
  bool has_odom() const;
  void clear_odom();
  static const int kOdomFieldNumber = 1;
  const ::ndm_proto::Odometry& odom() const;
  ::ndm_proto::Odometry* release_odom();
  ::ndm_proto::Odometry* mutable_odom();
  void set_allocated_odom(::ndm_proto::Odometry* odom);

  // required .ndm_proto.WGS84 coordinate = 2;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 2;
  const ::ndm_proto::WGS84& coordinate() const;
  ::ndm_proto::WGS84* release_coordinate();
  ::ndm_proto::WGS84* mutable_coordinate();
  void set_allocated_coordinate(::ndm_proto::WGS84* coordinate);

  // required uint32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::uint32 state() const;
  void set_state(::google::protobuf::uint32 value);

  // optional uint32 error_code = 4;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 4;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ndm_proto.Location)
 private:
  void set_has_odom();
  void clear_has_odom();
  void set_has_coordinate();
  void clear_has_coordinate();
  void set_has_state();
  void clear_has_state();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > module_state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > module_error_;
  ::ndm_proto::Odometry* odom_;
  ::ndm_proto::WGS84* coordinate_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 type_;
  friend struct ::protobuf_location_2eproto::TableStruct;
  friend void ::protobuf_location_2eproto::InitDefaultsLocationImpl();
};
// -------------------------------------------------------------------

class RelativePosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.RelativePosition) */ {
 public:
  RelativePosition();
  virtual ~RelativePosition();

  RelativePosition(const RelativePosition& from);

  inline RelativePosition& operator=(const RelativePosition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelativePosition(RelativePosition&& from) noexcept
    : RelativePosition() {
    *this = ::std::move(from);
  }

  inline RelativePosition& operator=(RelativePosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelativePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelativePosition* internal_default_instance() {
    return reinterpret_cast<const RelativePosition*>(
               &_RelativePosition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RelativePosition* other);
  friend void swap(RelativePosition& a, RelativePosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelativePosition* New() const PROTOBUF_FINAL { return New(NULL); }

  RelativePosition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RelativePosition& from);
  void MergeFrom(const RelativePosition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RelativePosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string road_id = 1;
  bool has_road_id() const;
  void clear_road_id();
  static const int kRoadIdFieldNumber = 1;
  const ::std::string& road_id() const;
  void set_road_id(const ::std::string& value);
  #if LANG_CXX11
  void set_road_id(::std::string&& value);
  #endif
  void set_road_id(const char* value);
  void set_road_id(const char* value, size_t size);
  ::std::string* mutable_road_id();
  ::std::string* release_road_id();
  void set_allocated_road_id(::std::string* road_id);

  // required string current_section_id = 8;
  bool has_current_section_id() const;
  void clear_current_section_id();
  static const int kCurrentSectionIdFieldNumber = 8;
  const ::std::string& current_section_id() const;
  void set_current_section_id(const ::std::string& value);
  #if LANG_CXX11
  void set_current_section_id(::std::string&& value);
  #endif
  void set_current_section_id(const char* value);
  void set_current_section_id(const char* value, size_t size);
  ::std::string* mutable_current_section_id();
  ::std::string* release_current_section_id();
  void set_allocated_current_section_id(::std::string* current_section_id);

  // optional string preferred_road_id = 10;
  bool has_preferred_road_id() const;
  void clear_preferred_road_id();
  static const int kPreferredRoadIdFieldNumber = 10;
  const ::std::string& preferred_road_id() const;
  void set_preferred_road_id(const ::std::string& value);
  #if LANG_CXX11
  void set_preferred_road_id(::std::string&& value);
  #endif
  void set_preferred_road_id(const char* value);
  void set_preferred_road_id(const char* value, size_t size);
  ::std::string* mutable_preferred_road_id();
  ::std::string* release_preferred_road_id();
  void set_allocated_preferred_road_id(::std::string* preferred_road_id);

  // required uint32 offset = 2;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // required uint32 accuracy = 3;
  bool has_accuracy() const;
  void clear_accuracy();
  static const int kAccuracyFieldNumber = 3;
  ::google::protobuf::uint32 accuracy() const;
  void set_accuracy(::google::protobuf::uint32 value);

  // required int32 deviation = 4;
  bool has_deviation() const;
  void clear_deviation();
  static const int kDeviationFieldNumber = 4;
  ::google::protobuf::int32 deviation() const;
  void set_deviation(::google::protobuf::int32 value);

  // required float speed = 5;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  float speed() const;
  void set_speed(float value);

  // required float relative_heading = 6;
  bool has_relative_heading() const;
  void clear_relative_heading();
  static const int kRelativeHeadingFieldNumber = 6;
  float relative_heading() const;
  void set_relative_heading(float value);

  // required float probability = 7;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 7;
  float probability() const;
  void set_probability(float value);

  // required uint32 current_lane_idx = 9;
  bool has_current_lane_idx() const;
  void clear_current_lane_idx();
  static const int kCurrentLaneIdxFieldNumber = 9;
  ::google::protobuf::uint32 current_lane_idx() const;
  void set_current_lane_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ndm_proto.RelativePosition)
 private:
  void set_has_road_id();
  void clear_has_road_id();
  void set_has_offset();
  void clear_has_offset();
  void set_has_accuracy();
  void clear_has_accuracy();
  void set_has_deviation();
  void clear_has_deviation();
  void set_has_speed();
  void clear_has_speed();
  void set_has_relative_heading();
  void clear_has_relative_heading();
  void set_has_probability();
  void clear_has_probability();
  void set_has_current_section_id();
  void clear_has_current_section_id();
  void set_has_current_lane_idx();
  void clear_has_current_lane_idx();
  void set_has_preferred_road_id();
  void clear_has_preferred_road_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr road_id_;
  ::google::protobuf::internal::ArenaStringPtr current_section_id_;
  ::google::protobuf::internal::ArenaStringPtr preferred_road_id_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 accuracy_;
  ::google::protobuf::int32 deviation_;
  float speed_;
  float relative_heading_;
  float probability_;
  ::google::protobuf::uint32 current_lane_idx_;
  friend struct ::protobuf_location_2eproto::TableStruct;
  friend void ::protobuf_location_2eproto::InitDefaultsRelativePositionImpl();
};
// -------------------------------------------------------------------

class RelativePositionMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ndm_proto.RelativePositionMessage) */ {
 public:
  RelativePositionMessage();
  virtual ~RelativePositionMessage();

  RelativePositionMessage(const RelativePositionMessage& from);

  inline RelativePositionMessage& operator=(const RelativePositionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelativePositionMessage(RelativePositionMessage&& from) noexcept
    : RelativePositionMessage() {
    *this = ::std::move(from);
  }

  inline RelativePositionMessage& operator=(RelativePositionMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelativePositionMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelativePositionMessage* internal_default_instance() {
    return reinterpret_cast<const RelativePositionMessage*>(
               &_RelativePositionMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RelativePositionMessage* other);
  friend void swap(RelativePositionMessage& a, RelativePositionMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelativePositionMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  RelativePositionMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RelativePositionMessage& from);
  void MergeFrom(const RelativePositionMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RelativePositionMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ndm_proto.RelativePosition positions = 3;
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 3;
  const ::ndm_proto::RelativePosition& positions(int index) const;
  ::ndm_proto::RelativePosition* mutable_positions(int index);
  ::ndm_proto::RelativePosition* add_positions();
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::RelativePosition >*
      mutable_positions();
  const ::google::protobuf::RepeatedPtrField< ::ndm_proto::RelativePosition >&
      positions() const;

  // required uint64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // required uint64 positionAge = 2;
  bool has_positionage() const;
  void clear_positionage();
  static const int kPositionAgeFieldNumber = 2;
  ::google::protobuf::uint64 positionage() const;
  void set_positionage(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ndm_proto.RelativePositionMessage)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_positionage();
  void clear_has_positionage();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ndm_proto::RelativePosition > positions_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 positionage_;
  friend struct ::protobuf_location_2eproto::TableStruct;
  friend void ::protobuf_location_2eproto::InitDefaultsRelativePositionMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Location

// required .ndm_proto.Odometry odom = 1;
inline bool Location::has_odom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Location::set_has_odom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Location::clear_has_odom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ndm_proto::Odometry& Location::odom() const {
  const ::ndm_proto::Odometry* p = odom_;
  // @@protoc_insertion_point(field_get:ndm_proto.Location.odom)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::Odometry*>(
      &::ndm_proto::_Odometry_default_instance_);
}
inline ::ndm_proto::Odometry* Location::release_odom() {
  // @@protoc_insertion_point(field_release:ndm_proto.Location.odom)
  clear_has_odom();
  ::ndm_proto::Odometry* temp = odom_;
  odom_ = NULL;
  return temp;
}
inline ::ndm_proto::Odometry* Location::mutable_odom() {
  set_has_odom();
  if (odom_ == NULL) {
    odom_ = new ::ndm_proto::Odometry;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Location.odom)
  return odom_;
}
inline void Location::set_allocated_odom(::ndm_proto::Odometry* odom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(odom_);
  }
  if (odom) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      odom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, odom, submessage_arena);
    }
    set_has_odom();
  } else {
    clear_has_odom();
  }
  odom_ = odom;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Location.odom)
}

// required .ndm_proto.WGS84 coordinate = 2;
inline bool Location::has_coordinate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Location::set_has_coordinate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Location::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ndm_proto::WGS84& Location::coordinate() const {
  const ::ndm_proto::WGS84* p = coordinate_;
  // @@protoc_insertion_point(field_get:ndm_proto.Location.coordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::ndm_proto::WGS84*>(
      &::ndm_proto::_WGS84_default_instance_);
}
inline ::ndm_proto::WGS84* Location::release_coordinate() {
  // @@protoc_insertion_point(field_release:ndm_proto.Location.coordinate)
  clear_has_coordinate();
  ::ndm_proto::WGS84* temp = coordinate_;
  coordinate_ = NULL;
  return temp;
}
inline ::ndm_proto::WGS84* Location::mutable_coordinate() {
  set_has_coordinate();
  if (coordinate_ == NULL) {
    coordinate_ = new ::ndm_proto::WGS84;
  }
  // @@protoc_insertion_point(field_mutable:ndm_proto.Location.coordinate)
  return coordinate_;
}
inline void Location::set_allocated_coordinate(::ndm_proto::WGS84* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    set_has_coordinate();
  } else {
    clear_has_coordinate();
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.Location.coordinate)
}

// required uint32 state = 3;
inline bool Location::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Location::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Location::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Location::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 Location::state() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Location.state)
  return state_;
}
inline void Location::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Location.state)
}

// optional uint32 error_code = 4;
inline bool Location::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Location::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Location::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Location::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Location::error_code() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Location.error_code)
  return error_code_;
}
inline void Location::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Location.error_code)
}

// optional uint32 type = 5;
inline bool Location::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Location::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Location::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Location::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Location::type() const {
  // @@protoc_insertion_point(field_get:ndm_proto.Location.type)
  return type_;
}
inline void Location::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.Location.type)
}

// repeated uint32 module_state = 6;
inline int Location::module_state_size() const {
  return module_state_.size();
}
inline void Location::clear_module_state() {
  module_state_.Clear();
}
inline ::google::protobuf::uint32 Location::module_state(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Location.module_state)
  return module_state_.Get(index);
}
inline void Location::set_module_state(int index, ::google::protobuf::uint32 value) {
  module_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:ndm_proto.Location.module_state)
}
inline void Location::add_module_state(::google::protobuf::uint32 value) {
  module_state_.Add(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Location.module_state)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Location::module_state() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Location.module_state)
  return module_state_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Location::mutable_module_state() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Location.module_state)
  return &module_state_;
}

// repeated uint32 module_error = 7;
inline int Location::module_error_size() const {
  return module_error_.size();
}
inline void Location::clear_module_error() {
  module_error_.Clear();
}
inline ::google::protobuf::uint32 Location::module_error(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.Location.module_error)
  return module_error_.Get(index);
}
inline void Location::set_module_error(int index, ::google::protobuf::uint32 value) {
  module_error_.Set(index, value);
  // @@protoc_insertion_point(field_set:ndm_proto.Location.module_error)
}
inline void Location::add_module_error(::google::protobuf::uint32 value) {
  module_error_.Add(value);
  // @@protoc_insertion_point(field_add:ndm_proto.Location.module_error)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Location::module_error() const {
  // @@protoc_insertion_point(field_list:ndm_proto.Location.module_error)
  return module_error_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Location::mutable_module_error() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.Location.module_error)
  return &module_error_;
}

// -------------------------------------------------------------------

// RelativePosition

// required string road_id = 1;
inline bool RelativePosition::has_road_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelativePosition::set_has_road_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelativePosition::clear_has_road_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelativePosition::clear_road_id() {
  road_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_road_id();
}
inline const ::std::string& RelativePosition::road_id() const {
  // @@protoc_insertion_point(field_get:ndm_proto.RelativePosition.road_id)
  return road_id_.GetNoArena();
}
inline void RelativePosition::set_road_id(const ::std::string& value) {
  set_has_road_id();
  road_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndm_proto.RelativePosition.road_id)
}
#if LANG_CXX11
inline void RelativePosition::set_road_id(::std::string&& value) {
  set_has_road_id();
  road_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ndm_proto.RelativePosition.road_id)
}
#endif
inline void RelativePosition::set_road_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_road_id();
  road_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndm_proto.RelativePosition.road_id)
}
inline void RelativePosition::set_road_id(const char* value, size_t size) {
  set_has_road_id();
  road_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.RelativePosition.road_id)
}
inline ::std::string* RelativePosition::mutable_road_id() {
  set_has_road_id();
  // @@protoc_insertion_point(field_mutable:ndm_proto.RelativePosition.road_id)
  return road_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelativePosition::release_road_id() {
  // @@protoc_insertion_point(field_release:ndm_proto.RelativePosition.road_id)
  clear_has_road_id();
  return road_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelativePosition::set_allocated_road_id(::std::string* road_id) {
  if (road_id != NULL) {
    set_has_road_id();
  } else {
    clear_has_road_id();
  }
  road_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), road_id);
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.RelativePosition.road_id)
}

// required uint32 offset = 2;
inline bool RelativePosition::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RelativePosition::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RelativePosition::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RelativePosition::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 RelativePosition::offset() const {
  // @@protoc_insertion_point(field_get:ndm_proto.RelativePosition.offset)
  return offset_;
}
inline void RelativePosition::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.RelativePosition.offset)
}

// required uint32 accuracy = 3;
inline bool RelativePosition::has_accuracy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RelativePosition::set_has_accuracy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RelativePosition::clear_has_accuracy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RelativePosition::clear_accuracy() {
  accuracy_ = 0u;
  clear_has_accuracy();
}
inline ::google::protobuf::uint32 RelativePosition::accuracy() const {
  // @@protoc_insertion_point(field_get:ndm_proto.RelativePosition.accuracy)
  return accuracy_;
}
inline void RelativePosition::set_accuracy(::google::protobuf::uint32 value) {
  set_has_accuracy();
  accuracy_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.RelativePosition.accuracy)
}

// required int32 deviation = 4;
inline bool RelativePosition::has_deviation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RelativePosition::set_has_deviation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RelativePosition::clear_has_deviation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RelativePosition::clear_deviation() {
  deviation_ = 0;
  clear_has_deviation();
}
inline ::google::protobuf::int32 RelativePosition::deviation() const {
  // @@protoc_insertion_point(field_get:ndm_proto.RelativePosition.deviation)
  return deviation_;
}
inline void RelativePosition::set_deviation(::google::protobuf::int32 value) {
  set_has_deviation();
  deviation_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.RelativePosition.deviation)
}

// required float speed = 5;
inline bool RelativePosition::has_speed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RelativePosition::set_has_speed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RelativePosition::clear_has_speed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RelativePosition::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float RelativePosition::speed() const {
  // @@protoc_insertion_point(field_get:ndm_proto.RelativePosition.speed)
  return speed_;
}
inline void RelativePosition::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.RelativePosition.speed)
}

// required float relative_heading = 6;
inline bool RelativePosition::has_relative_heading() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RelativePosition::set_has_relative_heading() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RelativePosition::clear_has_relative_heading() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RelativePosition::clear_relative_heading() {
  relative_heading_ = 0;
  clear_has_relative_heading();
}
inline float RelativePosition::relative_heading() const {
  // @@protoc_insertion_point(field_get:ndm_proto.RelativePosition.relative_heading)
  return relative_heading_;
}
inline void RelativePosition::set_relative_heading(float value) {
  set_has_relative_heading();
  relative_heading_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.RelativePosition.relative_heading)
}

// required float probability = 7;
inline bool RelativePosition::has_probability() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RelativePosition::set_has_probability() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RelativePosition::clear_has_probability() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RelativePosition::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline float RelativePosition::probability() const {
  // @@protoc_insertion_point(field_get:ndm_proto.RelativePosition.probability)
  return probability_;
}
inline void RelativePosition::set_probability(float value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.RelativePosition.probability)
}

// required string current_section_id = 8;
inline bool RelativePosition::has_current_section_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelativePosition::set_has_current_section_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelativePosition::clear_has_current_section_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelativePosition::clear_current_section_id() {
  current_section_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_current_section_id();
}
inline const ::std::string& RelativePosition::current_section_id() const {
  // @@protoc_insertion_point(field_get:ndm_proto.RelativePosition.current_section_id)
  return current_section_id_.GetNoArena();
}
inline void RelativePosition::set_current_section_id(const ::std::string& value) {
  set_has_current_section_id();
  current_section_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndm_proto.RelativePosition.current_section_id)
}
#if LANG_CXX11
inline void RelativePosition::set_current_section_id(::std::string&& value) {
  set_has_current_section_id();
  current_section_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ndm_proto.RelativePosition.current_section_id)
}
#endif
inline void RelativePosition::set_current_section_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_current_section_id();
  current_section_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndm_proto.RelativePosition.current_section_id)
}
inline void RelativePosition::set_current_section_id(const char* value, size_t size) {
  set_has_current_section_id();
  current_section_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.RelativePosition.current_section_id)
}
inline ::std::string* RelativePosition::mutable_current_section_id() {
  set_has_current_section_id();
  // @@protoc_insertion_point(field_mutable:ndm_proto.RelativePosition.current_section_id)
  return current_section_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelativePosition::release_current_section_id() {
  // @@protoc_insertion_point(field_release:ndm_proto.RelativePosition.current_section_id)
  clear_has_current_section_id();
  return current_section_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelativePosition::set_allocated_current_section_id(::std::string* current_section_id) {
  if (current_section_id != NULL) {
    set_has_current_section_id();
  } else {
    clear_has_current_section_id();
  }
  current_section_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_section_id);
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.RelativePosition.current_section_id)
}

// required uint32 current_lane_idx = 9;
inline bool RelativePosition::has_current_lane_idx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RelativePosition::set_has_current_lane_idx() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RelativePosition::clear_has_current_lane_idx() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RelativePosition::clear_current_lane_idx() {
  current_lane_idx_ = 0u;
  clear_has_current_lane_idx();
}
inline ::google::protobuf::uint32 RelativePosition::current_lane_idx() const {
  // @@protoc_insertion_point(field_get:ndm_proto.RelativePosition.current_lane_idx)
  return current_lane_idx_;
}
inline void RelativePosition::set_current_lane_idx(::google::protobuf::uint32 value) {
  set_has_current_lane_idx();
  current_lane_idx_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.RelativePosition.current_lane_idx)
}

// optional string preferred_road_id = 10;
inline bool RelativePosition::has_preferred_road_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RelativePosition::set_has_preferred_road_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RelativePosition::clear_has_preferred_road_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RelativePosition::clear_preferred_road_id() {
  preferred_road_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preferred_road_id();
}
inline const ::std::string& RelativePosition::preferred_road_id() const {
  // @@protoc_insertion_point(field_get:ndm_proto.RelativePosition.preferred_road_id)
  return preferred_road_id_.GetNoArena();
}
inline void RelativePosition::set_preferred_road_id(const ::std::string& value) {
  set_has_preferred_road_id();
  preferred_road_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndm_proto.RelativePosition.preferred_road_id)
}
#if LANG_CXX11
inline void RelativePosition::set_preferred_road_id(::std::string&& value) {
  set_has_preferred_road_id();
  preferred_road_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ndm_proto.RelativePosition.preferred_road_id)
}
#endif
inline void RelativePosition::set_preferred_road_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preferred_road_id();
  preferred_road_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndm_proto.RelativePosition.preferred_road_id)
}
inline void RelativePosition::set_preferred_road_id(const char* value, size_t size) {
  set_has_preferred_road_id();
  preferred_road_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndm_proto.RelativePosition.preferred_road_id)
}
inline ::std::string* RelativePosition::mutable_preferred_road_id() {
  set_has_preferred_road_id();
  // @@protoc_insertion_point(field_mutable:ndm_proto.RelativePosition.preferred_road_id)
  return preferred_road_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelativePosition::release_preferred_road_id() {
  // @@protoc_insertion_point(field_release:ndm_proto.RelativePosition.preferred_road_id)
  clear_has_preferred_road_id();
  return preferred_road_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelativePosition::set_allocated_preferred_road_id(::std::string* preferred_road_id) {
  if (preferred_road_id != NULL) {
    set_has_preferred_road_id();
  } else {
    clear_has_preferred_road_id();
  }
  preferred_road_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preferred_road_id);
  // @@protoc_insertion_point(field_set_allocated:ndm_proto.RelativePosition.preferred_road_id)
}

// -------------------------------------------------------------------

// RelativePositionMessage

// required uint64 timestamp = 1;
inline bool RelativePositionMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelativePositionMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelativePositionMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelativePositionMessage::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 RelativePositionMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:ndm_proto.RelativePositionMessage.timestamp)
  return timestamp_;
}
inline void RelativePositionMessage::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.RelativePositionMessage.timestamp)
}

// required uint64 positionAge = 2;
inline bool RelativePositionMessage::has_positionage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelativePositionMessage::set_has_positionage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelativePositionMessage::clear_has_positionage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelativePositionMessage::clear_positionage() {
  positionage_ = GOOGLE_ULONGLONG(0);
  clear_has_positionage();
}
inline ::google::protobuf::uint64 RelativePositionMessage::positionage() const {
  // @@protoc_insertion_point(field_get:ndm_proto.RelativePositionMessage.positionAge)
  return positionage_;
}
inline void RelativePositionMessage::set_positionage(::google::protobuf::uint64 value) {
  set_has_positionage();
  positionage_ = value;
  // @@protoc_insertion_point(field_set:ndm_proto.RelativePositionMessage.positionAge)
}

// repeated .ndm_proto.RelativePosition positions = 3;
inline int RelativePositionMessage::positions_size() const {
  return positions_.size();
}
inline void RelativePositionMessage::clear_positions() {
  positions_.Clear();
}
inline const ::ndm_proto::RelativePosition& RelativePositionMessage::positions(int index) const {
  // @@protoc_insertion_point(field_get:ndm_proto.RelativePositionMessage.positions)
  return positions_.Get(index);
}
inline ::ndm_proto::RelativePosition* RelativePositionMessage::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:ndm_proto.RelativePositionMessage.positions)
  return positions_.Mutable(index);
}
inline ::ndm_proto::RelativePosition* RelativePositionMessage::add_positions() {
  // @@protoc_insertion_point(field_add:ndm_proto.RelativePositionMessage.positions)
  return positions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ndm_proto::RelativePosition >*
RelativePositionMessage::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:ndm_proto.RelativePositionMessage.positions)
  return &positions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ndm_proto::RelativePosition >&
RelativePositionMessage::positions() const {
  // @@protoc_insertion_point(field_list:ndm_proto.RelativePositionMessage.positions)
  return positions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ndm_proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_location_2eproto__INCLUDED
