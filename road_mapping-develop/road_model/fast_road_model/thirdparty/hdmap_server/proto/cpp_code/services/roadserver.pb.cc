// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/roadserver.proto

#include "services/roadserver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace services {
constexpr RoadServiceResponse::RoadServiceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0){}
struct RoadServiceResponseDefaultTypeInternal {
  constexpr RoadServiceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoadServiceResponseDefaultTypeInternal() {}
  union {
    RoadServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoadServiceResponseDefaultTypeInternal _RoadServiceResponse_default_instance_;
constexpr RoadFeature::RoadFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr){}
struct RoadFeatureDefaultTypeInternal {
  constexpr RoadFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoadFeatureDefaultTypeInternal() {}
  union {
    RoadFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoadFeatureDefaultTypeInternal _RoadFeature_default_instance_;
constexpr TileFeatureList::TileFeatureList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feats_()
  , refs_()
  , type_(0){}
struct TileFeatureListDefaultTypeInternal {
  constexpr TileFeatureListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileFeatureListDefaultTypeInternal() {}
  union {
    TileFeatureList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileFeatureListDefaultTypeInternal _TileFeatureList_default_instance_;
constexpr TileInfo::TileInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feat_list_()
  , last_editor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(int64_t{0})
  , tile_id_(0){}
struct TileInfoDefaultTypeInternal {
  constexpr TileInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileInfoDefaultTypeInternal() {}
  union {
    TileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileInfoDefaultTypeInternal _TileInfo_default_instance_;
constexpr TileUploadRequest::TileUploadRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tile_()
  , editor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , committer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , allow_conflict_(false)
  , elem_merge_(false){}
struct TileUploadRequestDefaultTypeInternal {
  constexpr TileUploadRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileUploadRequestDefaultTypeInternal() {}
  union {
    TileUploadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileUploadRequestDefaultTypeInternal _TileUploadRequest_default_instance_;
constexpr TileUploadResponse::TileUploadResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tile_()
  , branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ret_(nullptr)
  , read_ver_(int64_t{0}){}
struct TileUploadResponseDefaultTypeInternal {
  constexpr TileUploadResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileUploadResponseDefaultTypeInternal() {}
  union {
    TileUploadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileUploadResponseDefaultTypeInternal _TileUploadResponse_default_instance_;
constexpr TileDownloadRequest::TileDownloadRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tile_id_()
  , need_type_()
  , editor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , request_version_(int64_t{0})
  , load_ref_(false){}
struct TileDownloadRequestDefaultTypeInternal {
  constexpr TileDownloadRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileDownloadRequestDefaultTypeInternal() {}
  union {
    TileDownloadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileDownloadRequestDefaultTypeInternal _TileDownloadRequest_default_instance_;
constexpr TileDownloadResponse::TileDownloadResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tile_info_()
  , branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ret_(nullptr)
  , editor_version_(int64_t{0}){}
struct TileDownloadResponseDefaultTypeInternal {
  constexpr TileDownloadResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileDownloadResponseDefaultTypeInternal() {}
  union {
    TileDownloadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileDownloadResponseDefaultTypeInternal _TileDownloadResponse_default_instance_;
constexpr TileMergeRequest::TileMergeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tile_id_()
  , need_type_()
  , editor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , src_branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dst_branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , request_version_(int64_t{0})
  , src_version_(int64_t{0})
  , editable_only_(false)
  , allow_conflict_(true){}
struct TileMergeRequestDefaultTypeInternal {
  constexpr TileMergeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileMergeRequestDefaultTypeInternal() {}
  union {
    TileMergeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileMergeRequestDefaultTypeInternal _TileMergeRequest_default_instance_;
constexpr TileMergeResponse::TileMergeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tile_info_()
  , dst_branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ret_(nullptr)
  , editor_version_(int64_t{0}){}
struct TileMergeResponseDefaultTypeInternal {
  constexpr TileMergeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileMergeResponseDefaultTypeInternal() {}
  union {
    TileMergeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileMergeResponseDefaultTypeInternal _TileMergeResponse_default_instance_;
constexpr TileRevertRequest::TileRevertRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tile_id_()
  , need_type_()
  , editor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , request_version_(int64_t{0})
  , editable_only_(false){}
struct TileRevertRequestDefaultTypeInternal {
  constexpr TileRevertRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileRevertRequestDefaultTypeInternal() {}
  union {
    TileRevertRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileRevertRequestDefaultTypeInternal _TileRevertRequest_default_instance_;
constexpr TileRevertResponse::TileRevertResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tile_info_()
  , branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ret_(nullptr)
  , editor_version_(int64_t{0})
  , request_version_(int64_t{0}){}
struct TileRevertResponseDefaultTypeInternal {
  constexpr TileRevertResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileRevertResponseDefaultTypeInternal() {}
  union {
    TileRevertResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileRevertResponseDefaultTypeInternal _TileRevertResponse_default_instance_;
}  // namespace services
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_services_2froadserver_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_services_2froadserver_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_services_2froadserver_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_services_2froadserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::services::RoadServiceResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::services::RoadServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::services::RoadServiceResponse, code_),
  PROTOBUF_FIELD_OFFSET(::services::RoadServiceResponse, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::services::RoadFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::services::RoadFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::services::RoadFeature, id_),
  PROTOBUF_FIELD_OFFSET(::services::RoadFeature, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::services::TileFeatureList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::services::TileFeatureList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::services::TileFeatureList, type_),
  PROTOBUF_FIELD_OFFSET(::services::TileFeatureList, feats_),
  PROTOBUF_FIELD_OFFSET(::services::TileFeatureList, refs_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::services::TileInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::services::TileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::services::TileInfo, tile_id_),
  PROTOBUF_FIELD_OFFSET(::services::TileInfo, version_),
  PROTOBUF_FIELD_OFFSET(::services::TileInfo, last_editor_),
  PROTOBUF_FIELD_OFFSET(::services::TileInfo, feat_list_),
  2,
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::services::TileUploadRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::services::TileUploadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::services::TileUploadRequest, editor_),
  PROTOBUF_FIELD_OFFSET(::services::TileUploadRequest, tile_),
  PROTOBUF_FIELD_OFFSET(::services::TileUploadRequest, branch_),
  PROTOBUF_FIELD_OFFSET(::services::TileUploadRequest, committer_),
  PROTOBUF_FIELD_OFFSET(::services::TileUploadRequest, allow_conflict_),
  PROTOBUF_FIELD_OFFSET(::services::TileUploadRequest, elem_merge_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::services::TileUploadResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::services::TileUploadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::services::TileUploadResponse, tile_),
  PROTOBUF_FIELD_OFFSET(::services::TileUploadResponse, read_ver_),
  PROTOBUF_FIELD_OFFSET(::services::TileUploadResponse, branch_),
  PROTOBUF_FIELD_OFFSET(::services::TileUploadResponse, ret_),
  ~0u,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::services::TileDownloadRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::services::TileDownloadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::services::TileDownloadRequest, tile_id_),
  PROTOBUF_FIELD_OFFSET(::services::TileDownloadRequest, editor_),
  PROTOBUF_FIELD_OFFSET(::services::TileDownloadRequest, request_version_),
  PROTOBUF_FIELD_OFFSET(::services::TileDownloadRequest, need_type_),
  PROTOBUF_FIELD_OFFSET(::services::TileDownloadRequest, branch_),
  PROTOBUF_FIELD_OFFSET(::services::TileDownloadRequest, load_ref_),
  ~0u,
  0,
  2,
  ~0u,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::services::TileDownloadResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::services::TileDownloadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::services::TileDownloadResponse, tile_info_),
  PROTOBUF_FIELD_OFFSET(::services::TileDownloadResponse, editor_version_),
  PROTOBUF_FIELD_OFFSET(::services::TileDownloadResponse, branch_),
  PROTOBUF_FIELD_OFFSET(::services::TileDownloadResponse, ret_),
  ~0u,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::services::TileMergeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::services::TileMergeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::services::TileMergeRequest, tile_id_),
  PROTOBUF_FIELD_OFFSET(::services::TileMergeRequest, editor_),
  PROTOBUF_FIELD_OFFSET(::services::TileMergeRequest, request_version_),
  PROTOBUF_FIELD_OFFSET(::services::TileMergeRequest, need_type_),
  PROTOBUF_FIELD_OFFSET(::services::TileMergeRequest, src_branch_),
  PROTOBUF_FIELD_OFFSET(::services::TileMergeRequest, dst_branch_),
  PROTOBUF_FIELD_OFFSET(::services::TileMergeRequest, editable_only_),
  PROTOBUF_FIELD_OFFSET(::services::TileMergeRequest, src_version_),
  PROTOBUF_FIELD_OFFSET(::services::TileMergeRequest, allow_conflict_),
  ~0u,
  0,
  3,
  ~0u,
  1,
  2,
  5,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::services::TileMergeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::services::TileMergeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::services::TileMergeResponse, tile_info_),
  PROTOBUF_FIELD_OFFSET(::services::TileMergeResponse, editor_version_),
  PROTOBUF_FIELD_OFFSET(::services::TileMergeResponse, dst_branch_),
  PROTOBUF_FIELD_OFFSET(::services::TileMergeResponse, ret_),
  ~0u,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::services::TileRevertRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::services::TileRevertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::services::TileRevertRequest, tile_id_),
  PROTOBUF_FIELD_OFFSET(::services::TileRevertRequest, editor_),
  PROTOBUF_FIELD_OFFSET(::services::TileRevertRequest, request_version_),
  PROTOBUF_FIELD_OFFSET(::services::TileRevertRequest, need_type_),
  PROTOBUF_FIELD_OFFSET(::services::TileRevertRequest, branch_),
  PROTOBUF_FIELD_OFFSET(::services::TileRevertRequest, editable_only_),
  ~0u,
  0,
  2,
  ~0u,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::services::TileRevertResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::services::TileRevertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::services::TileRevertResponse, tile_info_),
  PROTOBUF_FIELD_OFFSET(::services::TileRevertResponse, editor_version_),
  PROTOBUF_FIELD_OFFSET(::services::TileRevertResponse, branch_),
  PROTOBUF_FIELD_OFFSET(::services::TileRevertResponse, request_version_),
  PROTOBUF_FIELD_OFFSET(::services::TileRevertResponse, ret_),
  ~0u,
  2,
  0,
  3,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::services::RoadServiceResponse)},
  { 9, 16, sizeof(::services::RoadFeature)},
  { 18, 26, sizeof(::services::TileFeatureList)},
  { 29, 38, sizeof(::services::TileInfo)},
  { 42, 53, sizeof(::services::TileUploadRequest)},
  { 59, 68, sizeof(::services::TileUploadResponse)},
  { 72, 83, sizeof(::services::TileDownloadRequest)},
  { 89, 98, sizeof(::services::TileDownloadResponse)},
  { 102, 116, sizeof(::services::TileMergeRequest)},
  { 125, 134, sizeof(::services::TileMergeResponse)},
  { 138, 149, sizeof(::services::TileRevertRequest)},
  { 155, 165, sizeof(::services::TileRevertResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::services::_RoadServiceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::services::_RoadFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::services::_TileFeatureList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::services::_TileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::services::_TileUploadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::services::_TileUploadResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::services::_TileDownloadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::services::_TileDownloadResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::services::_TileMergeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::services::_TileMergeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::services::_TileRevertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::services::_TileRevertResponse_default_instance_),
};

const char descriptor_table_protodef_services_2froadserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031services/roadserver.proto\022\010services\032\027m"
  "etadata/metadata.proto\"4\n\023RoadServiceRes"
  "ponse\022\014\n\004code\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\":\n\013"
  "RoadFeature\022\035\n\002id\030\001 \001(\0132\021.RoadPB.Feature"
  "ID\022\014\n\004data\030\002 \001(\014\"f\n\017TileFeatureList\022\014\n\004t"
  "ype\030\001 \001(\005\022$\n\005feats\030\002 \003(\0132\025.services.Road"
  "Feature\022\037\n\004refs\030\003 \003(\0132\021.RoadPB.FeatureID"
  "\"v\n\010TileInfo\022\017\n\007tile_id\030\001 \001(\005\022\026\n\007version"
  "\030\002 \001(\003:\0010B\0020\001\022\023\n\013last_editor\030\003 \001(\t\022,\n\tfe"
  "at_list\030\004 \003(\0132\031.services.TileFeatureList"
  "\"\233\001\n\021TileUploadRequest\022\016\n\006editor\030\001 \001(\t\022 "
  "\n\004tile\030\002 \003(\0132\022.services.TileInfo\022\016\n\006bran"
  "ch\030\003 \001(\t\022\021\n\tcommitter\030\004 \001(\t\022\035\n\016allow_con"
  "flict\030\007 \001(\010:\005false\022\022\n\nelem_merge\030\010 \001(\010\"\210"
  "\001\n\022TileUploadResponse\022 \n\004tile\030\001 \003(\0132\022.se"
  "rvices.TileInfo\022\024\n\010read_ver\030\004 \001(\003B\0020\001\022\016\n"
  "\006branch\030\005 \001(\t\022*\n\003ret\030\006 \001(\0132\035.services.Ro"
  "adServiceResponse\"\210\001\n\023TileDownloadReques"
  "t\022\017\n\007tile_id\030\001 \003(\005\022\016\n\006editor\030\002 \001(\t\022\033\n\017re"
  "quest_version\030\003 \001(\003B\0020\001\022\021\n\tneed_type\030\004 \003"
  "(\005\022\016\n\006branch\030\005 \001(\t\022\020\n\010load_ref\030\006 \001(\010\"\225\001\n"
  "\024TileDownloadResponse\022%\n\ttile_info\030\003 \003(\013"
  "2\022.services.TileInfo\022\032\n\016editor_version\030\005"
  " \001(\003B\0020\001\022\016\n\006branch\030\006 \001(\t\022*\n\003ret\030\010 \001(\0132\035."
  "services.RoadServiceResponse\"\325\001\n\020TileMer"
  "geRequest\022\017\n\007tile_id\030\001 \003(\005\022\016\n\006editor\030\002 \001"
  "(\t\022\033\n\017request_version\030\003 \001(\003B\0020\001\022\021\n\tneed_"
  "type\030\004 \003(\005\022\022\n\nsrc_branch\030\005 \001(\t\022\022\n\ndst_br"
  "anch\030\006 \001(\t\022\025\n\reditable_only\030\007 \001(\010\022\023\n\013src"
  "_version\030\010 \001(\003\022\034\n\016allow_conflict\030\t \001(\010:\004"
  "true\"\226\001\n\021TileMergeResponse\022%\n\ttile_info\030"
  "\003 \003(\0132\022.services.TileInfo\022\032\n\016editor_vers"
  "ion\030\005 \001(\003B\0020\001\022\022\n\ndst_branch\030\006 \001(\t\022*\n\003ret"
  "\030\010 \001(\0132\035.services.RoadServiceResponse\"\213\001"
  "\n\021TileRevertRequest\022\017\n\007tile_id\030\001 \003(\005\022\016\n\006"
  "editor\030\002 \001(\t\022\033\n\017request_version\030\003 \001(\003B\0020"
  "\001\022\021\n\tneed_type\030\004 \003(\005\022\016\n\006branch\030\005 \001(\t\022\025\n\r"
  "editable_only\030\006 \001(\010\"\260\001\n\022TileRevertRespon"
  "se\022%\n\ttile_info\030\003 \003(\0132\022.services.TileInf"
  "o\022\032\n\016editor_version\030\005 \001(\003B\0020\001\022\016\n\006branch\030"
  "\006 \001(\t\022\033\n\017request_version\030\007 \001(\003B\0020\001\022*\n\003re"
  "t\030\010 \001(\0132\035.services.RoadServiceResponse2\264"
  "\002\n\013RoadService\022G\n\nUploadTile\022\033.services."
  "TileUploadRequest\032\034.services.TileUploadR"
  "esponse\022M\n\014DownloadTile\022\035.services.TileD"
  "ownloadRequest\032\036.services.TileDownloadRe"
  "sponse\022D\n\tMergeTile\022\032.services.TileMerge"
  "Request\032\033.services.TileMergeResponse\022G\n\n"
  "RevertTile\022\033.services.TileRevertRequest\032"
  "\034.services.TileRevertResponseB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_services_2froadserver_2eproto_deps[1] = {
  &::descriptor_table_metadata_2fmetadata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_services_2froadserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2froadserver_2eproto = {
  false, false, 1994, descriptor_table_protodef_services_2froadserver_2eproto, "services/roadserver.proto", 
  &descriptor_table_services_2froadserver_2eproto_once, descriptor_table_services_2froadserver_2eproto_deps, 1, 12,
  schemas, file_default_instances, TableStruct_services_2froadserver_2eproto::offsets,
  file_level_metadata_services_2froadserver_2eproto, file_level_enum_descriptors_services_2froadserver_2eproto, file_level_service_descriptors_services_2froadserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_services_2froadserver_2eproto_getter() {
  return &descriptor_table_services_2froadserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_services_2froadserver_2eproto(&descriptor_table_services_2froadserver_2eproto);
namespace services {

// ===================================================================

class RoadServiceResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadServiceResponse>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoadServiceResponse::RoadServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:services.RoadServiceResponse)
}
RoadServiceResponse::RoadServiceResponse(const RoadServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:services.RoadServiceResponse)
}

inline void RoadServiceResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_ = 0;
}

RoadServiceResponse::~RoadServiceResponse() {
  // @@protoc_insertion_point(destructor:services.RoadServiceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoadServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoadServiceResponse::ArenaDtor(void* object) {
  RoadServiceResponse* _this = reinterpret_cast< RoadServiceResponse* >(object);
  (void)_this;
}
void RoadServiceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadServiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoadServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:services.RoadServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadServiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.RoadServiceResponse.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadServiceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:services.RoadServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.RoadServiceResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:services.RoadServiceResponse)
  return target;
}

size_t RoadServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:services.RoadServiceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional int32 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoadServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoadServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoadServiceResponse::GetClassData() const { return &_class_data_; }

void RoadServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RoadServiceResponse *>(to)->MergeFrom(
      static_cast<const RoadServiceResponse &>(from));
}


void RoadServiceResponse::MergeFrom(const RoadServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:services.RoadServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoadServiceResponse::CopyFrom(const RoadServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:services.RoadServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadServiceResponse::IsInitialized() const {
  return true;
}

void RoadServiceResponse::InternalSwap(RoadServiceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadServiceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_services_2froadserver_2eproto_getter, &descriptor_table_services_2froadserver_2eproto_once,
      file_level_metadata_services_2froadserver_2eproto[0]);
}

// ===================================================================

class RoadFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadFeature>()._has_bits_);
  static const ::RoadPB::FeatureID& id(const RoadFeature* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::RoadPB::FeatureID&
RoadFeature::_Internal::id(const RoadFeature* msg) {
  return *msg->id_;
}
void RoadFeature::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RoadFeature::RoadFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:services.RoadFeature)
}
RoadFeature::RoadFeature(const RoadFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::RoadPB::FeatureID(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:services.RoadFeature)
}

inline void RoadFeature::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = nullptr;
}

RoadFeature::~RoadFeature() {
  // @@protoc_insertion_point(destructor:services.RoadFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoadFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void RoadFeature::ArenaDtor(void* object) {
  RoadFeature* _this = reinterpret_cast< RoadFeature* >(object);
  (void)_this;
}
void RoadFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoadFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:services.RoadFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .RoadPB.FeatureID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:services.RoadFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RoadPB.FeatureID id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:services.RoadFeature)
  return target;
}

size_t RoadFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:services.RoadFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional .RoadPB.FeatureID id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoadFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoadFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoadFeature::GetClassData() const { return &_class_data_; }

void RoadFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RoadFeature *>(to)->MergeFrom(
      static_cast<const RoadFeature &>(from));
}


void RoadFeature::MergeFrom(const RoadFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:services.RoadFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_id()->::RoadPB::FeatureID::MergeFrom(from._internal_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoadFeature::CopyFrom(const RoadFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:services.RoadFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadFeature::IsInitialized() const {
  return true;
}

void RoadFeature::InternalSwap(RoadFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_services_2froadserver_2eproto_getter, &descriptor_table_services_2froadserver_2eproto_once,
      file_level_metadata_services_2froadserver_2eproto[1]);
}

// ===================================================================

class TileFeatureList::_Internal {
 public:
  using HasBits = decltype(std::declval<TileFeatureList>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void TileFeatureList::clear_refs() {
  refs_.Clear();
}
TileFeatureList::TileFeatureList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  feats_(arena),
  refs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:services.TileFeatureList)
}
TileFeatureList::TileFeatureList(const TileFeatureList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      feats_(from.feats_),
      refs_(from.refs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:services.TileFeatureList)
}

inline void TileFeatureList::SharedCtor() {
type_ = 0;
}

TileFeatureList::~TileFeatureList() {
  // @@protoc_insertion_point(destructor:services.TileFeatureList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileFeatureList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TileFeatureList::ArenaDtor(void* object) {
  TileFeatureList* _this = reinterpret_cast< TileFeatureList* >(object);
  (void)_this;
}
void TileFeatureList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileFeatureList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileFeatureList::Clear() {
// @@protoc_insertion_point(message_clear_start:services.TileFeatureList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feats_.Clear();
  refs_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileFeatureList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .services.RoadFeature feats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .RoadPB.FeatureID refs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileFeatureList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:services.TileFeatureList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .services.RoadFeature feats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_feats(i), target, stream);
  }

  // repeated .RoadPB.FeatureID refs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_refs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_refs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:services.TileFeatureList)
  return target;
}

size_t TileFeatureList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:services.TileFeatureList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .services.RoadFeature feats = 2;
  total_size += 1UL * this->_internal_feats_size();
  for (const auto& msg : this->feats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .RoadPB.FeatureID refs = 3;
  total_size += 1UL * this->_internal_refs_size();
  for (const auto& msg : this->refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileFeatureList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileFeatureList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileFeatureList::GetClassData() const { return &_class_data_; }

void TileFeatureList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TileFeatureList *>(to)->MergeFrom(
      static_cast<const TileFeatureList &>(from));
}


void TileFeatureList::MergeFrom(const TileFeatureList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:services.TileFeatureList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feats_.MergeFrom(from.feats_);
  refs_.MergeFrom(from.refs_);
  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileFeatureList::CopyFrom(const TileFeatureList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:services.TileFeatureList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileFeatureList::IsInitialized() const {
  return true;
}

void TileFeatureList::InternalSwap(TileFeatureList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  feats_.InternalSwap(&other->feats_);
  refs_.InternalSwap(&other->refs_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TileFeatureList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_services_2froadserver_2eproto_getter, &descriptor_table_services_2froadserver_2eproto_once,
      file_level_metadata_services_2froadserver_2eproto[2]);
}

// ===================================================================

class TileInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TileInfo>()._has_bits_);
  static void set_has_tile_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_editor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TileInfo::TileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  feat_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:services.TileInfo)
}
TileInfo::TileInfo(const TileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      feat_list_(from.feat_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_editor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_last_editor()) {
    last_editor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_editor(), 
      GetArenaForAllocation());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&tile_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(tile_id_));
  // @@protoc_insertion_point(copy_constructor:services.TileInfo)
}

inline void TileInfo::SharedCtor() {
last_editor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tile_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(tile_id_));
}

TileInfo::~TileInfo() {
  // @@protoc_insertion_point(destructor:services.TileInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  last_editor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TileInfo::ArenaDtor(void* object) {
  TileInfo* _this = reinterpret_cast< TileInfo* >(object);
  (void)_this;
}
void TileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:services.TileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feat_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    last_editor_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tile_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(tile_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tile_id(&has_bits);
          tile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 version = 2 [default = 0, jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string last_editor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_last_editor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileInfo.last_editor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .services.TileFeatureList feat_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feat_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:services.TileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tile_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tile_id(), target);
  }

  // optional int64 version = 2 [default = 0, jstype = JS_STRING];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_version(), target);
  }

  // optional string last_editor = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_last_editor().data(), static_cast<int>(this->_internal_last_editor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileInfo.last_editor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last_editor(), target);
  }

  // repeated .services.TileFeatureList feat_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feat_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_feat_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:services.TileInfo)
  return target;
}

size_t TileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:services.TileInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .services.TileFeatureList feat_list = 4;
  total_size += 1UL * this->_internal_feat_list_size();
  for (const auto& msg : this->feat_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string last_editor = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_editor());
    }

    // optional int64 version = 2 [default = 0, jstype = JS_STRING];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_version());
    }

    // optional int32 tile_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tile_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileInfo::GetClassData() const { return &_class_data_; }

void TileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TileInfo *>(to)->MergeFrom(
      static_cast<const TileInfo &>(from));
}


void TileInfo::MergeFrom(const TileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:services.TileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feat_list_.MergeFrom(from.feat_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_last_editor(from._internal_last_editor());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      tile_id_ = from.tile_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileInfo::CopyFrom(const TileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:services.TileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileInfo::IsInitialized() const {
  return true;
}

void TileInfo::InternalSwap(TileInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  feat_list_.InternalSwap(&other->feat_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_editor_, GetArenaForAllocation(),
      &other->last_editor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileInfo, tile_id_)
      + sizeof(TileInfo::tile_id_)
      - PROTOBUF_FIELD_OFFSET(TileInfo, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_services_2froadserver_2eproto_getter, &descriptor_table_services_2froadserver_2eproto_once,
      file_level_metadata_services_2froadserver_2eproto[3]);
}

// ===================================================================

class TileUploadRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TileUploadRequest>()._has_bits_);
  static void set_has_editor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_branch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_committer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_allow_conflict(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_elem_merge(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TileUploadRequest::TileUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tile_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:services.TileUploadRequest)
}
TileUploadRequest::TileUploadRequest(const TileUploadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tile_(from.tile_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  editor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_editor()) {
    editor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_editor(), 
      GetArenaForAllocation());
  }
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_branch()) {
    branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch(), 
      GetArenaForAllocation());
  }
  committer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_committer()) {
    committer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_committer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&allow_conflict_, &from.allow_conflict_,
    static_cast<size_t>(reinterpret_cast<char*>(&elem_merge_) -
    reinterpret_cast<char*>(&allow_conflict_)) + sizeof(elem_merge_));
  // @@protoc_insertion_point(copy_constructor:services.TileUploadRequest)
}

inline void TileUploadRequest::SharedCtor() {
editor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
committer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&allow_conflict_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&elem_merge_) -
    reinterpret_cast<char*>(&allow_conflict_)) + sizeof(elem_merge_));
}

TileUploadRequest::~TileUploadRequest() {
  // @@protoc_insertion_point(destructor:services.TileUploadRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileUploadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  editor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  committer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TileUploadRequest::ArenaDtor(void* object) {
  TileUploadRequest* _this = reinterpret_cast< TileUploadRequest* >(object);
  (void)_this;
}
void TileUploadRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileUploadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileUploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:services.TileUploadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tile_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      editor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      branch_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      committer_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&allow_conflict_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elem_merge_) -
      reinterpret_cast<char*>(&allow_conflict_)) + sizeof(elem_merge_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileUploadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string editor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_editor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileUploadRequest.editor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .services.TileInfo tile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string branch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileUploadRequest.branch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string committer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_committer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileUploadRequest.committer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_conflict = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_allow_conflict(&has_bits);
          allow_conflict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool elem_merge = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_elem_merge(&has_bits);
          elem_merge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileUploadRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:services.TileUploadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string editor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_editor().data(), static_cast<int>(this->_internal_editor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileUploadRequest.editor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_editor(), target);
  }

  // repeated .services.TileInfo tile = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tile_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tile(i), target, stream);
  }

  // optional string branch = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_branch().data(), static_cast<int>(this->_internal_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileUploadRequest.branch");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_branch(), target);
  }

  // optional string committer = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_committer().data(), static_cast<int>(this->_internal_committer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileUploadRequest.committer");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_committer(), target);
  }

  // optional bool allow_conflict = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_allow_conflict(), target);
  }

  // optional bool elem_merge = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_elem_merge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:services.TileUploadRequest)
  return target;
}

size_t TileUploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:services.TileUploadRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .services.TileInfo tile = 2;
  total_size += 1UL * this->_internal_tile_size();
  for (const auto& msg : this->tile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string editor = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_editor());
    }

    // optional string branch = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_branch());
    }

    // optional string committer = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_committer());
    }

    // optional bool allow_conflict = 7 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool elem_merge = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileUploadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileUploadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileUploadRequest::GetClassData() const { return &_class_data_; }

void TileUploadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TileUploadRequest *>(to)->MergeFrom(
      static_cast<const TileUploadRequest &>(from));
}


void TileUploadRequest::MergeFrom(const TileUploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:services.TileUploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tile_.MergeFrom(from.tile_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_editor(from._internal_editor());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_branch(from._internal_branch());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_committer(from._internal_committer());
    }
    if (cached_has_bits & 0x00000008u) {
      allow_conflict_ = from.allow_conflict_;
    }
    if (cached_has_bits & 0x00000010u) {
      elem_merge_ = from.elem_merge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileUploadRequest::CopyFrom(const TileUploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:services.TileUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileUploadRequest::IsInitialized() const {
  return true;
}

void TileUploadRequest::InternalSwap(TileUploadRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tile_.InternalSwap(&other->tile_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &editor_, GetArenaForAllocation(),
      &other->editor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &branch_, GetArenaForAllocation(),
      &other->branch_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &committer_, GetArenaForAllocation(),
      &other->committer_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileUploadRequest, elem_merge_)
      + sizeof(TileUploadRequest::elem_merge_)
      - PROTOBUF_FIELD_OFFSET(TileUploadRequest, allow_conflict_)>(
          reinterpret_cast<char*>(&allow_conflict_),
          reinterpret_cast<char*>(&other->allow_conflict_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileUploadRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_services_2froadserver_2eproto_getter, &descriptor_table_services_2froadserver_2eproto_once,
      file_level_metadata_services_2froadserver_2eproto[4]);
}

// ===================================================================

class TileUploadResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TileUploadResponse>()._has_bits_);
  static void set_has_read_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_branch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::services::RoadServiceResponse& ret(const TileUploadResponse* msg);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::services::RoadServiceResponse&
TileUploadResponse::_Internal::ret(const TileUploadResponse* msg) {
  return *msg->ret_;
}
TileUploadResponse::TileUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tile_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:services.TileUploadResponse)
}
TileUploadResponse::TileUploadResponse(const TileUploadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tile_(from.tile_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_branch()) {
    branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ret()) {
    ret_ = new ::services::RoadServiceResponse(*from.ret_);
  } else {
    ret_ = nullptr;
  }
  read_ver_ = from.read_ver_;
  // @@protoc_insertion_point(copy_constructor:services.TileUploadResponse)
}

inline void TileUploadResponse::SharedCtor() {
branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&read_ver_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(read_ver_));
}

TileUploadResponse::~TileUploadResponse() {
  // @@protoc_insertion_point(destructor:services.TileUploadResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileUploadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ret_;
}

void TileUploadResponse::ArenaDtor(void* object) {
  TileUploadResponse* _this = reinterpret_cast< TileUploadResponse* >(object);
  (void)_this;
}
void TileUploadResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileUploadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileUploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:services.TileUploadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tile_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      branch_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ret_ != nullptr);
      ret_->Clear();
    }
  }
  read_ver_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileUploadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .services.TileInfo tile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int64 read_ver = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_read_ver(&has_bits);
          read_ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string branch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileUploadResponse.branch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .services.RoadServiceResponse ret = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ret(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileUploadResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:services.TileUploadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .services.TileInfo tile = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tile_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tile(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 read_ver = 4 [jstype = JS_STRING];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_read_ver(), target);
  }

  // optional string branch = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_branch().data(), static_cast<int>(this->_internal_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileUploadResponse.branch");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_branch(), target);
  }

  // optional .services.RoadServiceResponse ret = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ret(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:services.TileUploadResponse)
  return target;
}

size_t TileUploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:services.TileUploadResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .services.TileInfo tile = 1;
  total_size += 1UL * this->_internal_tile_size();
  for (const auto& msg : this->tile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string branch = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_branch());
    }

    // optional .services.RoadServiceResponse ret = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ret_);
    }

    // optional int64 read_ver = 4 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_read_ver());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileUploadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileUploadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileUploadResponse::GetClassData() const { return &_class_data_; }

void TileUploadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TileUploadResponse *>(to)->MergeFrom(
      static_cast<const TileUploadResponse &>(from));
}


void TileUploadResponse::MergeFrom(const TileUploadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:services.TileUploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tile_.MergeFrom(from.tile_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_branch(from._internal_branch());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ret()->::services::RoadServiceResponse::MergeFrom(from._internal_ret());
    }
    if (cached_has_bits & 0x00000004u) {
      read_ver_ = from.read_ver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileUploadResponse::CopyFrom(const TileUploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:services.TileUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileUploadResponse::IsInitialized() const {
  return true;
}

void TileUploadResponse::InternalSwap(TileUploadResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tile_.InternalSwap(&other->tile_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &branch_, GetArenaForAllocation(),
      &other->branch_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileUploadResponse, read_ver_)
      + sizeof(TileUploadResponse::read_ver_)
      - PROTOBUF_FIELD_OFFSET(TileUploadResponse, ret_)>(
          reinterpret_cast<char*>(&ret_),
          reinterpret_cast<char*>(&other->ret_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileUploadResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_services_2froadserver_2eproto_getter, &descriptor_table_services_2froadserver_2eproto_once,
      file_level_metadata_services_2froadserver_2eproto[5]);
}

// ===================================================================

class TileDownloadRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TileDownloadRequest>()._has_bits_);
  static void set_has_editor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_branch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_load_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TileDownloadRequest::TileDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tile_id_(arena),
  need_type_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:services.TileDownloadRequest)
}
TileDownloadRequest::TileDownloadRequest(const TileDownloadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tile_id_(from.tile_id_),
      need_type_(from.need_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  editor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_editor()) {
    editor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_editor(), 
      GetArenaForAllocation());
  }
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_branch()) {
    branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch(), 
      GetArenaForAllocation());
  }
  ::memcpy(&request_version_, &from.request_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&load_ref_) -
    reinterpret_cast<char*>(&request_version_)) + sizeof(load_ref_));
  // @@protoc_insertion_point(copy_constructor:services.TileDownloadRequest)
}

inline void TileDownloadRequest::SharedCtor() {
editor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&load_ref_) -
    reinterpret_cast<char*>(&request_version_)) + sizeof(load_ref_));
}

TileDownloadRequest::~TileDownloadRequest() {
  // @@protoc_insertion_point(destructor:services.TileDownloadRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileDownloadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  editor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TileDownloadRequest::ArenaDtor(void* object) {
  TileDownloadRequest* _this = reinterpret_cast< TileDownloadRequest* >(object);
  (void)_this;
}
void TileDownloadRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileDownloadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileDownloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:services.TileDownloadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tile_id_.Clear();
  need_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      editor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      branch_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&request_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&load_ref_) -
        reinterpret_cast<char*>(&request_version_)) + sizeof(load_ref_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileDownloadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 tile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tile_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_tile_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string editor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_editor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileDownloadRequest.editor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 request_version = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_request_version(&has_bits);
          request_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 need_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_need_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_need_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string branch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileDownloadRequest.branch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool load_ref = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_load_ref(&has_bits);
          load_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileDownloadRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:services.TileDownloadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 tile_id = 1;
  for (int i = 0, n = this->_internal_tile_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tile_id(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string editor = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_editor().data(), static_cast<int>(this->_internal_editor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileDownloadRequest.editor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_editor(), target);
  }

  // optional int64 request_version = 3 [jstype = JS_STRING];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_request_version(), target);
  }

  // repeated int32 need_type = 4;
  for (int i = 0, n = this->_internal_need_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_need_type(i), target);
  }

  // optional string branch = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_branch().data(), static_cast<int>(this->_internal_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileDownloadRequest.branch");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_branch(), target);
  }

  // optional bool load_ref = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_load_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:services.TileDownloadRequest)
  return target;
}

size_t TileDownloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:services.TileDownloadRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 tile_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->tile_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tile_id_size());
    total_size += data_size;
  }

  // repeated int32 need_type = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->need_type_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_need_type_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string editor = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_editor());
    }

    // optional string branch = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_branch());
    }

    // optional int64 request_version = 3 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_request_version());
    }

    // optional bool load_ref = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileDownloadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileDownloadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileDownloadRequest::GetClassData() const { return &_class_data_; }

void TileDownloadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TileDownloadRequest *>(to)->MergeFrom(
      static_cast<const TileDownloadRequest &>(from));
}


void TileDownloadRequest::MergeFrom(const TileDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:services.TileDownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tile_id_.MergeFrom(from.tile_id_);
  need_type_.MergeFrom(from.need_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_editor(from._internal_editor());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_branch(from._internal_branch());
    }
    if (cached_has_bits & 0x00000004u) {
      request_version_ = from.request_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      load_ref_ = from.load_ref_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileDownloadRequest::CopyFrom(const TileDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:services.TileDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileDownloadRequest::IsInitialized() const {
  return true;
}

void TileDownloadRequest::InternalSwap(TileDownloadRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tile_id_.InternalSwap(&other->tile_id_);
  need_type_.InternalSwap(&other->need_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &editor_, GetArenaForAllocation(),
      &other->editor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &branch_, GetArenaForAllocation(),
      &other->branch_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileDownloadRequest, load_ref_)
      + sizeof(TileDownloadRequest::load_ref_)
      - PROTOBUF_FIELD_OFFSET(TileDownloadRequest, request_version_)>(
          reinterpret_cast<char*>(&request_version_),
          reinterpret_cast<char*>(&other->request_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileDownloadRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_services_2froadserver_2eproto_getter, &descriptor_table_services_2froadserver_2eproto_once,
      file_level_metadata_services_2froadserver_2eproto[6]);
}

// ===================================================================

class TileDownloadResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TileDownloadResponse>()._has_bits_);
  static void set_has_editor_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_branch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::services::RoadServiceResponse& ret(const TileDownloadResponse* msg);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::services::RoadServiceResponse&
TileDownloadResponse::_Internal::ret(const TileDownloadResponse* msg) {
  return *msg->ret_;
}
TileDownloadResponse::TileDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tile_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:services.TileDownloadResponse)
}
TileDownloadResponse::TileDownloadResponse(const TileDownloadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tile_info_(from.tile_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_branch()) {
    branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ret()) {
    ret_ = new ::services::RoadServiceResponse(*from.ret_);
  } else {
    ret_ = nullptr;
  }
  editor_version_ = from.editor_version_;
  // @@protoc_insertion_point(copy_constructor:services.TileDownloadResponse)
}

inline void TileDownloadResponse::SharedCtor() {
branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&editor_version_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(editor_version_));
}

TileDownloadResponse::~TileDownloadResponse() {
  // @@protoc_insertion_point(destructor:services.TileDownloadResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileDownloadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ret_;
}

void TileDownloadResponse::ArenaDtor(void* object) {
  TileDownloadResponse* _this = reinterpret_cast< TileDownloadResponse* >(object);
  (void)_this;
}
void TileDownloadResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileDownloadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileDownloadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:services.TileDownloadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tile_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      branch_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ret_ != nullptr);
      ret_->Clear();
    }
  }
  editor_version_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileDownloadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .services.TileInfo tile_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tile_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int64 editor_version = 5 [jstype = JS_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_editor_version(&has_bits);
          editor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string branch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileDownloadResponse.branch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .services.RoadServiceResponse ret = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ret(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileDownloadResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:services.TileDownloadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .services.TileInfo tile_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tile_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tile_info(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 editor_version = 5 [jstype = JS_STRING];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_editor_version(), target);
  }

  // optional string branch = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_branch().data(), static_cast<int>(this->_internal_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileDownloadResponse.branch");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_branch(), target);
  }

  // optional .services.RoadServiceResponse ret = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ret(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:services.TileDownloadResponse)
  return target;
}

size_t TileDownloadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:services.TileDownloadResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .services.TileInfo tile_info = 3;
  total_size += 1UL * this->_internal_tile_info_size();
  for (const auto& msg : this->tile_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string branch = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_branch());
    }

    // optional .services.RoadServiceResponse ret = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ret_);
    }

    // optional int64 editor_version = 5 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_editor_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileDownloadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileDownloadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileDownloadResponse::GetClassData() const { return &_class_data_; }

void TileDownloadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TileDownloadResponse *>(to)->MergeFrom(
      static_cast<const TileDownloadResponse &>(from));
}


void TileDownloadResponse::MergeFrom(const TileDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:services.TileDownloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tile_info_.MergeFrom(from.tile_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_branch(from._internal_branch());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ret()->::services::RoadServiceResponse::MergeFrom(from._internal_ret());
    }
    if (cached_has_bits & 0x00000004u) {
      editor_version_ = from.editor_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileDownloadResponse::CopyFrom(const TileDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:services.TileDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileDownloadResponse::IsInitialized() const {
  return true;
}

void TileDownloadResponse::InternalSwap(TileDownloadResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tile_info_.InternalSwap(&other->tile_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &branch_, GetArenaForAllocation(),
      &other->branch_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileDownloadResponse, editor_version_)
      + sizeof(TileDownloadResponse::editor_version_)
      - PROTOBUF_FIELD_OFFSET(TileDownloadResponse, ret_)>(
          reinterpret_cast<char*>(&ret_),
          reinterpret_cast<char*>(&other->ret_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileDownloadResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_services_2froadserver_2eproto_getter, &descriptor_table_services_2froadserver_2eproto_once,
      file_level_metadata_services_2froadserver_2eproto[7]);
}

// ===================================================================

class TileMergeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TileMergeRequest>()._has_bits_);
  static void set_has_editor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_src_branch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dst_branch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_editable_only(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_src_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_allow_conflict(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

TileMergeRequest::TileMergeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tile_id_(arena),
  need_type_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:services.TileMergeRequest)
}
TileMergeRequest::TileMergeRequest(const TileMergeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tile_id_(from.tile_id_),
      need_type_(from.need_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  editor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_editor()) {
    editor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_editor(), 
      GetArenaForAllocation());
  }
  src_branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_branch()) {
    src_branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_branch(), 
      GetArenaForAllocation());
  }
  dst_branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dst_branch()) {
    dst_branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dst_branch(), 
      GetArenaForAllocation());
  }
  ::memcpy(&request_version_, &from.request_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_conflict_) -
    reinterpret_cast<char*>(&request_version_)) + sizeof(allow_conflict_));
  // @@protoc_insertion_point(copy_constructor:services.TileMergeRequest)
}

inline void TileMergeRequest::SharedCtor() {
editor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
src_branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dst_branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&editable_only_) -
    reinterpret_cast<char*>(&request_version_)) + sizeof(editable_only_));
allow_conflict_ = true;
}

TileMergeRequest::~TileMergeRequest() {
  // @@protoc_insertion_point(destructor:services.TileMergeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileMergeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  editor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TileMergeRequest::ArenaDtor(void* object) {
  TileMergeRequest* _this = reinterpret_cast< TileMergeRequest* >(object);
  (void)_this;
}
void TileMergeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileMergeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileMergeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:services.TileMergeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tile_id_.Clear();
  need_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      editor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      src_branch_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      dst_branch_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&request_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&editable_only_) -
        reinterpret_cast<char*>(&request_version_)) + sizeof(editable_only_));
    allow_conflict_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileMergeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 tile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tile_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_tile_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string editor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_editor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileMergeRequest.editor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 request_version = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_request_version(&has_bits);
          request_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 need_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_need_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_need_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string src_branch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_src_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileMergeRequest.src_branch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dst_branch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_dst_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileMergeRequest.dst_branch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool editable_only = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_editable_only(&has_bits);
          editable_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 src_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_src_version(&has_bits);
          src_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_conflict = 9 [default = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_allow_conflict(&has_bits);
          allow_conflict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileMergeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:services.TileMergeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 tile_id = 1;
  for (int i = 0, n = this->_internal_tile_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tile_id(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string editor = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_editor().data(), static_cast<int>(this->_internal_editor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileMergeRequest.editor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_editor(), target);
  }

  // optional int64 request_version = 3 [jstype = JS_STRING];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_request_version(), target);
  }

  // repeated int32 need_type = 4;
  for (int i = 0, n = this->_internal_need_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_need_type(i), target);
  }

  // optional string src_branch = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_src_branch().data(), static_cast<int>(this->_internal_src_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileMergeRequest.src_branch");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_src_branch(), target);
  }

  // optional string dst_branch = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dst_branch().data(), static_cast<int>(this->_internal_dst_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileMergeRequest.dst_branch");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dst_branch(), target);
  }

  // optional bool editable_only = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_editable_only(), target);
  }

  // optional int64 src_version = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_src_version(), target);
  }

  // optional bool allow_conflict = 9 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_allow_conflict(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:services.TileMergeRequest)
  return target;
}

size_t TileMergeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:services.TileMergeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 tile_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->tile_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tile_id_size());
    total_size += data_size;
  }

  // repeated int32 need_type = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->need_type_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_need_type_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string editor = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_editor());
    }

    // optional string src_branch = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_src_branch());
    }

    // optional string dst_branch = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dst_branch());
    }

    // optional int64 request_version = 3 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_request_version());
    }

    // optional int64 src_version = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_src_version());
    }

    // optional bool editable_only = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool allow_conflict = 9 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileMergeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileMergeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileMergeRequest::GetClassData() const { return &_class_data_; }

void TileMergeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TileMergeRequest *>(to)->MergeFrom(
      static_cast<const TileMergeRequest &>(from));
}


void TileMergeRequest::MergeFrom(const TileMergeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:services.TileMergeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tile_id_.MergeFrom(from.tile_id_);
  need_type_.MergeFrom(from.need_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_editor(from._internal_editor());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_src_branch(from._internal_src_branch());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_dst_branch(from._internal_dst_branch());
    }
    if (cached_has_bits & 0x00000008u) {
      request_version_ = from.request_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      src_version_ = from.src_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      editable_only_ = from.editable_only_;
    }
    if (cached_has_bits & 0x00000040u) {
      allow_conflict_ = from.allow_conflict_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileMergeRequest::CopyFrom(const TileMergeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:services.TileMergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileMergeRequest::IsInitialized() const {
  return true;
}

void TileMergeRequest::InternalSwap(TileMergeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tile_id_.InternalSwap(&other->tile_id_);
  need_type_.InternalSwap(&other->need_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &editor_, GetArenaForAllocation(),
      &other->editor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &src_branch_, GetArenaForAllocation(),
      &other->src_branch_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dst_branch_, GetArenaForAllocation(),
      &other->dst_branch_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileMergeRequest, editable_only_)
      + sizeof(TileMergeRequest::editable_only_)
      - PROTOBUF_FIELD_OFFSET(TileMergeRequest, request_version_)>(
          reinterpret_cast<char*>(&request_version_),
          reinterpret_cast<char*>(&other->request_version_));
  swap(allow_conflict_, other->allow_conflict_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TileMergeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_services_2froadserver_2eproto_getter, &descriptor_table_services_2froadserver_2eproto_once,
      file_level_metadata_services_2froadserver_2eproto[8]);
}

// ===================================================================

class TileMergeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TileMergeResponse>()._has_bits_);
  static void set_has_editor_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dst_branch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::services::RoadServiceResponse& ret(const TileMergeResponse* msg);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::services::RoadServiceResponse&
TileMergeResponse::_Internal::ret(const TileMergeResponse* msg) {
  return *msg->ret_;
}
TileMergeResponse::TileMergeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tile_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:services.TileMergeResponse)
}
TileMergeResponse::TileMergeResponse(const TileMergeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tile_info_(from.tile_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dst_branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dst_branch()) {
    dst_branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dst_branch(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ret()) {
    ret_ = new ::services::RoadServiceResponse(*from.ret_);
  } else {
    ret_ = nullptr;
  }
  editor_version_ = from.editor_version_;
  // @@protoc_insertion_point(copy_constructor:services.TileMergeResponse)
}

inline void TileMergeResponse::SharedCtor() {
dst_branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&editor_version_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(editor_version_));
}

TileMergeResponse::~TileMergeResponse() {
  // @@protoc_insertion_point(destructor:services.TileMergeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileMergeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dst_branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ret_;
}

void TileMergeResponse::ArenaDtor(void* object) {
  TileMergeResponse* _this = reinterpret_cast< TileMergeResponse* >(object);
  (void)_this;
}
void TileMergeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileMergeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileMergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:services.TileMergeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tile_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dst_branch_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ret_ != nullptr);
      ret_->Clear();
    }
  }
  editor_version_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileMergeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .services.TileInfo tile_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tile_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int64 editor_version = 5 [jstype = JS_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_editor_version(&has_bits);
          editor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dst_branch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_dst_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileMergeResponse.dst_branch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .services.RoadServiceResponse ret = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ret(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileMergeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:services.TileMergeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .services.TileInfo tile_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tile_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tile_info(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 editor_version = 5 [jstype = JS_STRING];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_editor_version(), target);
  }

  // optional string dst_branch = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dst_branch().data(), static_cast<int>(this->_internal_dst_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileMergeResponse.dst_branch");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dst_branch(), target);
  }

  // optional .services.RoadServiceResponse ret = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ret(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:services.TileMergeResponse)
  return target;
}

size_t TileMergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:services.TileMergeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .services.TileInfo tile_info = 3;
  total_size += 1UL * this->_internal_tile_info_size();
  for (const auto& msg : this->tile_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string dst_branch = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dst_branch());
    }

    // optional .services.RoadServiceResponse ret = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ret_);
    }

    // optional int64 editor_version = 5 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_editor_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileMergeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileMergeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileMergeResponse::GetClassData() const { return &_class_data_; }

void TileMergeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TileMergeResponse *>(to)->MergeFrom(
      static_cast<const TileMergeResponse &>(from));
}


void TileMergeResponse::MergeFrom(const TileMergeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:services.TileMergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tile_info_.MergeFrom(from.tile_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_dst_branch(from._internal_dst_branch());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ret()->::services::RoadServiceResponse::MergeFrom(from._internal_ret());
    }
    if (cached_has_bits & 0x00000004u) {
      editor_version_ = from.editor_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileMergeResponse::CopyFrom(const TileMergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:services.TileMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileMergeResponse::IsInitialized() const {
  return true;
}

void TileMergeResponse::InternalSwap(TileMergeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tile_info_.InternalSwap(&other->tile_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dst_branch_, GetArenaForAllocation(),
      &other->dst_branch_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileMergeResponse, editor_version_)
      + sizeof(TileMergeResponse::editor_version_)
      - PROTOBUF_FIELD_OFFSET(TileMergeResponse, ret_)>(
          reinterpret_cast<char*>(&ret_),
          reinterpret_cast<char*>(&other->ret_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileMergeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_services_2froadserver_2eproto_getter, &descriptor_table_services_2froadserver_2eproto_once,
      file_level_metadata_services_2froadserver_2eproto[9]);
}

// ===================================================================

class TileRevertRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TileRevertRequest>()._has_bits_);
  static void set_has_editor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_branch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_editable_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TileRevertRequest::TileRevertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tile_id_(arena),
  need_type_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:services.TileRevertRequest)
}
TileRevertRequest::TileRevertRequest(const TileRevertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tile_id_(from.tile_id_),
      need_type_(from.need_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  editor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_editor()) {
    editor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_editor(), 
      GetArenaForAllocation());
  }
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_branch()) {
    branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch(), 
      GetArenaForAllocation());
  }
  ::memcpy(&request_version_, &from.request_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&editable_only_) -
    reinterpret_cast<char*>(&request_version_)) + sizeof(editable_only_));
  // @@protoc_insertion_point(copy_constructor:services.TileRevertRequest)
}

inline void TileRevertRequest::SharedCtor() {
editor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&editable_only_) -
    reinterpret_cast<char*>(&request_version_)) + sizeof(editable_only_));
}

TileRevertRequest::~TileRevertRequest() {
  // @@protoc_insertion_point(destructor:services.TileRevertRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileRevertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  editor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TileRevertRequest::ArenaDtor(void* object) {
  TileRevertRequest* _this = reinterpret_cast< TileRevertRequest* >(object);
  (void)_this;
}
void TileRevertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileRevertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileRevertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:services.TileRevertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tile_id_.Clear();
  need_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      editor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      branch_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&request_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&editable_only_) -
        reinterpret_cast<char*>(&request_version_)) + sizeof(editable_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileRevertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 tile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tile_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_tile_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string editor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_editor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileRevertRequest.editor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 request_version = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_request_version(&has_bits);
          request_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 need_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_need_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_need_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string branch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileRevertRequest.branch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool editable_only = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_editable_only(&has_bits);
          editable_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileRevertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:services.TileRevertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 tile_id = 1;
  for (int i = 0, n = this->_internal_tile_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tile_id(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string editor = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_editor().data(), static_cast<int>(this->_internal_editor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileRevertRequest.editor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_editor(), target);
  }

  // optional int64 request_version = 3 [jstype = JS_STRING];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_request_version(), target);
  }

  // repeated int32 need_type = 4;
  for (int i = 0, n = this->_internal_need_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_need_type(i), target);
  }

  // optional string branch = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_branch().data(), static_cast<int>(this->_internal_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileRevertRequest.branch");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_branch(), target);
  }

  // optional bool editable_only = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_editable_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:services.TileRevertRequest)
  return target;
}

size_t TileRevertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:services.TileRevertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 tile_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->tile_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tile_id_size());
    total_size += data_size;
  }

  // repeated int32 need_type = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->need_type_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_need_type_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string editor = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_editor());
    }

    // optional string branch = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_branch());
    }

    // optional int64 request_version = 3 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_request_version());
    }

    // optional bool editable_only = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileRevertRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileRevertRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileRevertRequest::GetClassData() const { return &_class_data_; }

void TileRevertRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TileRevertRequest *>(to)->MergeFrom(
      static_cast<const TileRevertRequest &>(from));
}


void TileRevertRequest::MergeFrom(const TileRevertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:services.TileRevertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tile_id_.MergeFrom(from.tile_id_);
  need_type_.MergeFrom(from.need_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_editor(from._internal_editor());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_branch(from._internal_branch());
    }
    if (cached_has_bits & 0x00000004u) {
      request_version_ = from.request_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      editable_only_ = from.editable_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileRevertRequest::CopyFrom(const TileRevertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:services.TileRevertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileRevertRequest::IsInitialized() const {
  return true;
}

void TileRevertRequest::InternalSwap(TileRevertRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tile_id_.InternalSwap(&other->tile_id_);
  need_type_.InternalSwap(&other->need_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &editor_, GetArenaForAllocation(),
      &other->editor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &branch_, GetArenaForAllocation(),
      &other->branch_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileRevertRequest, editable_only_)
      + sizeof(TileRevertRequest::editable_only_)
      - PROTOBUF_FIELD_OFFSET(TileRevertRequest, request_version_)>(
          reinterpret_cast<char*>(&request_version_),
          reinterpret_cast<char*>(&other->request_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileRevertRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_services_2froadserver_2eproto_getter, &descriptor_table_services_2froadserver_2eproto_once,
      file_level_metadata_services_2froadserver_2eproto[10]);
}

// ===================================================================

class TileRevertResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TileRevertResponse>()._has_bits_);
  static void set_has_editor_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_branch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::services::RoadServiceResponse& ret(const TileRevertResponse* msg);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::services::RoadServiceResponse&
TileRevertResponse::_Internal::ret(const TileRevertResponse* msg) {
  return *msg->ret_;
}
TileRevertResponse::TileRevertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tile_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:services.TileRevertResponse)
}
TileRevertResponse::TileRevertResponse(const TileRevertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tile_info_(from.tile_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_branch()) {
    branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ret()) {
    ret_ = new ::services::RoadServiceResponse(*from.ret_);
  } else {
    ret_ = nullptr;
  }
  ::memcpy(&editor_version_, &from.editor_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_version_) -
    reinterpret_cast<char*>(&editor_version_)) + sizeof(request_version_));
  // @@protoc_insertion_point(copy_constructor:services.TileRevertResponse)
}

inline void TileRevertResponse::SharedCtor() {
branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_version_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(request_version_));
}

TileRevertResponse::~TileRevertResponse() {
  // @@protoc_insertion_point(destructor:services.TileRevertResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileRevertResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ret_;
}

void TileRevertResponse::ArenaDtor(void* object) {
  TileRevertResponse* _this = reinterpret_cast< TileRevertResponse* >(object);
  (void)_this;
}
void TileRevertResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileRevertResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileRevertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:services.TileRevertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tile_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      branch_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ret_ != nullptr);
      ret_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&editor_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_version_) -
        reinterpret_cast<char*>(&editor_version_)) + sizeof(request_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileRevertResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .services.TileInfo tile_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tile_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int64 editor_version = 5 [jstype = JS_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_editor_version(&has_bits);
          editor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string branch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "services.TileRevertResponse.branch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 request_version = 7 [jstype = JS_STRING];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_request_version(&has_bits);
          request_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .services.RoadServiceResponse ret = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ret(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileRevertResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:services.TileRevertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .services.TileInfo tile_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tile_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tile_info(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 editor_version = 5 [jstype = JS_STRING];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_editor_version(), target);
  }

  // optional string branch = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_branch().data(), static_cast<int>(this->_internal_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "services.TileRevertResponse.branch");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_branch(), target);
  }

  // optional int64 request_version = 7 [jstype = JS_STRING];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_request_version(), target);
  }

  // optional .services.RoadServiceResponse ret = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ret(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:services.TileRevertResponse)
  return target;
}

size_t TileRevertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:services.TileRevertResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .services.TileInfo tile_info = 3;
  total_size += 1UL * this->_internal_tile_info_size();
  for (const auto& msg : this->tile_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string branch = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_branch());
    }

    // optional .services.RoadServiceResponse ret = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ret_);
    }

    // optional int64 editor_version = 5 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_editor_version());
    }

    // optional int64 request_version = 7 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_request_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileRevertResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileRevertResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileRevertResponse::GetClassData() const { return &_class_data_; }

void TileRevertResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TileRevertResponse *>(to)->MergeFrom(
      static_cast<const TileRevertResponse &>(from));
}


void TileRevertResponse::MergeFrom(const TileRevertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:services.TileRevertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tile_info_.MergeFrom(from.tile_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_branch(from._internal_branch());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ret()->::services::RoadServiceResponse::MergeFrom(from._internal_ret());
    }
    if (cached_has_bits & 0x00000004u) {
      editor_version_ = from.editor_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      request_version_ = from.request_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileRevertResponse::CopyFrom(const TileRevertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:services.TileRevertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileRevertResponse::IsInitialized() const {
  return true;
}

void TileRevertResponse::InternalSwap(TileRevertResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tile_info_.InternalSwap(&other->tile_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &branch_, GetArenaForAllocation(),
      &other->branch_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileRevertResponse, request_version_)
      + sizeof(TileRevertResponse::request_version_)
      - PROTOBUF_FIELD_OFFSET(TileRevertResponse, ret_)>(
          reinterpret_cast<char*>(&ret_),
          reinterpret_cast<char*>(&other->ret_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileRevertResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_services_2froadserver_2eproto_getter, &descriptor_table_services_2froadserver_2eproto_once,
      file_level_metadata_services_2froadserver_2eproto[11]);
}

// ===================================================================

RoadService::~RoadService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RoadService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_services_2froadserver_2eproto);
  return file_level_service_descriptors_services_2froadserver_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RoadService::GetDescriptor() {
  return descriptor();
}

void RoadService::UploadTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::services::TileUploadRequest*,
                         ::services::TileUploadResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UploadTile() not implemented.");
  done->Run();
}

void RoadService::DownloadTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::services::TileDownloadRequest*,
                         ::services::TileDownloadResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DownloadTile() not implemented.");
  done->Run();
}

void RoadService::MergeTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::services::TileMergeRequest*,
                         ::services::TileMergeResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MergeTile() not implemented.");
  done->Run();
}

void RoadService::RevertTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::services::TileRevertRequest*,
                         ::services::TileRevertResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RevertTile() not implemented.");
  done->Run();
}

void RoadService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_services_2froadserver_2eproto[0]);
  switch(method->index()) {
    case 0:
      UploadTile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::services::TileUploadRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::services::TileUploadResponse*>(
                 response),
             done);
      break;
    case 1:
      DownloadTile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::services::TileDownloadRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::services::TileDownloadResponse*>(
                 response),
             done);
      break;
    case 2:
      MergeTile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::services::TileMergeRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::services::TileMergeResponse*>(
                 response),
             done);
      break;
    case 3:
      RevertTile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::services::TileRevertRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::services::TileRevertResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RoadService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::services::TileUploadRequest::default_instance();
    case 1:
      return ::services::TileDownloadRequest::default_instance();
    case 2:
      return ::services::TileMergeRequest::default_instance();
    case 3:
      return ::services::TileRevertRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RoadService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::services::TileUploadResponse::default_instance();
    case 1:
      return ::services::TileDownloadResponse::default_instance();
    case 2:
      return ::services::TileMergeResponse::default_instance();
    case 3:
      return ::services::TileRevertResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RoadService_Stub::RoadService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RoadService_Stub::RoadService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RoadService_Stub::~RoadService_Stub() {
  if (owns_channel_) delete channel_;
}

void RoadService_Stub::UploadTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::services::TileUploadRequest* request,
                              ::services::TileUploadResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RoadService_Stub::DownloadTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::services::TileDownloadRequest* request,
                              ::services::TileDownloadResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RoadService_Stub::MergeTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::services::TileMergeRequest* request,
                              ::services::TileMergeResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void RoadService_Stub::RevertTile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::services::TileRevertRequest* request,
                              ::services::TileRevertResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace services
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::services::RoadServiceResponse* Arena::CreateMaybeMessage< ::services::RoadServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::services::RoadServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::services::RoadFeature* Arena::CreateMaybeMessage< ::services::RoadFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::services::RoadFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::services::TileFeatureList* Arena::CreateMaybeMessage< ::services::TileFeatureList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::services::TileFeatureList >(arena);
}
template<> PROTOBUF_NOINLINE ::services::TileInfo* Arena::CreateMaybeMessage< ::services::TileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::services::TileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::services::TileUploadRequest* Arena::CreateMaybeMessage< ::services::TileUploadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::services::TileUploadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::services::TileUploadResponse* Arena::CreateMaybeMessage< ::services::TileUploadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::services::TileUploadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::services::TileDownloadRequest* Arena::CreateMaybeMessage< ::services::TileDownloadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::services::TileDownloadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::services::TileDownloadResponse* Arena::CreateMaybeMessage< ::services::TileDownloadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::services::TileDownloadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::services::TileMergeRequest* Arena::CreateMaybeMessage< ::services::TileMergeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::services::TileMergeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::services::TileMergeResponse* Arena::CreateMaybeMessage< ::services::TileMergeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::services::TileMergeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::services::TileRevertRequest* Arena::CreateMaybeMessage< ::services::TileRevertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::services::TileRevertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::services::TileRevertResponse* Arena::CreateMaybeMessage< ::services::TileRevertResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::services::TileRevertResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
