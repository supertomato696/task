// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamics/issue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dynamics_2fissue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dynamics_2fissue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metadata/metadata.pb.h"
#include "common/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dynamics_2fissue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dynamics_2fissue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dynamics_2fissue_2eproto;
namespace RoadPB {
class ErrorPoint;
struct ErrorPointDefaultTypeInternal;
extern ErrorPointDefaultTypeInternal _ErrorPoint_default_instance_;
class Issue;
struct IssueDefaultTypeInternal;
extern IssueDefaultTypeInternal _Issue_default_instance_;
}  // namespace RoadPB
PROTOBUF_NAMESPACE_OPEN
template<> ::RoadPB::ErrorPoint* Arena::CreateMaybeMessage<::RoadPB::ErrorPoint>(Arena*);
template<> ::RoadPB::Issue* Arena::CreateMaybeMessage<::RoadPB::Issue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RoadPB {

enum IssueType : int {
  ISSUE_LANE_LINE_UNCONNECTED = 1,
  ISSUE_LANE_LINE_GEOMETRY_ERROR = 2,
  ISSUE_LANE_ATTRIBUTE_ERROR = 3,
  ISSUE_CURB_BARRIER_CONNECTED_ERROR = 4,
  ISSUE_OBJECT_LOCATION_ERROR = 5,
  ISSUE_OBJECT_ATTRIBUTE_ERROR = 6,
  ISSUE_INFORMATION_LOG = 7,
  ISSUE_TASK_OVERFLOW = 8,
  ISSUE_AREA_ERROR = 9,
  ISSUE_DADIAN_POINT = 10,
  ISSUE_PCD_ERROR = 11,
  ISSUE_EDGE_MARK = 12,
  ISSUE_DIFF_LINE = 13
};
bool IssueType_IsValid(int value);
constexpr IssueType IssueType_MIN = ISSUE_LANE_LINE_UNCONNECTED;
constexpr IssueType IssueType_MAX = ISSUE_DIFF_LINE;
constexpr int IssueType_ARRAYSIZE = IssueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IssueType_descriptor();
template<typename T>
inline const std::string& IssueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IssueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IssueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IssueType_descriptor(), enum_t_value);
}
inline bool IssueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IssueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IssueType>(
    IssueType_descriptor(), name, value);
}
enum StateType : int {
  STATE_DONE = 1,
  STATE_REDUNDANCY = 2,
  STATE_NONE = 3,
  STATE_STAGE_REDUNDANCY = 4,
  STATE_PENDING = 5,
  STATE_SUSPEND = 6,
  STATE_CLEARING = 7
};
bool StateType_IsValid(int value);
constexpr StateType StateType_MIN = STATE_DONE;
constexpr StateType StateType_MAX = STATE_CLEARING;
constexpr int StateType_ARRAYSIZE = StateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateType_descriptor();
template<typename T>
inline const std::string& StateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StateType_descriptor(), enum_t_value);
}
inline bool StateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StateType>(
    StateType_descriptor(), name, value);
}
enum GeometryType : int {
  GEO_POINT = 1,
  GEO_LINE = 2,
  GEO_POLYGON = 3
};
bool GeometryType_IsValid(int value);
constexpr GeometryType GeometryType_MIN = GEO_POINT;
constexpr GeometryType GeometryType_MAX = GEO_POLYGON;
constexpr int GeometryType_ARRAYSIZE = GeometryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeometryType_descriptor();
template<typename T>
inline const std::string& GeometryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GeometryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GeometryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GeometryType_descriptor(), enum_t_value);
}
inline bool GeometryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GeometryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GeometryType>(
    GeometryType_descriptor(), name, value);
}
enum DiffState : int {
  NON = 1,
  QC_IN = 2,
  QC_OUT = 3
};
bool DiffState_IsValid(int value);
constexpr DiffState DiffState_MIN = NON;
constexpr DiffState DiffState_MAX = QC_OUT;
constexpr int DiffState_ARRAYSIZE = DiffState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DiffState_descriptor();
template<typename T>
inline const std::string& DiffState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DiffState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DiffState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DiffState_descriptor(), enum_t_value);
}
inline bool DiffState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DiffState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DiffState>(
    DiffState_descriptor(), name, value);
}
enum ElementChangeType : int {
  ELEMENT_CHANGE_ADD = 1,
  ELEMENT_CHANGE_DELETE = 2,
  ELEMENT_CHANGE_MODIFY = 3
};
bool ElementChangeType_IsValid(int value);
constexpr ElementChangeType ElementChangeType_MIN = ELEMENT_CHANGE_ADD;
constexpr ElementChangeType ElementChangeType_MAX = ELEMENT_CHANGE_MODIFY;
constexpr int ElementChangeType_ARRAYSIZE = ElementChangeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ElementChangeType_descriptor();
template<typename T>
inline const std::string& ElementChangeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ElementChangeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ElementChangeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ElementChangeType_descriptor(), enum_t_value);
}
inline bool ElementChangeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ElementChangeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ElementChangeType>(
    ElementChangeType_descriptor(), name, value);
}
// ===================================================================

class ErrorPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.ErrorPoint) */ {
 public:
  inline ErrorPoint() : ErrorPoint(nullptr) {}
  ~ErrorPoint() override;
  explicit constexpr ErrorPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorPoint(const ErrorPoint& from);
  ErrorPoint(ErrorPoint&& from) noexcept
    : ErrorPoint() {
    *this = ::std::move(from);
  }

  inline ErrorPoint& operator=(const ErrorPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorPoint& operator=(ErrorPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorPoint* internal_default_instance() {
    return reinterpret_cast<const ErrorPoint*>(
               &_ErrorPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ErrorPoint& a, ErrorPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorPoint* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorPoint* New() const final {
    return new ErrorPoint();
  }

  ErrorPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrorPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ErrorPoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.ErrorPoint";
  }
  protected:
  explicit ErrorPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kMinDistanceFieldNumber = 2,
    kMinAngleFieldNumber = 3,
  };
  // required .RoadPB.Point position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::RoadPB::Point& position() const;
  PROTOBUF_MUST_USE_RESULT ::RoadPB::Point* release_position();
  ::RoadPB::Point* mutable_position();
  void set_allocated_position(::RoadPB::Point* position);
  private:
  const ::RoadPB::Point& _internal_position() const;
  ::RoadPB::Point* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::RoadPB::Point* position);
  ::RoadPB::Point* unsafe_arena_release_position();

  // required double min_distance = 2;
  bool has_min_distance() const;
  private:
  bool _internal_has_min_distance() const;
  public:
  void clear_min_distance();
  double min_distance() const;
  void set_min_distance(double value);
  private:
  double _internal_min_distance() const;
  void _internal_set_min_distance(double value);
  public:

  // required double min_angle = 3;
  bool has_min_angle() const;
  private:
  bool _internal_has_min_angle() const;
  public:
  void clear_min_angle();
  double min_angle() const;
  void set_min_angle(double value);
  private:
  double _internal_min_angle() const;
  void _internal_set_min_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.ErrorPoint)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::RoadPB::Point* position_;
  double min_distance_;
  double min_angle_;
  friend struct ::TableStruct_dynamics_2fissue_2eproto;
};
// -------------------------------------------------------------------

class Issue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPB.Issue) */ {
 public:
  inline Issue() : Issue(nullptr) {}
  ~Issue() override;
  explicit constexpr Issue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Issue(const Issue& from);
  Issue(Issue&& from) noexcept
    : Issue() {
    *this = ::std::move(from);
  }

  inline Issue& operator=(const Issue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Issue& operator=(Issue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Issue& default_instance() {
    return *internal_default_instance();
  }
  static inline const Issue* internal_default_instance() {
    return reinterpret_cast<const Issue*>(
               &_Issue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Issue& a, Issue& b) {
    a.Swap(&b);
  }
  inline void Swap(Issue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Issue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Issue* New() const final {
    return new Issue();
  }

  Issue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Issue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Issue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Issue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Issue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPB.Issue";
  }
  protected:
  explicit Issue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorPointsFieldNumber = 8,
    kDiffIdsFieldNumber = 29,
    kDescFieldNumber = 2,
    kMemoFieldNumber = 13,
    kMarkRedEditorFieldNumber = 19,
    kMarkRedTimestampFieldNumber = 20,
    kMatchStrategyFieldNumber = 27,
    kFieldNameFieldNumber = 28,
    kIdFieldNumber = 1,
    kPtFieldNumber = 3,
    kRefIdFieldNumber = 24,
    kTarIdFieldNumber = 25,
    kRelateIdFieldNumber = 30,
    kTypeFieldNumber = 6,
    kManualFieldNumber = 7,
    kTimestampFieldNumber = 10,
    kStateFieldNumber = 9,
    kGeotypeFieldNumber = 11,
    kAngleFieldNumber = 12,
    kRuleIdFieldNumber = 14,
    kMarkRedQcidFieldNumber = 18,
    kMarkRedPhase2FieldNumber = 17,
    kCanEditTileFieldNumber = 21,
    kZyStateFieldNumber = 22,
    kDiffStateFieldNumber = 23,
    kChangeTypeFieldNumber = 26,
    kDiffPhaseFieldNumber = 31,
    kLenFieldNumber = 32,
  };
  // repeated .RoadPB.ErrorPoint error_points = 8;
  int error_points_size() const;
  private:
  int _internal_error_points_size() const;
  public:
  void clear_error_points();
  ::RoadPB::ErrorPoint* mutable_error_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::ErrorPoint >*
      mutable_error_points();
  private:
  const ::RoadPB::ErrorPoint& _internal_error_points(int index) const;
  ::RoadPB::ErrorPoint* _internal_add_error_points();
  public:
  const ::RoadPB::ErrorPoint& error_points(int index) const;
  ::RoadPB::ErrorPoint* add_error_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::ErrorPoint >&
      error_points() const;

  // repeated .RoadPB.FeatureID diff_ids = 29;
  int diff_ids_size() const;
  private:
  int _internal_diff_ids_size() const;
  public:
  void clear_diff_ids();
  ::RoadPB::FeatureID* mutable_diff_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >*
      mutable_diff_ids();
  private:
  const ::RoadPB::FeatureID& _internal_diff_ids(int index) const;
  ::RoadPB::FeatureID* _internal_add_diff_ids();
  public:
  const ::RoadPB::FeatureID& diff_ids(int index) const;
  ::RoadPB::FeatureID* add_diff_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >&
      diff_ids() const;

  // optional string desc = 2;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_MUST_USE_RESULT std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // optional string memo = 13;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_MUST_USE_RESULT std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // optional string mark_red_editor = 19;
  bool has_mark_red_editor() const;
  private:
  bool _internal_has_mark_red_editor() const;
  public:
  void clear_mark_red_editor();
  const std::string& mark_red_editor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mark_red_editor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mark_red_editor();
  PROTOBUF_MUST_USE_RESULT std::string* release_mark_red_editor();
  void set_allocated_mark_red_editor(std::string* mark_red_editor);
  private:
  const std::string& _internal_mark_red_editor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mark_red_editor(const std::string& value);
  std::string* _internal_mutable_mark_red_editor();
  public:

  // optional string mark_red_timestamp = 20;
  bool has_mark_red_timestamp() const;
  private:
  bool _internal_has_mark_red_timestamp() const;
  public:
  void clear_mark_red_timestamp();
  const std::string& mark_red_timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mark_red_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mark_red_timestamp();
  PROTOBUF_MUST_USE_RESULT std::string* release_mark_red_timestamp();
  void set_allocated_mark_red_timestamp(std::string* mark_red_timestamp);
  private:
  const std::string& _internal_mark_red_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mark_red_timestamp(const std::string& value);
  std::string* _internal_mutable_mark_red_timestamp();
  public:

  // optional string match_strategy = 27;
  bool has_match_strategy() const;
  private:
  bool _internal_has_match_strategy() const;
  public:
  void clear_match_strategy();
  const std::string& match_strategy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_match_strategy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_match_strategy();
  PROTOBUF_MUST_USE_RESULT std::string* release_match_strategy();
  void set_allocated_match_strategy(std::string* match_strategy);
  private:
  const std::string& _internal_match_strategy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_match_strategy(const std::string& value);
  std::string* _internal_mutable_match_strategy();
  public:

  // optional string field_name = 28;
  bool has_field_name() const;
  private:
  bool _internal_has_field_name() const;
  public:
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // optional .RoadPB.FeatureID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::RoadPB::FeatureID& id() const;
  PROTOBUF_MUST_USE_RESULT ::RoadPB::FeatureID* release_id();
  ::RoadPB::FeatureID* mutable_id();
  void set_allocated_id(::RoadPB::FeatureID* id);
  private:
  const ::RoadPB::FeatureID& _internal_id() const;
  ::RoadPB::FeatureID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::RoadPB::FeatureID* id);
  ::RoadPB::FeatureID* unsafe_arena_release_id();

  // optional .RoadPB.Point pt = 3;
  bool has_pt() const;
  private:
  bool _internal_has_pt() const;
  public:
  void clear_pt();
  const ::RoadPB::Point& pt() const;
  PROTOBUF_MUST_USE_RESULT ::RoadPB::Point* release_pt();
  ::RoadPB::Point* mutable_pt();
  void set_allocated_pt(::RoadPB::Point* pt);
  private:
  const ::RoadPB::Point& _internal_pt() const;
  ::RoadPB::Point* _internal_mutable_pt();
  public:
  void unsafe_arena_set_allocated_pt(
      ::RoadPB::Point* pt);
  ::RoadPB::Point* unsafe_arena_release_pt();

  // optional .RoadPB.FeatureID ref_id = 24;
  bool has_ref_id() const;
  private:
  bool _internal_has_ref_id() const;
  public:
  void clear_ref_id();
  const ::RoadPB::FeatureID& ref_id() const;
  PROTOBUF_MUST_USE_RESULT ::RoadPB::FeatureID* release_ref_id();
  ::RoadPB::FeatureID* mutable_ref_id();
  void set_allocated_ref_id(::RoadPB::FeatureID* ref_id);
  private:
  const ::RoadPB::FeatureID& _internal_ref_id() const;
  ::RoadPB::FeatureID* _internal_mutable_ref_id();
  public:
  void unsafe_arena_set_allocated_ref_id(
      ::RoadPB::FeatureID* ref_id);
  ::RoadPB::FeatureID* unsafe_arena_release_ref_id();

  // optional .RoadPB.FeatureID tar_id = 25;
  bool has_tar_id() const;
  private:
  bool _internal_has_tar_id() const;
  public:
  void clear_tar_id();
  const ::RoadPB::FeatureID& tar_id() const;
  PROTOBUF_MUST_USE_RESULT ::RoadPB::FeatureID* release_tar_id();
  ::RoadPB::FeatureID* mutable_tar_id();
  void set_allocated_tar_id(::RoadPB::FeatureID* tar_id);
  private:
  const ::RoadPB::FeatureID& _internal_tar_id() const;
  ::RoadPB::FeatureID* _internal_mutable_tar_id();
  public:
  void unsafe_arena_set_allocated_tar_id(
      ::RoadPB::FeatureID* tar_id);
  ::RoadPB::FeatureID* unsafe_arena_release_tar_id();

  // optional .RoadPB.FeatureID relate_id = 30;
  bool has_relate_id() const;
  private:
  bool _internal_has_relate_id() const;
  public:
  void clear_relate_id();
  const ::RoadPB::FeatureID& relate_id() const;
  PROTOBUF_MUST_USE_RESULT ::RoadPB::FeatureID* release_relate_id();
  ::RoadPB::FeatureID* mutable_relate_id();
  void set_allocated_relate_id(::RoadPB::FeatureID* relate_id);
  private:
  const ::RoadPB::FeatureID& _internal_relate_id() const;
  ::RoadPB::FeatureID* _internal_mutable_relate_id();
  public:
  void unsafe_arena_set_allocated_relate_id(
      ::RoadPB::FeatureID* relate_id);
  ::RoadPB::FeatureID* unsafe_arena_release_relate_id();

  // optional int32 type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool manual = 7;
  bool has_manual() const;
  private:
  bool _internal_has_manual() const;
  public:
  void clear_manual();
  bool manual() const;
  void set_manual(bool value);
  private:
  bool _internal_manual() const;
  void _internal_set_manual(bool value);
  public:

  // optional int64 timestamp = 10;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 state = 9;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 geotype = 11;
  bool has_geotype() const;
  private:
  bool _internal_has_geotype() const;
  public:
  void clear_geotype();
  ::PROTOBUF_NAMESPACE_ID::int32 geotype() const;
  void set_geotype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_geotype() const;
  void _internal_set_geotype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double angle = 12;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // optional int64 rule_id = 14;
  bool has_rule_id() const;
  private:
  bool _internal_has_rule_id() const;
  public:
  void clear_rule_id();
  ::PROTOBUF_NAMESPACE_ID::int64 rule_id() const;
  void set_rule_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rule_id() const;
  void _internal_set_rule_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 mark_red_qcid = 18;
  bool has_mark_red_qcid() const;
  private:
  bool _internal_has_mark_red_qcid() const;
  public:
  void clear_mark_red_qcid();
  ::PROTOBUF_NAMESPACE_ID::int64 mark_red_qcid() const;
  void set_mark_red_qcid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mark_red_qcid() const;
  void _internal_set_mark_red_qcid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 mark_red_phase2 = 17;
  bool has_mark_red_phase2() const;
  private:
  bool _internal_has_mark_red_phase2() const;
  public:
  void clear_mark_red_phase2();
  ::PROTOBUF_NAMESPACE_ID::int32 mark_red_phase2() const;
  void set_mark_red_phase2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mark_red_phase2() const;
  void _internal_set_mark_red_phase2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_edit_tile = 21;
  bool has_can_edit_tile() const;
  private:
  bool _internal_has_can_edit_tile() const;
  public:
  void clear_can_edit_tile();
  ::PROTOBUF_NAMESPACE_ID::int32 can_edit_tile() const;
  void set_can_edit_tile(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_edit_tile() const;
  void _internal_set_can_edit_tile(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 zy_state = 22;
  bool has_zy_state() const;
  private:
  bool _internal_has_zy_state() const;
  public:
  void clear_zy_state();
  ::PROTOBUF_NAMESPACE_ID::int32 zy_state() const;
  void set_zy_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zy_state() const;
  void _internal_set_zy_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 diff_state = 23 [default = 0];
  bool has_diff_state() const;
  private:
  bool _internal_has_diff_state() const;
  public:
  void clear_diff_state();
  ::PROTOBUF_NAMESPACE_ID::int32 diff_state() const;
  void set_diff_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_diff_state() const;
  void _internal_set_diff_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 change_type = 26;
  bool has_change_type() const;
  private:
  bool _internal_has_change_type() const;
  public:
  void clear_change_type();
  ::PROTOBUF_NAMESPACE_ID::int32 change_type() const;
  void set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_change_type() const;
  void _internal_set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 diff_phase = 31 [default = 0];
  bool has_diff_phase() const;
  private:
  bool _internal_has_diff_phase() const;
  public:
  void clear_diff_phase();
  ::PROTOBUF_NAMESPACE_ID::int32 diff_phase() const;
  void set_diff_phase(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_diff_phase() const;
  void _internal_set_diff_phase(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double len = 32 [default = 0];
  bool has_len() const;
  private:
  bool _internal_has_len() const;
  public:
  void clear_len();
  double len() const;
  void set_len(double value);
  private:
  double _internal_len() const;
  void _internal_set_len(double value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPB.Issue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::ErrorPoint > error_points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID > diff_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mark_red_editor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mark_red_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr match_strategy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::RoadPB::FeatureID* id_;
  ::RoadPB::Point* pt_;
  ::RoadPB::FeatureID* ref_id_;
  ::RoadPB::FeatureID* tar_id_;
  ::RoadPB::FeatureID* relate_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  bool manual_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 geotype_;
  double angle_;
  ::PROTOBUF_NAMESPACE_ID::int64 rule_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 mark_red_qcid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mark_red_phase2_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_edit_tile_;
  ::PROTOBUF_NAMESPACE_ID::int32 zy_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 diff_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 change_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 diff_phase_;
  double len_;
  friend struct ::TableStruct_dynamics_2fissue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrorPoint

// required .RoadPB.Point position = 1;
inline bool ErrorPoint::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool ErrorPoint::has_position() const {
  return _internal_has_position();
}
inline const ::RoadPB::Point& ErrorPoint::_internal_position() const {
  const ::RoadPB::Point* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::RoadPB::Point&>(
      ::RoadPB::_Point_default_instance_);
}
inline const ::RoadPB::Point& ErrorPoint::position() const {
  // @@protoc_insertion_point(field_get:RoadPB.ErrorPoint.position)
  return _internal_position();
}
inline void ErrorPoint::unsafe_arena_set_allocated_position(
    ::RoadPB::Point* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.ErrorPoint.position)
}
inline ::RoadPB::Point* ErrorPoint::release_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::RoadPB::Point* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RoadPB::Point* ErrorPoint::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:RoadPB.ErrorPoint.position)
  _has_bits_[0] &= ~0x00000001u;
  ::RoadPB::Point* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::RoadPB::Point* ErrorPoint::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Point>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::RoadPB::Point* ErrorPoint::mutable_position() {
  ::RoadPB::Point* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:RoadPB.ErrorPoint.position)
  return _msg;
}
inline void ErrorPoint::set_allocated_position(::RoadPB::Point* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.ErrorPoint.position)
}

// required double min_distance = 2;
inline bool ErrorPoint::_internal_has_min_distance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ErrorPoint::has_min_distance() const {
  return _internal_has_min_distance();
}
inline void ErrorPoint::clear_min_distance() {
  min_distance_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ErrorPoint::_internal_min_distance() const {
  return min_distance_;
}
inline double ErrorPoint::min_distance() const {
  // @@protoc_insertion_point(field_get:RoadPB.ErrorPoint.min_distance)
  return _internal_min_distance();
}
inline void ErrorPoint::_internal_set_min_distance(double value) {
  _has_bits_[0] |= 0x00000002u;
  min_distance_ = value;
}
inline void ErrorPoint::set_min_distance(double value) {
  _internal_set_min_distance(value);
  // @@protoc_insertion_point(field_set:RoadPB.ErrorPoint.min_distance)
}

// required double min_angle = 3;
inline bool ErrorPoint::_internal_has_min_angle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ErrorPoint::has_min_angle() const {
  return _internal_has_min_angle();
}
inline void ErrorPoint::clear_min_angle() {
  min_angle_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double ErrorPoint::_internal_min_angle() const {
  return min_angle_;
}
inline double ErrorPoint::min_angle() const {
  // @@protoc_insertion_point(field_get:RoadPB.ErrorPoint.min_angle)
  return _internal_min_angle();
}
inline void ErrorPoint::_internal_set_min_angle(double value) {
  _has_bits_[0] |= 0x00000004u;
  min_angle_ = value;
}
inline void ErrorPoint::set_min_angle(double value) {
  _internal_set_min_angle(value);
  // @@protoc_insertion_point(field_set:RoadPB.ErrorPoint.min_angle)
}

// -------------------------------------------------------------------

// Issue

// optional .RoadPB.FeatureID id = 1;
inline bool Issue::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool Issue::has_id() const {
  return _internal_has_id();
}
inline const ::RoadPB::FeatureID& Issue::_internal_id() const {
  const ::RoadPB::FeatureID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::RoadPB::FeatureID&>(
      ::RoadPB::_FeatureID_default_instance_);
}
inline const ::RoadPB::FeatureID& Issue::id() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.id)
  return _internal_id();
}
inline void Issue::unsafe_arena_set_allocated_id(
    ::RoadPB::FeatureID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Issue.id)
}
inline ::RoadPB::FeatureID* Issue::release_id() {
  _has_bits_[0] &= ~0x00000040u;
  ::RoadPB::FeatureID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RoadPB::FeatureID* Issue::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:RoadPB.Issue.id)
  _has_bits_[0] &= ~0x00000040u;
  ::RoadPB::FeatureID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::RoadPB::FeatureID* Issue::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000040u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::FeatureID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::RoadPB::FeatureID* Issue::mutable_id() {
  ::RoadPB::FeatureID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:RoadPB.Issue.id)
  return _msg;
}
inline void Issue::set_allocated_id(::RoadPB::FeatureID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Issue.id)
}

// optional string desc = 2;
inline bool Issue::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Issue::has_desc() const {
  return _internal_has_desc();
}
inline void Issue::clear_desc() {
  desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Issue::desc() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Issue::set_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoadPB.Issue.desc)
}
inline std::string* Issue::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:RoadPB.Issue.desc)
  return _s;
}
inline const std::string& Issue::_internal_desc() const {
  return desc_.Get();
}
inline void Issue::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Issue::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000001u;
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Issue::release_desc() {
  // @@protoc_insertion_point(field_release:RoadPB.Issue.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Issue::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Issue.desc)
}

// optional .RoadPB.Point pt = 3;
inline bool Issue::_internal_has_pt() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || pt_ != nullptr);
  return value;
}
inline bool Issue::has_pt() const {
  return _internal_has_pt();
}
inline const ::RoadPB::Point& Issue::_internal_pt() const {
  const ::RoadPB::Point* p = pt_;
  return p != nullptr ? *p : reinterpret_cast<const ::RoadPB::Point&>(
      ::RoadPB::_Point_default_instance_);
}
inline const ::RoadPB::Point& Issue::pt() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.pt)
  return _internal_pt();
}
inline void Issue::unsafe_arena_set_allocated_pt(
    ::RoadPB::Point* pt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pt_);
  }
  pt_ = pt;
  if (pt) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Issue.pt)
}
inline ::RoadPB::Point* Issue::release_pt() {
  _has_bits_[0] &= ~0x00000080u;
  ::RoadPB::Point* temp = pt_;
  pt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RoadPB::Point* Issue::unsafe_arena_release_pt() {
  // @@protoc_insertion_point(field_release:RoadPB.Issue.pt)
  _has_bits_[0] &= ~0x00000080u;
  ::RoadPB::Point* temp = pt_;
  pt_ = nullptr;
  return temp;
}
inline ::RoadPB::Point* Issue::_internal_mutable_pt() {
  _has_bits_[0] |= 0x00000080u;
  if (pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::Point>(GetArenaForAllocation());
    pt_ = p;
  }
  return pt_;
}
inline ::RoadPB::Point* Issue::mutable_pt() {
  ::RoadPB::Point* _msg = _internal_mutable_pt();
  // @@protoc_insertion_point(field_mutable:RoadPB.Issue.pt)
  return _msg;
}
inline void Issue::set_allocated_pt(::RoadPB::Point* pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pt_);
  }
  if (pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pt));
    if (message_arena != submessage_arena) {
      pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  pt_ = pt;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Issue.pt)
}

// optional int32 type = 6;
inline bool Issue::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Issue::has_type() const {
  return _internal_has_type();
}
inline void Issue::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::type() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.type)
  return _internal_type();
}
inline void Issue::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  type_ = value;
}
inline void Issue::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.type)
}

// optional bool manual = 7;
inline bool Issue::_internal_has_manual() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Issue::has_manual() const {
  return _internal_has_manual();
}
inline void Issue::clear_manual() {
  manual_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool Issue::_internal_manual() const {
  return manual_;
}
inline bool Issue::manual() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.manual)
  return _internal_manual();
}
inline void Issue::_internal_set_manual(bool value) {
  _has_bits_[0] |= 0x00001000u;
  manual_ = value;
}
inline void Issue::set_manual(bool value) {
  _internal_set_manual(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.manual)
}

// repeated .RoadPB.ErrorPoint error_points = 8;
inline int Issue::_internal_error_points_size() const {
  return error_points_.size();
}
inline int Issue::error_points_size() const {
  return _internal_error_points_size();
}
inline void Issue::clear_error_points() {
  error_points_.Clear();
}
inline ::RoadPB::ErrorPoint* Issue::mutable_error_points(int index) {
  // @@protoc_insertion_point(field_mutable:RoadPB.Issue.error_points)
  return error_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::ErrorPoint >*
Issue::mutable_error_points() {
  // @@protoc_insertion_point(field_mutable_list:RoadPB.Issue.error_points)
  return &error_points_;
}
inline const ::RoadPB::ErrorPoint& Issue::_internal_error_points(int index) const {
  return error_points_.Get(index);
}
inline const ::RoadPB::ErrorPoint& Issue::error_points(int index) const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.error_points)
  return _internal_error_points(index);
}
inline ::RoadPB::ErrorPoint* Issue::_internal_add_error_points() {
  return error_points_.Add();
}
inline ::RoadPB::ErrorPoint* Issue::add_error_points() {
  ::RoadPB::ErrorPoint* _add = _internal_add_error_points();
  // @@protoc_insertion_point(field_add:RoadPB.Issue.error_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::ErrorPoint >&
Issue::error_points() const {
  // @@protoc_insertion_point(field_list:RoadPB.Issue.error_points)
  return error_points_;
}

// optional int32 state = 9;
inline bool Issue::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Issue::has_state() const {
  return _internal_has_state();
}
inline void Issue::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::state() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.state)
  return _internal_state();
}
inline void Issue::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  state_ = value;
}
inline void Issue::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.state)
}

// optional int64 timestamp = 10;
inline bool Issue::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Issue::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Issue::clear_timestamp() {
  timestamp_ = int64_t{0};
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Issue::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Issue::timestamp() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.timestamp)
  return _internal_timestamp();
}
inline void Issue::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  timestamp_ = value;
}
inline void Issue::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.timestamp)
}

// optional int32 geotype = 11;
inline bool Issue::_internal_has_geotype() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Issue::has_geotype() const {
  return _internal_has_geotype();
}
inline void Issue::clear_geotype() {
  geotype_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::_internal_geotype() const {
  return geotype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::geotype() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.geotype)
  return _internal_geotype();
}
inline void Issue::_internal_set_geotype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  geotype_ = value;
}
inline void Issue::set_geotype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_geotype(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.geotype)
}

// optional double angle = 12;
inline bool Issue::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Issue::has_angle() const {
  return _internal_has_angle();
}
inline void Issue::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double Issue::_internal_angle() const {
  return angle_;
}
inline double Issue::angle() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.angle)
  return _internal_angle();
}
inline void Issue::_internal_set_angle(double value) {
  _has_bits_[0] |= 0x00010000u;
  angle_ = value;
}
inline void Issue::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.angle)
}

// optional string memo = 13;
inline bool Issue::_internal_has_memo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Issue::has_memo() const {
  return _internal_has_memo();
}
inline void Issue::clear_memo() {
  memo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Issue::memo() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Issue::set_memo(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoadPB.Issue.memo)
}
inline std::string* Issue::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:RoadPB.Issue.memo)
  return _s;
}
inline const std::string& Issue::_internal_memo() const {
  return memo_.Get();
}
inline void Issue::_internal_set_memo(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Issue::_internal_mutable_memo() {
  _has_bits_[0] |= 0x00000002u;
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Issue::release_memo() {
  // @@protoc_insertion_point(field_release:RoadPB.Issue.memo)
  if (!_internal_has_memo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return memo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Issue::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Issue.memo)
}

// optional int64 rule_id = 14;
inline bool Issue::_internal_has_rule_id() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Issue::has_rule_id() const {
  return _internal_has_rule_id();
}
inline void Issue::clear_rule_id() {
  rule_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Issue::_internal_rule_id() const {
  return rule_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Issue::rule_id() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.rule_id)
  return _internal_rule_id();
}
inline void Issue::_internal_set_rule_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  rule_id_ = value;
}
inline void Issue::set_rule_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rule_id(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.rule_id)
}

// optional int32 mark_red_phase2 = 17;
inline bool Issue::_internal_has_mark_red_phase2() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Issue::has_mark_red_phase2() const {
  return _internal_has_mark_red_phase2();
}
inline void Issue::clear_mark_red_phase2() {
  mark_red_phase2_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::_internal_mark_red_phase2() const {
  return mark_red_phase2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::mark_red_phase2() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.mark_red_phase2)
  return _internal_mark_red_phase2();
}
inline void Issue::_internal_set_mark_red_phase2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  mark_red_phase2_ = value;
}
inline void Issue::set_mark_red_phase2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mark_red_phase2(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.mark_red_phase2)
}

// optional int64 mark_red_qcid = 18;
inline bool Issue::_internal_has_mark_red_qcid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Issue::has_mark_red_qcid() const {
  return _internal_has_mark_red_qcid();
}
inline void Issue::clear_mark_red_qcid() {
  mark_red_qcid_ = int64_t{0};
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Issue::_internal_mark_red_qcid() const {
  return mark_red_qcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Issue::mark_red_qcid() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.mark_red_qcid)
  return _internal_mark_red_qcid();
}
inline void Issue::_internal_set_mark_red_qcid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00040000u;
  mark_red_qcid_ = value;
}
inline void Issue::set_mark_red_qcid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mark_red_qcid(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.mark_red_qcid)
}

// optional string mark_red_editor = 19;
inline bool Issue::_internal_has_mark_red_editor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Issue::has_mark_red_editor() const {
  return _internal_has_mark_red_editor();
}
inline void Issue::clear_mark_red_editor() {
  mark_red_editor_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Issue::mark_red_editor() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.mark_red_editor)
  return _internal_mark_red_editor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Issue::set_mark_red_editor(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 mark_red_editor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoadPB.Issue.mark_red_editor)
}
inline std::string* Issue::mutable_mark_red_editor() {
  std::string* _s = _internal_mutable_mark_red_editor();
  // @@protoc_insertion_point(field_mutable:RoadPB.Issue.mark_red_editor)
  return _s;
}
inline const std::string& Issue::_internal_mark_red_editor() const {
  return mark_red_editor_.Get();
}
inline void Issue::_internal_set_mark_red_editor(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  mark_red_editor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Issue::_internal_mutable_mark_red_editor() {
  _has_bits_[0] |= 0x00000004u;
  return mark_red_editor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Issue::release_mark_red_editor() {
  // @@protoc_insertion_point(field_release:RoadPB.Issue.mark_red_editor)
  if (!_internal_has_mark_red_editor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return mark_red_editor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Issue::set_allocated_mark_red_editor(std::string* mark_red_editor) {
  if (mark_red_editor != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mark_red_editor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mark_red_editor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Issue.mark_red_editor)
}

// optional string mark_red_timestamp = 20;
inline bool Issue::_internal_has_mark_red_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Issue::has_mark_red_timestamp() const {
  return _internal_has_mark_red_timestamp();
}
inline void Issue::clear_mark_red_timestamp() {
  mark_red_timestamp_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Issue::mark_red_timestamp() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.mark_red_timestamp)
  return _internal_mark_red_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Issue::set_mark_red_timestamp(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 mark_red_timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoadPB.Issue.mark_red_timestamp)
}
inline std::string* Issue::mutable_mark_red_timestamp() {
  std::string* _s = _internal_mutable_mark_red_timestamp();
  // @@protoc_insertion_point(field_mutable:RoadPB.Issue.mark_red_timestamp)
  return _s;
}
inline const std::string& Issue::_internal_mark_red_timestamp() const {
  return mark_red_timestamp_.Get();
}
inline void Issue::_internal_set_mark_red_timestamp(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  mark_red_timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Issue::_internal_mutable_mark_red_timestamp() {
  _has_bits_[0] |= 0x00000008u;
  return mark_red_timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Issue::release_mark_red_timestamp() {
  // @@protoc_insertion_point(field_release:RoadPB.Issue.mark_red_timestamp)
  if (!_internal_has_mark_red_timestamp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return mark_red_timestamp_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Issue::set_allocated_mark_red_timestamp(std::string* mark_red_timestamp) {
  if (mark_red_timestamp != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  mark_red_timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mark_red_timestamp,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Issue.mark_red_timestamp)
}

// optional int32 can_edit_tile = 21;
inline bool Issue::_internal_has_can_edit_tile() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Issue::has_can_edit_tile() const {
  return _internal_has_can_edit_tile();
}
inline void Issue::clear_can_edit_tile() {
  can_edit_tile_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::_internal_can_edit_tile() const {
  return can_edit_tile_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::can_edit_tile() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.can_edit_tile)
  return _internal_can_edit_tile();
}
inline void Issue::_internal_set_can_edit_tile(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  can_edit_tile_ = value;
}
inline void Issue::set_can_edit_tile(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_edit_tile(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.can_edit_tile)
}

// optional int32 zy_state = 22;
inline bool Issue::_internal_has_zy_state() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Issue::has_zy_state() const {
  return _internal_has_zy_state();
}
inline void Issue::clear_zy_state() {
  zy_state_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::_internal_zy_state() const {
  return zy_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::zy_state() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.zy_state)
  return _internal_zy_state();
}
inline void Issue::_internal_set_zy_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  zy_state_ = value;
}
inline void Issue::set_zy_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_zy_state(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.zy_state)
}

// optional int32 diff_state = 23 [default = 0];
inline bool Issue::_internal_has_diff_state() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Issue::has_diff_state() const {
  return _internal_has_diff_state();
}
inline void Issue::clear_diff_state() {
  diff_state_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::_internal_diff_state() const {
  return diff_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::diff_state() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.diff_state)
  return _internal_diff_state();
}
inline void Issue::_internal_set_diff_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  diff_state_ = value;
}
inline void Issue::set_diff_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_diff_state(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.diff_state)
}

// optional .RoadPB.FeatureID ref_id = 24;
inline bool Issue::_internal_has_ref_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || ref_id_ != nullptr);
  return value;
}
inline bool Issue::has_ref_id() const {
  return _internal_has_ref_id();
}
inline const ::RoadPB::FeatureID& Issue::_internal_ref_id() const {
  const ::RoadPB::FeatureID* p = ref_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::RoadPB::FeatureID&>(
      ::RoadPB::_FeatureID_default_instance_);
}
inline const ::RoadPB::FeatureID& Issue::ref_id() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.ref_id)
  return _internal_ref_id();
}
inline void Issue::unsafe_arena_set_allocated_ref_id(
    ::RoadPB::FeatureID* ref_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_id_);
  }
  ref_id_ = ref_id;
  if (ref_id) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Issue.ref_id)
}
inline ::RoadPB::FeatureID* Issue::release_ref_id() {
  _has_bits_[0] &= ~0x00000100u;
  ::RoadPB::FeatureID* temp = ref_id_;
  ref_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RoadPB::FeatureID* Issue::unsafe_arena_release_ref_id() {
  // @@protoc_insertion_point(field_release:RoadPB.Issue.ref_id)
  _has_bits_[0] &= ~0x00000100u;
  ::RoadPB::FeatureID* temp = ref_id_;
  ref_id_ = nullptr;
  return temp;
}
inline ::RoadPB::FeatureID* Issue::_internal_mutable_ref_id() {
  _has_bits_[0] |= 0x00000100u;
  if (ref_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::FeatureID>(GetArenaForAllocation());
    ref_id_ = p;
  }
  return ref_id_;
}
inline ::RoadPB::FeatureID* Issue::mutable_ref_id() {
  ::RoadPB::FeatureID* _msg = _internal_mutable_ref_id();
  // @@protoc_insertion_point(field_mutable:RoadPB.Issue.ref_id)
  return _msg;
}
inline void Issue::set_allocated_ref_id(::RoadPB::FeatureID* ref_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_id_);
  }
  if (ref_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_id));
    if (message_arena != submessage_arena) {
      ref_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  ref_id_ = ref_id;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Issue.ref_id)
}

// optional .RoadPB.FeatureID tar_id = 25;
inline bool Issue::_internal_has_tar_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tar_id_ != nullptr);
  return value;
}
inline bool Issue::has_tar_id() const {
  return _internal_has_tar_id();
}
inline const ::RoadPB::FeatureID& Issue::_internal_tar_id() const {
  const ::RoadPB::FeatureID* p = tar_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::RoadPB::FeatureID&>(
      ::RoadPB::_FeatureID_default_instance_);
}
inline const ::RoadPB::FeatureID& Issue::tar_id() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.tar_id)
  return _internal_tar_id();
}
inline void Issue::unsafe_arena_set_allocated_tar_id(
    ::RoadPB::FeatureID* tar_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tar_id_);
  }
  tar_id_ = tar_id;
  if (tar_id) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Issue.tar_id)
}
inline ::RoadPB::FeatureID* Issue::release_tar_id() {
  _has_bits_[0] &= ~0x00000200u;
  ::RoadPB::FeatureID* temp = tar_id_;
  tar_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RoadPB::FeatureID* Issue::unsafe_arena_release_tar_id() {
  // @@protoc_insertion_point(field_release:RoadPB.Issue.tar_id)
  _has_bits_[0] &= ~0x00000200u;
  ::RoadPB::FeatureID* temp = tar_id_;
  tar_id_ = nullptr;
  return temp;
}
inline ::RoadPB::FeatureID* Issue::_internal_mutable_tar_id() {
  _has_bits_[0] |= 0x00000200u;
  if (tar_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::FeatureID>(GetArenaForAllocation());
    tar_id_ = p;
  }
  return tar_id_;
}
inline ::RoadPB::FeatureID* Issue::mutable_tar_id() {
  ::RoadPB::FeatureID* _msg = _internal_mutable_tar_id();
  // @@protoc_insertion_point(field_mutable:RoadPB.Issue.tar_id)
  return _msg;
}
inline void Issue::set_allocated_tar_id(::RoadPB::FeatureID* tar_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tar_id_);
  }
  if (tar_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tar_id));
    if (message_arena != submessage_arena) {
      tar_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tar_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  tar_id_ = tar_id;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Issue.tar_id)
}

// optional int32 change_type = 26;
inline bool Issue::_internal_has_change_type() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Issue::has_change_type() const {
  return _internal_has_change_type();
}
inline void Issue::clear_change_type() {
  change_type_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::_internal_change_type() const {
  return change_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::change_type() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.change_type)
  return _internal_change_type();
}
inline void Issue::_internal_set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  change_type_ = value;
}
inline void Issue::set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.change_type)
}

// optional string match_strategy = 27;
inline bool Issue::_internal_has_match_strategy() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Issue::has_match_strategy() const {
  return _internal_has_match_strategy();
}
inline void Issue::clear_match_strategy() {
  match_strategy_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Issue::match_strategy() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.match_strategy)
  return _internal_match_strategy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Issue::set_match_strategy(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 match_strategy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoadPB.Issue.match_strategy)
}
inline std::string* Issue::mutable_match_strategy() {
  std::string* _s = _internal_mutable_match_strategy();
  // @@protoc_insertion_point(field_mutable:RoadPB.Issue.match_strategy)
  return _s;
}
inline const std::string& Issue::_internal_match_strategy() const {
  return match_strategy_.Get();
}
inline void Issue::_internal_set_match_strategy(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  match_strategy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Issue::_internal_mutable_match_strategy() {
  _has_bits_[0] |= 0x00000010u;
  return match_strategy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Issue::release_match_strategy() {
  // @@protoc_insertion_point(field_release:RoadPB.Issue.match_strategy)
  if (!_internal_has_match_strategy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return match_strategy_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Issue::set_allocated_match_strategy(std::string* match_strategy) {
  if (match_strategy != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  match_strategy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), match_strategy,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Issue.match_strategy)
}

// optional string field_name = 28;
inline bool Issue::_internal_has_field_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Issue::has_field_name() const {
  return _internal_has_field_name();
}
inline void Issue::clear_field_name() {
  field_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Issue::field_name() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Issue::set_field_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoadPB.Issue.field_name)
}
inline std::string* Issue::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:RoadPB.Issue.field_name)
  return _s;
}
inline const std::string& Issue::_internal_field_name() const {
  return field_name_.Get();
}
inline void Issue::_internal_set_field_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Issue::_internal_mutable_field_name() {
  _has_bits_[0] |= 0x00000020u;
  return field_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Issue::release_field_name() {
  // @@protoc_insertion_point(field_release:RoadPB.Issue.field_name)
  if (!_internal_has_field_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return field_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Issue::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  field_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Issue.field_name)
}

// repeated .RoadPB.FeatureID diff_ids = 29;
inline int Issue::_internal_diff_ids_size() const {
  return diff_ids_.size();
}
inline int Issue::diff_ids_size() const {
  return _internal_diff_ids_size();
}
inline ::RoadPB::FeatureID* Issue::mutable_diff_ids(int index) {
  // @@protoc_insertion_point(field_mutable:RoadPB.Issue.diff_ids)
  return diff_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >*
Issue::mutable_diff_ids() {
  // @@protoc_insertion_point(field_mutable_list:RoadPB.Issue.diff_ids)
  return &diff_ids_;
}
inline const ::RoadPB::FeatureID& Issue::_internal_diff_ids(int index) const {
  return diff_ids_.Get(index);
}
inline const ::RoadPB::FeatureID& Issue::diff_ids(int index) const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.diff_ids)
  return _internal_diff_ids(index);
}
inline ::RoadPB::FeatureID* Issue::_internal_add_diff_ids() {
  return diff_ids_.Add();
}
inline ::RoadPB::FeatureID* Issue::add_diff_ids() {
  ::RoadPB::FeatureID* _add = _internal_add_diff_ids();
  // @@protoc_insertion_point(field_add:RoadPB.Issue.diff_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPB::FeatureID >&
Issue::diff_ids() const {
  // @@protoc_insertion_point(field_list:RoadPB.Issue.diff_ids)
  return diff_ids_;
}

// optional .RoadPB.FeatureID relate_id = 30;
inline bool Issue::_internal_has_relate_id() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || relate_id_ != nullptr);
  return value;
}
inline bool Issue::has_relate_id() const {
  return _internal_has_relate_id();
}
inline const ::RoadPB::FeatureID& Issue::_internal_relate_id() const {
  const ::RoadPB::FeatureID* p = relate_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::RoadPB::FeatureID&>(
      ::RoadPB::_FeatureID_default_instance_);
}
inline const ::RoadPB::FeatureID& Issue::relate_id() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.relate_id)
  return _internal_relate_id();
}
inline void Issue::unsafe_arena_set_allocated_relate_id(
    ::RoadPB::FeatureID* relate_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relate_id_);
  }
  relate_id_ = relate_id;
  if (relate_id) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoadPB.Issue.relate_id)
}
inline ::RoadPB::FeatureID* Issue::release_relate_id() {
  _has_bits_[0] &= ~0x00000400u;
  ::RoadPB::FeatureID* temp = relate_id_;
  relate_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RoadPB::FeatureID* Issue::unsafe_arena_release_relate_id() {
  // @@protoc_insertion_point(field_release:RoadPB.Issue.relate_id)
  _has_bits_[0] &= ~0x00000400u;
  ::RoadPB::FeatureID* temp = relate_id_;
  relate_id_ = nullptr;
  return temp;
}
inline ::RoadPB::FeatureID* Issue::_internal_mutable_relate_id() {
  _has_bits_[0] |= 0x00000400u;
  if (relate_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadPB::FeatureID>(GetArenaForAllocation());
    relate_id_ = p;
  }
  return relate_id_;
}
inline ::RoadPB::FeatureID* Issue::mutable_relate_id() {
  ::RoadPB::FeatureID* _msg = _internal_mutable_relate_id();
  // @@protoc_insertion_point(field_mutable:RoadPB.Issue.relate_id)
  return _msg;
}
inline void Issue::set_allocated_relate_id(::RoadPB::FeatureID* relate_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(relate_id_);
  }
  if (relate_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relate_id));
    if (message_arena != submessage_arena) {
      relate_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relate_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  relate_id_ = relate_id;
  // @@protoc_insertion_point(field_set_allocated:RoadPB.Issue.relate_id)
}

// optional int32 diff_phase = 31 [default = 0];
inline bool Issue::_internal_has_diff_phase() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool Issue::has_diff_phase() const {
  return _internal_has_diff_phase();
}
inline void Issue::clear_diff_phase() {
  diff_phase_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::_internal_diff_phase() const {
  return diff_phase_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Issue::diff_phase() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.diff_phase)
  return _internal_diff_phase();
}
inline void Issue::_internal_set_diff_phase(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  diff_phase_ = value;
}
inline void Issue::set_diff_phase(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_diff_phase(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.diff_phase)
}

// optional double len = 32 [default = 0];
inline bool Issue::_internal_has_len() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool Issue::has_len() const {
  return _internal_has_len();
}
inline void Issue::clear_len() {
  len_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double Issue::_internal_len() const {
  return len_;
}
inline double Issue::len() const {
  // @@protoc_insertion_point(field_get:RoadPB.Issue.len)
  return _internal_len();
}
inline void Issue::_internal_set_len(double value) {
  _has_bits_[0] |= 0x02000000u;
  len_ = value;
}
inline void Issue::set_len(double value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:RoadPB.Issue.len)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RoadPB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RoadPB::IssueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoadPB::IssueType>() {
  return ::RoadPB::IssueType_descriptor();
}
template <> struct is_proto_enum< ::RoadPB::StateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoadPB::StateType>() {
  return ::RoadPB::StateType_descriptor();
}
template <> struct is_proto_enum< ::RoadPB::GeometryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoadPB::GeometryType>() {
  return ::RoadPB::GeometryType_descriptor();
}
template <> struct is_proto_enum< ::RoadPB::DiffState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoadPB::DiffState>() {
  return ::RoadPB::DiffState_descriptor();
}
template <> struct is_proto_enum< ::RoadPB::ElementChangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoadPB::ElementChangeType>() {
  return ::RoadPB::ElementChangeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dynamics_2fissue_2eproto
